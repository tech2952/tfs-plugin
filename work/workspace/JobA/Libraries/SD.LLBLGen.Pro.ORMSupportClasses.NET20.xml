<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SD.LLBLGen.Pro.ORMSupportClasses.NET20</name>
    </assembly>
    <members>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ActionQuery">
            <summary>
            Implementation of the ActionQuery class. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.Query">
            <summary>
            Abstract query class for the various query objects in the framework.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IQuery">
            <summary>
            The interface for dynamic created queries.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.AddParameterFieldRelation(SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation)">
            <summary>
            Adds a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation"/> to the collection of <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.ParameterFieldRelations"/>. An output parameter can be
            stored once in the collection.
            </summary>
            <param name="relation">The <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation"/> to add</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.ReflectOutputValuesInRelatedFields">
            <summary>
            Will walk all <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation"/> instances of this query and reflect the parameter values in the related fields.
            Only output parameters are taken into account.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.WireTransaction(System.Data.IDbTransaction)">
            <summary>
            Wires the command of this query with the transaction passed in.
            </summary>
            <param name="transactionToWire">the transaction to wire the command with</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.SetCommandTimeout(System.Int32)">
            <summary>
            Sets the command timeout.
            </summary>
            <param name="timeoutInterval">Timeout interval, in seconds.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.Connection">
            <summary>
            The connection object to use with the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.Command"/>
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.Command">
            <summary>
            The command used for this query.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.Parameters">
            <summary>
            The list of parameters used in the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.Command"/>. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IQuery.ParameterFieldRelations">
            <summary>
            Array list with the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation"/> instances for the relations between IEntityFields and output parameters.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Query.#ctor(System.Data.IDbCommand)">
            <summary>
            CTor
            </summary>
            <param name="commandToUse">Command to use</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Query.#ctor(System.Data.IDbConnection,System.Data.IDbCommand)">
            <summary>
            CTor
            </summary>
            <param name="connectionToUse">Connection object to use</param>
            <param name="commandToUse">Command to use</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Query.ReflectOutputValuesInRelatedFields">
            <summary>
            Will walk all <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation"/> instances of this query and reflect the parameter values in the related fields.
            Only output parameters are taken into account. Used by Insert queries which retrieve Identity / sequence values back from the database
            after a succesful insert.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Query.ToString">
            <summary>
            Overloaded ToString implementation
            </summary>
            <returns>Returns a complete textual representation of the command stored. The textual representation
            will not include parameter values, but will list their names and types.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Query.AddParameterFieldRelation(SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation)">
            <summary>
            Adds a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation"/> to the collection of <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.Query.ParameterFieldRelations"/>. 
            </summary>
            <param name="relation">The <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation"/> to add</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Query.WireTransaction(System.Data.IDbTransaction)">
            <summary>
            Wires the command of this query with the transaction passed in.
            </summary>
            <param name="transactionToWire">the transaction to wire the command with</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Query.SetCommandTimeout(System.Int32)">
            <summary>
            Sets the command timeout.
            </summary>
            <param name="timeoutInterval">Timeout interval, in seconds.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Query.Connection">
            <summary>
            The connection object to use with the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.Query.Command"/>
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Query.Command">
            <summary>
            The command used for this query.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Query.Parameters">
            <summary>
            The list of parameters used in the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.Query.Command"/>. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Query.ParameterFieldRelations">
            <summary>
            Array list with the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation"/> instances for the relations between IEntityFields and output parameters.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery">
            <summary>
            Interface for action queries. These queries do not return a resultset. Action queries execute Insert, Delete and Update statements.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery.Execute">
            <summary>
            Executes the query contained by the IQuery instance. 
            </summary>
            <returns>The number of rows affected (if applicable), otherwise 0.</returns>
            <exception cref="T:System.InvalidOperationException">When there is no command object inside the query object, 
            or no connection object inside the query object</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">when an exception was caught during query execution</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery.SequenceRetrievalQueries">
            <summary>
            Array list of ISequenceRetrievalQuery objects which are used to produce sequence values for input/output parameters in
            this query. Normally this collection is empty, as it is only used when the target database provider doesn't support batched
            queries (firebird/access/sqlce and others). Execute will wire the transaction if present. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery.ParameterParameterRelations">
            <summary>
            Gets the parameter parameter relations for this IActionQuery. These definitions are used for insert queries in multi-target entity inserts.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ActionQuery.#ctor(System.Data.IDbCommand)">
            <summary>
            CTor
            </summary>
            <param name="commandToUse">Command to use</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ActionQuery.#ctor(System.Data.IDbConnection,System.Data.IDbCommand)">
            <summary>
            CTor
            </summary>
            <param name="connectionToUse">Connection object to use</param>
            <param name="commandToUse">Command to use</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ActionQuery.ToString">
            <summary>
            Produces a string representation of this query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ActionQuery.Execute">
            <summary>
            Executes the query contained by the IQuery instance. If there was nothing to execute, 0 is returned.
            </summary>
            <returns>The number of rows affected (if applicable), otherwise 0.</returns>
            <exception cref="T:System.InvalidOperationException">When there is no command object inside the query object, 
            or no connection object inside the query object</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">when an exception was caught during query execution</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ActionQuery.SyncParameterParameterRelations">
            <summary>
            Syncs the parameter parameter relations.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ActionQuery.SequenceRetrievalQueries">
            <summary>
            Array list of ISequenceRetrievalQuery objects which are used to produce sequence values for input/output parameters in
            this query. Normally this collection is empty, as it is only used when the target database provider doesn't support batched
            queries (firebird/access/sqlce and others). Execute will wire the transaction if present. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ActionQuery.ParameterParameterRelations">
            <summary>
            Gets the parameter parameter relations for this IActionQuery. These definitions are used for insert queries in multi-target entity inserts.
            </summary>
            <value></value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TypeContainedAttribute">
            <summary>
            Attribute to use on properties which return an entity collection in the Adapter template set.
            This attribute will tell the property descriptor construction code to construct a list of 
            properties of the type set as the value of the attribute.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypeContainedAttribute.#ctor(System.Type)">
            <summary>
            CTor
            </summary>
            <param name="typeContainedInCollection">The type of the objects contained in the collection
            returned by the property this attribute is applied to.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TypeContainedAttribute.TypeContainedInCollection">
            <summary>
            Gets typeContainedInCollection
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery">
            <summary>
            Action query which contains multiple action queries which have to be executed in the order in which they're stored.
            Used for multi-target entities, like saving an inherited entity in a target-per-entity hierarchy.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.#ctor">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery"/> instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.AddActionQuery(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery)">
            <summary>
            Adds the action query passed in.
            </summary>
            <param name="query">Query.</param>
            <returns>the index in the execution queue</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.ToString">
            <summary>
            Produces a string representation of this batch action query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.Execute">
            <summary>
            Executes all action queries in this batchactionquery, in the order in which they were added.
            </summary>
            <returns>The number of rows affected (if applicable) of all queries executed combined, otherwise 0.</returns>
            <exception cref="T:System.InvalidOperationException">When there is no command object inside one or more query objects, 
            or no connection object inside the query object</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">when an exception was caught during query execution</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.AddParameterFieldRelation(SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation)">
            <summary>
            Adds the parameter field relation.
            </summary>
            <param name="relation">Relation.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.ReflectOutputValuesInRelatedFields">
            <summary>
            Reflects the output values in related fields for all actionqueries in this batchactionquery.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.WireTransaction(System.Data.IDbTransaction)">
            <summary>
            Wires the command of this query with the transaction passed in.
            </summary>
            <param name="transactionToWire">the transaction to wire the command with</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.SetCommandTimeout(System.Int32)">
            <summary>
            Sets the command timeout.
            </summary>
            <param name="timeoutInterval">Timeout interval, in seconds.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.ActionQueries">
            <summary>
            Gets the actionQueries set in this batch action query object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.SequenceRetrievalQueries">
            <summary>
            Gets the sequence retrieval queries. Not implemented in BatchActionQueries.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.Connection">
            <summary>
            Gets or sets the connection for this action query object. Get will return the connection of the first action query stored.
            Set will set the connection on all actionquery objects.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.Command">
            <summary>
            Gets or sets the command. Not implemented on Batch action query objects. Use the indexer instead.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.Parameters">
            <summary>
            Gets the parameters of all queries.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.ParameterFieldRelations">
            <summary>
            Gets the parameter field relations.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Data.IDbCommand"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.Count">
            <summary>
            Gets the number of IActionQueries in this query.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.ParameterParameterRelations">
            <summary>
            Gets the parameter parameter relations for this IActionQuery. These definitions are used for insert queries in multi-target entity inserts.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.BatchActionQuery.QuitOnPartlyFailure">
            <summary>
            Gets / sets quitOnPartlyFailure
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ComPlusAdapterContextBase">
            <summary>
            ComPlusAdapterContextBase class. Abstract class which is the base for the ComPlusAdapterContext classes used
            in Adapter for hosting a COM+ aware DataAccessAdapter class. 
            Use the hosted DataAccessAdapter class to start a new COM+ transaction.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IComPlusAdapterContext">
            <summary>
            Interface for the COM+ context class which controls the COM+ transaction flow towards the database server, if applicable. 
            It contains a normal DataAccessAdapter class to do the work, and the IComPlusAdapterContext implementing class is consulted
            by the DataAccessAdapter class in cases of transaction control and database connection creation. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IComPlusAdapterContext.Adapter">
            <summary>
            Returns the DataAccessAdapter object related to this COM+ context. Use this adapter instance to perform persistence actions
            inside the COM+ transaction this IComPlusAdapterContext implementing object is participating in.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ComPlusAdapterContextBase.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ComPlusAdapterContextBase.CreateConnection(System.String)">
            <summary>
            Creates a new connection object using the connection string passed in.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ComPlusAdapterContextBase.Commit">
            <summary>
            Signals to commit the current transaction.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ComPlusAdapterContextBase.Rollback">
            <summary>
            Signals to rollback the current transaction.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ComPlusAdapterContextBase.CreateDatabaseConnection(System.String)">
            <summary>
            Creates the physical connection object
            </summary>
            <param name="connectionString">connection string to use</param>
            <returns>Usable connection object (closed)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ComPlusAdapterContextBase.SetAdapter(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter)">
            <summary>
            Sets the adapter to host in this context. Adapter is already aware of this context.
            </summary>
            <param name="adapter">Com+ context aware adapter instance</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ComPlusAdapterContextBase.Adapter">
            <summary>
            Returns the DataAccessAdapter object related to this COM+ context. Use this adapter instance to perform persistence actions
            inside the COM+ transaction this IComPlusAdapterContext implementing object is participating in.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.Context">
            <summary>
            General Context class which provides uniquing support for the object fetcher. A developer
            can use this class to create a space for objects where every entity is loaded just once.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.#ctor">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.Context"/> instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.#ctor(System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.Context"/> instance.
            </summary>
            <param name="setExistingEntityFieldsInGet">Flag to set existing entity fields in get. Default is true. When set to false, an existing
            entity's fields is not set to the fields of the passed in entity. Fields are only set if the entity isn't dirty.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Adds the specified entity to the Context. If the passed in entity is already in a context, the Add is a no-op.
            Also if the entity isn't new and there is already an entity with the same PK values, the Add is a no-op.
            </summary>
            <param name="toAdd">entity to add to this context.</param>
            <remarks>SelfServicing specific version</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Adds the specified entity to the Context. If the passed in entity is already in a context, the Add is a no-op.
            Also if the entity isn't new and there is already an entity with the same PK values, the Add is a no-op.
            </summary>
            <param name="toAdd">entity to add to this context.</param>
            <remarks>Adapter specific version</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Adds the specified collection to this context. All contained entities are added to the context as well, if they're not already in the / a context.
            This will make sure that any entity added to the entity collection will be added to this context as well. 
            </summary>
            <param name="toAdd">To add.</param>
            <remarks>SelfServicing specific version</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Adds the specified collection to this context. All contained entities are added to the context as well, if they're not already in the / a context.
            This will make sure that any entity added to the entity collection will be added to this context as well. 
            </summary>
            <param name="toAdd">To add.</param>
            <remarks>Adapter specific version</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.EntitySaveCommitted(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            After an entity has been saved and the transaction has been committed (or if no transaction was used: the entity was saved), this routine is called
            to move entities which are in the list of new entities and which are now saved to the store. 
            </summary>
            <param name="entity">Entity.</param>
            <remarks>Routine for the framework, you don't have to call this routine yourself</remarks>
            <remarks>SelfServicing specific version</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.EntitySaveCommitted(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            After an entity has been saved and the transaction has been committed (or if no transaction was used: the entity was saved), this routine is called
            to move entities which are in the list of new entities and which are now saved to the store. 
            </summary>
            <param name="entity">Entity.</param>
            <remarks>Routine for the framework, you don't have to call this routine yourself</remarks>
            <remarks>Adapter specific version</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.GetAll(System.Type)">
            <summary>
            Returns a readonly arraylist with all the objects of the type passed in which are currently stored in the internal object cache.
            No new entities are returned. If the type is not found, an empty array list is returned.
            </summary>
            <param name="typeOfEntity">The type of the entity for which the objects should be returned.</param>
            <returns>Read only arraylist with the requested data</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.GetAllTypes">
            <summary>
            Gets all the Type objects for which objects are located in this Context
            </summary>
            <returns>Read only arraylist with the requested data</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.Get(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            The passed in entity is checked if the contained data is already in this / a context in another entity object.
            If that's the case, that entity object is returned. If the data is not in this context in another entity object,
            the passed in entity is returned and added to this context.
            </summary>
            <param name="toCheck">entity to check</param>
            <returns>an already loaded entity with the same data, or the passed in entity if the data hasn't been loaded in another entity in this context
            or the entity passed in is new or the existing entity is deleted and its transaction has been completed.</returns>
            <remarks>if toCheck is new, it is added to the new entities pool (if not already present) and its context is set to this instance. 
            New entities aren't yet added to the context until they're saved. A new entity passed in is returned as well.
            SelfServicing specific version.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.Get(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            The passed in entity is checked if the contained data is already in this / a context in another entity object.
            </summary>
            <param name="toCheck">entity to check</param>
            <returns>an already loaded entity with the same data, or the passed in entity if the data hasn't been loaded in another entity in this context
            or the entity passed in is new or the existing entity is deleted and its transaction has been completed.</returns>
            <remarks>if toCheck is new, it is added to the new entities pool (if not already present) and its context is set to this instance. 
            New entities aren't yet added to the context until they're saved. A new entity passed in is returned as well.
            Adapter specific version</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.Get(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory,System.Object[])">
            <summary>
            Tries to find an entity with the same PK values as passed in. The PK values have to be in the same order as they appear in the constructor of the 
            entity. If an entity in the context has the same PK values, that entity is returned, otherwise a new entity is returned, created with the 
            factory passed in, with its PK values initialized, though not fetched. 
            </summary>
            <param name="factory">Factory to use for entity to find</param>
            <param name="pkValues">Pk values. Have to be specified in the same order as the PK fields in the entity constructor created by the factory passed in.</param>
            <returns>Entity with the same PK values if that entity was already added to the context, or a new entity if no entity was previously added to
            this context with the same PK values</returns>
            <exception cref="T:System.ArgumentException">if more/less pkvalues are passed in as there are in the PK of the entity created with the factory passed in</exception>
            <remarks>SelfServicing specific version</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.Get(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,System.Object[])">
            <summary>
            Tries to find an entity with the same PK values as passed in. The PK values have to be in the same order as they appear in the constructor of the 
            entity. If an entity in the context has the same PK values, that entity is returned, otherwise a new entity is returned, created with the 
            factory passed in, with its PK values initialized, though not fetched. 
            </summary>
            <param name="factory">Factory to use for entity to find</param>
            <param name="pkValues">Pk values. Have to be specified in the same order as the PK fields in the entity constructor created by the factory passed in.</param>
            <returns>Entity with the same PK values if that entity was already added to the context, or a new entity if no entity was previously added to
            this context with the same PK values</returns>
            <exception cref="T:System.ArgumentException">if more/less pkvalues are passed in as there are in the PK of the entity created with the factory passed in</exception>
            <remarks>Adapter specific version</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.Remove(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Removes the specified entity from the store
            </summary>
            <param name="toRemove">To remove.</param>
            <remarks>generic version for both SelfServicing and Adapter.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.FindEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Tries to find the passed in entity in the store, based on its contained data. It assumes the passed in entity isn't new. 
            </summary>
            <param name="toCheck">Entity object which contains entity data to </param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.FindEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Tries to find the passed in entity in the store, based on its contained data. It assumes the passed in entity isn't new. 
            </summary>
            <param name="toCheck">Entity object which contains entity data to </param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.AddEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Adds the entity passed in. The entity passed in is not new and the object isn't in the store as it isn't in a context yet. 
            It assumes that there is no entity with the same PK in the store, as that's checked by the public Add() methods.
            </summary>
            <param name="toAdd">entity to add</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Context.InitClass(System.Boolean)">
            <summary>
            Inits the class.
            </summary>
            <param name="setExistingEntityFieldsInGet"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Context.SetExistingEntityFieldsInGet">
            <summary>
            Gets / sets SetExistingEntityFieldsInGet flag. When set to false (default is true), an existing
            entity's fields is not set to the fields of the passed in entity. Fields are only set if the entity isn't dirty.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType">
            <summary>
            Enum to specify to the IConcurrencyPredicateFactory what kind of predicate to produce
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType.Save">
            <summary>
            The predicate type requested is for a Save action
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType.Delete">
            <summary>
            The predicate type requested is for a Delete action
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceHierarchyType">
            <summary>
            Enum definition for defining the hierarchy type of the inheritance tree
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceHierarchyType.None">
            <summary>
            No hierarchy defined for this entity or the entity isn't the root entity.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceHierarchyType.TargetPerEntityHierarchy">
            <summary>
            All entities map to the single target (table/view)
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceHierarchyType.TargetPerEntity">
            <summary>
            Per entity a target (table/view) is defined, with just the fields of the derived entity, not the fields of the parent entity.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackScheduleSlot">
            <summary>
            Enum definition to tell the UnitOfWork that the passed in callback should be executed in the slot specified.
            Entities are executed in the order: Insert, Update, Delete. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackScheduleSlot.PreEntityInsert">
            <summary>
            Execute the callback before the first entity is inserted.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackScheduleSlot.PreEntityUpdate">
            <summary>
            Execute the callback after the last entity has been inserted but before the first entity will be updated.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackScheduleSlot.PreEntityDelete">
            <summary>
            Execute the callback after the last entity has been updated but before the first entity will be deleted.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackScheduleSlot.PostEntityDelete">
            <summary>
            Execute the callback after the last entity has been deleted.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect">
            <summary>
            Enum definition for the flags which can be passed to overloads of WriteXml(). These flags control the way the format of the output. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect.None">
            <summary>
            No aspects have been specified, the defaults are used.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect.Compact">
            <summary>
            Produces compact XML. This xml doesn't contain type information attributes, nor non-data fields for objects. The default is verbose.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect.MLTextInCDataBlocks">
            <summary>
            Places all strings with a &lt; and or &gt; in CDATA blocks. The default is not to do this.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect.DatesInXmlDataType">
            <summary>
            Exports all DateTime values in the standard date/time format for XML: DateTime.ToString("yyyy-MM-ddTHH:mm:ss.fffffffzzzzzz");. The default is
            to export DateTime values in ticks. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameUsage">
            <summary>
            SqlServer specific enum definition for Adapter template set. Specifies for the active DataAccessAdapter object what
            to do with the catalog name in persistence information set into fields. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameUsage.Default">
            <summary>
            Use default behaviour, which means that nothing is done to the catalog name specified in the persistence info.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameUsage.ForceName">
            <summary>
            Force the name specified in the property DataAccessAdapter.CatalogNameToUse. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameUsage.Clear">
            <summary>
            Clears the catalog name specified in the persistence information. This means that the catalog name specified in the
            connection string is used by SqlServer where to locate specified tables etc.. Clearing of the catalog name makes the
            SqlServer DQE ignore the catalog name when generating names.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameUsage">
            <summary>
            Oracle specific enum definition for Adapter template set. Specifies for the active DataAccessAdapter object what
            to do with the schema name in persistence information set into fields. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameUsage.Default">
            <summary>
            Use default behaviour, which means that nothing is done to the schema name specified in the persistence info.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameUsage.ForceName">
            <summary>
            Force the name specified in the property DataAccessAdapter.SchemaNameToUse. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameUsage.Clear">
            <summary>
            Clears the Schema name specified in the persistence information. This means that the schema name specified in the
            persistence info is cleared. This results in the fact that database objects are not prefixed with a schema, and
            will only result in a succesful query if global synonym equivalents are available.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.JoinHint">
            <summary>
            Enum definition for the hint specified in the Add method of RelationCollection.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.JoinHint.None">
            <summary>
            No hint specified. Use INNER unless ObeyWeakRelations is set to true.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.JoinHint.Inner">
            <summary>
            Inner join between start and end entity of given relation
            Overrules the set ObeyWeakRelations flag for this relation.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.JoinHint.Left">
            <summary>
            Hints a LEFT join between start and end entity in relation. 
            Overrules the set ObeyWeakRelations flag for this relation.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.JoinHint.Right">
            <summary>
            Hints a RIGHT join between start and end entity in relation. 
            Overrules the set ObeyWeakRelations flag for this relation.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.JoinHint.Cross">
            <summary>
            Hints a CROSS join between start and end entity in relation.
            Overrules the set ObeyWeakRelations flag for this relation.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionElementType">
            <summary>
            Enum definition for the type of a PredicateExpressionElement
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionElementType.Operator">
            <summary>
            Element contains an Operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionElementType.Predicate">
            <summary>
            Element contains an IPredicate implementing object.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionElementType.Empty">
            <summary>
            The element is empty.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType">
            <summary>
            Enum definition for the type of a predicate instance.
            This enum is stored in Predicate as an int and is used in DataAccessAdapterBase derived classes.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType.Undefined">
            <summary>
            Undefined type. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType.FieldBetweenPredicate">
            <summary>
            A FieldBetweenPredicate instance
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType.FieldCompareNullPredicate">
            <summary>
            A FieldCompareNullPredicate instance
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType.FieldCompareValuePredicate">
            <summary>
            A FieldCompareValuePredicate instance
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType.FieldLikePredicate">
            <summary>
            A FieldLikePredicate instance
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType.PredicateExpression">
            <summary>
            A predicate expression object containing 0 or more predicate elements.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType.FieldCompareRangePredicate">
            <summary>
            A FieldCompareRangePredicate instance.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType.FieldFullTextSearchPredicate">
            <summary>
            A FieldFullTextSearchPredicate (SqlServer 2000 specific). Future enhancement.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType.FieldCompareExpressionPredicate">
            <summary>
            A FieldCompareExpression predicate. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateType.FieldCompareSetPredicate">
            <summary>
            A FieldCompareSet predicate
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.RelationType">
            <summary>
            Enum definition for the type of relation an EntityRelation object represents.
            There is no definition for m:n relation because EntityRelation can't represent a m:n relation
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToMany">
            <summary>
            A 1:n relation
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.RelationType.OneToOne">
            <summary>
            A 1:1 relation
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToOne">
            <summary>
            A m:1 relation
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.RelationType.ManyToMany">
            <summary>
            A m:n relation
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator">
            <summary>
            Enum definition for the operator used in the FieldCompareValue Predicate.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator.Equal">
            <summary>
            == . The only operator useful for boolean (bit) Fields.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator.LessEqual">
            <summary>
            &lt;=
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator.LesserThan">
            <summary>
            &lt;
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator.GreaterEqual">
            <summary>
            &gt;=
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator.GreaterThan">
            <summary>
            &gt;
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator.NotEqual">
            <summary>
            &lt;&gt; or !=
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator">
            <summary>
            Enum definition for the operators used with the FieldCompareSetPredicate class.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.In">
            <summary>
            IN (set) operator.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.Exist">
            <summary>
            EXISTS(set) operator.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.Equal">
            <summary>
            == (set with 1 value) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.EqualAny">
            <summary>
            == ANY (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.EqualAll">
            <summary>
            == ALL (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.LessEqual">
            <summary>
            &lt;= (set with 1 value) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.LessEqualAny">
            <summary>
            &lt;= ANY (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.LessEqualAll">
            <summary>
            &lt;= ALL (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.LesserThan">
            <summary>
            &lt; (set with 1 value) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.LesserThanAny">
            <summary>
            &lt; ANY (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.LesserThanAll">
            <summary>
            &lt; ALL (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.GreaterEqual">
            <summary>
            &gt;= (set with 1 value) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.GreaterEqualAny">
            <summary>
            &gt;= ANY (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.GreaterEqualAll">
            <summary>
            &gt;= ALL (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.GreaterThan">
            <summary>
            &gt; (set with 1 value) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.GreaterThanAny">
            <summary>
            &gt; ANY (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.GreaterThanAll">
            <summary>
            &gt; ALL (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.NotEqual">
            <summary>
            &lt;&gt; (set with 1 value) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.NotEqualAny">
            <summary>
            &lt;&gt; ANY (set) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SetOperator.NotEqualAll">
            <summary>
            &lt;&gt; ALL (set) operator
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionOperator">
            <summary>
            Enum definition for the Operators used in PredicateExpressions
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionOperator.And">
            <summary>
            The AND operator.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionOperator.Or">
            <summary>
            The OR operator.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SortOperator">
            <summary>
            Enum definition for the sort operator, which can be specified with IEntityField instances to create
            order by clauses.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SortOperator.Ascending">
            <summary>
            Makes sorts Ascending
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.SortOperator.Descending">
            <summary>
            Makes sorts Descending
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityState">
            <summary>
            Enum definition for the state an Entity can be in.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.EntityState.New">
            <summary>
            Entity is new. It can be empty or filled, but is not saved (yet) to the persistent storage.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.EntityState.Fetched">
            <summary>
            Entity is filled with its data from the persistent storage. It can be changed since the fetch.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.EntityState.OutOfSync">
            <summary>
            Entity is out of sync with its physical entity in the persistent storage. 
            An Entity is marked OutOfSync when a succesful Save action is performed. 
            An Entity will re-fetch itself when in the state OutOfSync when a property
            is read or Refetch() is called. The state will then be set to Fetched.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.EntityState.Deleted">
            <summary>
            Adapter specific. If an entity has the state Deleted, it is no longer
            available in the persistent storage.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction">
            <summary>
            Enum definition for the various aggregate functions which can be applied to fields in a retrieval query. 
            Useful in typed lists. Use these in combination with a groupbycollection.
            Not all functions are legal on all fields. Some functions will produce errors when used with fields of a given type,
            like a Sum function with a character field. This is the responsibility of the developer. Aggregate functions are
            never applied to *lob fields. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.None">
            <summary>
            Default, do not apply an aggregate function to the field.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.Count">
            <summary>
            Calculates the amount of rows for the field. Results in COUNT(field) 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.CountDistinct">
            <summary>
            Calculates the amount of rows with distinct values for field. Results in COUNT(DISTINCT field).
            Access, MySql: not supported
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.CountRow">
            <summary>
            Calculates the amount of rows. Results in a COUNT(*)
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.Avg">
            <summary>
            Calculates the average value for the field. Results in an AVG(field)
            </summary>
            <remarks>works on numeric fields (decimal/int/float/byte/etc.) only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.AvgDistinct">
            <summary>
            Calculates the average value for the distinct values for field. Results in an AVG(DISTINCT field).
            Access, MySql: not supported
            </summary>
            <remarks>works on numeric fields (decimal/int/float/byte/etc.) only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.Max">
            <summary>
            Calculates the max value for field. Results in a MAX(field). 
            </summary>
            <remarks>works on numeric fields (decimal/int/float/byte/etc.) only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.Min">
            <summary>
            Calculates the min value for field. Results in a MIN(field)
            </summary>
            <remarks>works on numeric fields (decimal/int/float/byte/etc.) only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.Sum">
            <summary>
            Calculates the sum of all values of field. Results in a SUM(field)
            </summary>
            <remarks>works on numeric fields (decimal/int/float/byte/etc.) only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.SumDistinct">
            <summary>
            Calculates the sum of all distinct values of field. Results in a SUM(DISTINCT field). 
            Access, MySql: not supported
            </summary>
            <remarks>works on numeric fields (decimal/int/float/byte/etc.) only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.StDev">
            <summary>
            Calculates statistical standard deviation. Results in:
            SqlServer: STDEV(field)<br/>
            Oracle, MySql: STDDEV(field)<br/>
            Access: STDEV(field)<br/>
            Firebird: not supported
            </summary>
            <remarks>Works on float fields only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.StDevDistinct">
            <summary>
            Calculates statistical standard deviation over distinct values. Results in:
            SqlServer: not supported<br/>
            Oracle: STDDEV(DISTINCT field)<br/>
            Access, Firebird, MySql: not supported<br/>
            </summary>
            <remarks>Works on float fields only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.Variance">
            <summary>
            Calculates statistical variance. Results in:
            SqlServer: VAR(field)<br/>
            Oracle, MySql: VARIANCE(field)<br/>
            Access: VAR(field)<br/>
            Firebird: not supported.
            </summary>
            <remarks>Works on float fields only</remarks>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction.VarianceDistinct">
            <summary>
            Calculates statistical variance over distinct values. Results in:
            SqlServer: not supported<br/>
            Oracle: VARIANCE(DISTINCT field)<br/>
            Access, Firebird, MySql: not supported<br/>
            </summary>
            <remarks>Works on float fields only</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElementType">
            <summary>
            Enum for defining the type of the expression element in an expression object
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElementType.Value">
            <summary>
            The element contains a value
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElementType.Field">
            <summary>
            The element contains a field
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElementType.Expression">
            <summary>
            The element contains an expression
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ExOp">
            <summary>
            Enum definition for the ExpressionOperators (ExOp). Name is shortened to limit typing.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.None">
            <summary>
            None specified. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.Add">
            <summary>
            Add arithmetic operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.Sub">
            <summary>
            Sub(tract) arithmetic operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.Mul">
            <summary>
            Mul(tiply) arithmetic operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.Div">
            <summary>
            Div(ision) arithmetic operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.Mod">
            <summary>
            Mod(ulo) arithmetic operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.Equal">
            <summary>
            Equal (==) logical operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.GreaterEqual">
            <summary>
            GreaterEqual (&gt;=) logical operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.GreaterThan">
            <summary>
            Greater (&gt;) logical operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.LessEqual">
            <summary>
            LessEqual (&lt;=) logical operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.LesserThan">
            <summary>
            Lesser (&lt;) logical operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.NotEqual">
            <summary>
            Not Equal (!=) logical operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.And">
            <summary>
            And logical operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.Or">
            <summary>
            Or logical operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.BitwiseAnd">
            <summary>
            Bitwise and (&amp;) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.BitwiseOr">
            <summary>
            Bitwise or (|) operator
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.ExOp.BitwiseXor">
            <summary>
            Bitwise exclusive or (Xor) (^) operator
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator">
            <summary>
            Operator to use with FieldFullTextSearchPredicate.
            SqlServer specific.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator.Contains">
            <summary>
            Produces a CONTAINS() statement
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator.Freetext">
            <summary>
            Produces a FREETEXT() statement
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.RdbmsHint">
            <summary>
            Enum definition for RDBMS hints, like table lock hints and other hints.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.RdbmsHint.TableInFromClauseHint">
            <summary>
            Hint for statements to apply to a table specification in a FROM clause. For example, in Sqlserver, if the setting is switched on, this hint
            will produce (NOLOCK) as a hint to use.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.RuntimeLibraryVersion">
            <summary>
            Constant holder for the version of this library. Because the library is signed, it has a general version, like 1.0.2003.2, but
            it also has an internal version, stored in this struct, which reflects the build date. Versions are always equal for the DQE's and the ORM
            support classes.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.RuntimeLibraryVersion.Version">
            <summary>
            Version reflects the general version of this library, for example 1.0.2003.2
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.RuntimeLibraryVersion.Build">
            <summary>
            Contains the build number of this version, which is build up like this: MMDDYYYY
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase">
            <summary>
            Base class for DAO classes which are generated.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IDao">
            <summary>
            Interface for Data Access Objects (DAO). Every IEntity implementation has one specific Dao object
            SelfServicing specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.FetchExisting(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Reads the data of an entity into the passed in EntityFields object and returns that object. Which data is read is determined using
            the passed in Primary Key field(s). If specified, it also processes the prefetch path.
            </summary>
            <param name="entityToFetch">The entity to fetch. Contained data will be overwritten.</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="contextToUse">The context to fetch the prefetch path with.</param>
            <exception cref="T:System.ArgumentNullException">When fieldsToFetch is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.DeleteExisting(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Deletes an entity from the persistent storage. Which entity is deleted is determined from the passed in EntityFields object.
            </summary>
            <param name="fields">The EntityField data to use for the deletion</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="deleteRestriction">Predicate expression, meant for concurrency checks in a delete query. Can be null.</param>
            <returns>true if the delete was succesful, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">When fields is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.ExecuteActionQuery(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Executes the passed in action query and, if not null, runs it inside the passed in transaction.
            </summary>
            <param name="queryToExecute">ActionQuery to execute.</param>
            <param name="containingTransaction">A containing transaction if caller is added to a transaction, or null of not.</param>
            <returns>execution result, which is the amount of rows affected (if applicable)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.ExecuteSingleRowRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields)">
            <summary>
            Executes the passed in retrieval query and, if not null, runs it inside the passed in transaction. Used to read 1 row.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="containingTransaction">A containing transaction if caller is added to a transaction, or null of not.</param>
            <param name="fieldsToFill">The IEntityFields object to store the fetched data in</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.ExecuteMultiRowRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IValidator,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields)">
            <summary>
            Executes the passed in retrieval query and, if not null, runs it inside the passed in transaction. Used to read 1 row.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="containingTransaction">A containing transaction if caller is added to a transaction, or null of not.</param>
            <param name="collectionToFill">Collection to fill with the retrieved rows.</param>
            <param name="allowDuplicates">Flag to signal if duplicates in the datastream should be loaded into the collection (true) or not (false)</param>
            <param name="validatorToUse">Validator object to use when creating a new entity. Can be null.</param>
            <param name="fieldsUsedForQuery">Fields used for producing the query</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDao.ExecuteScalarQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Executes the passed in query as a scalar query and returns the value returned from this scalar execution. 
            </summary>
            <param name="queryToExecute">a scalar query, which is a SELECT query which returns a single value</param>
            <param name="containingTransaction">A containing transaction if caller is added to a transaction, or null of not.</param>
            <returns>the scalar value returned from the query.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDao.TypeDefaultValueSupplier">
            <summary>
            Class which will supply the default value for a specified .NET type. Necessary for rowfetchers when a NULL field is found.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.ParameterisedPrefetchPathThreshold">
            <summary>
            The parameterised prefetch path threshold. This threshold is used to determine when the prefetch path logic should switch to a 
            subquery or when it should use a WHERE field IN (value1, value2, ... valueN) construct, based on the # of elements in the parent collection.
            If that # of elements exceeds this threshold, a subquery is constructed, otherwise field IN (value1, value2, ...) construct is used.
            The default value is 50. On average, this is faster than using a subquery which returns 50 elements. Use this to tune prefetch path fetch logic
            for your particular needs. 
            <br/><br/>
            This threshold is also used to determine if paging is possible. A page size bigger than this threshold will disable the paging functionality
            when using paging + prefetch paths. 
            </summary>
            <remarks>Testing showed that values larger than 300 will be slower than a subquery. This setting is a global setting, so will affect all
            database actions after setting it to a new value.
            <br/><br/>
            Special thanks to Marcus Mac Innes (http://www.styledesign.biz) for this optimization code. 
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.#ctor">
            <summary>
            CTor for TypedListDAO
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider,SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase,SD.LLBLGen.Pro.ORMSupportClasses.InheritanceHierarchyType,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory,SD.LLBLGen.Pro.ORMSupportClasses.ITypeDefaultValue)">
            <summary>
            CTor
            </summary>
            <param name="inheritanceInfoProviderToUse">Inheritance info provider to use.</param>
            <param name="dqeToUse">Dqe to use.</param>
            <param name="typeOfInheritance">Type of inheritance.</param>
            <param name="entityName">Name of the entity.</param>
            <param name="entityFactory">Entity factory.</param>
            <param name="typeDefaultvalueSupplier">Type defaultvalue supplier.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.FetchExisting(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Reads the data of an entity into the specified EntityFields object and returns that object. Which data is read is determined using
            the passed in Primary Key field(s). If specified, it also processes the prefetch path.
            </summary>
            <param name="entityToFetch">The entity to fetch. Contained data will be overwritten.</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="contextToUse">The context to fetch the prefetch path with.</param>
            <exception cref="T:System.ArgumentNullException">When fieldsToFetch is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.AddNew(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Adds the given fields to the database as a new entity. 
            </summary>
            <param name="fields">The EntityField data to use for the insert.</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <returns>true if the addition was succesful, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">When fields is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.UpdateExisting(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Updates an existing entity using the given fields. 
            </summary>
            <param name="fields">The EntityField data to use for the update</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <returns>true if the update was succesful, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">When fields is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.UpdateExisting(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Updates an existing entity using the given fields. 
            </summary>
            <param name="fields">The EntityField data to use for the update</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="updateRestriction">Predicate expression, meant for concurrency checks in an Update query</param>
            <returns>true if the update was succesful, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">When fields is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.PerformFetchEntityAction(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Reads the data of the entity passed in, and returns that object. Which data is read is determined using
            the set Primary Key field(s). If specified, it also processes the prefetch path.
            </summary>
            <param name="entityToFetch">The entity to fetch. Contained data will be overwritten.</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="selectFilter">Select filter.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="contextToUse">The context to fetch the prefetch path with.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.FetchExistingPolymorphic(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Performs the polymorphic entity fetch for the entity type of this DAO. It will produce an entity of that type or a subtype of that type, based
            on the values retrieved, or an empty entity if not found. The passed in PK filter, is a filter to be used to filter out the entity to fetch.
            </summary>
            <param name="containingTransaction">Containing transaction.</param>
            <param name="fields">Fields required for PK construction</param>
            <param name="contextToUse">Context to use for fetch</param>
            <returns>New entity with the data filtered by the passed in PK filter, or an empty entity if not found. Entity can be of type
            produced by the set entity factory (which produces entities of the type this DAO is for) or a subtype.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.DeleteExisting(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Deletes an entity from the persistent storage. Which entity is deleted is determined from the passed in EntityFields object.
            </summary>
            <param name="fields">The EntityField data to use for the deletion</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="deleteRestriction">Predicate expression, meant for concurrency checks in a delete query. Can be null.</param>
            <returns>true if the delete was succesful, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">When fields is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory,SD.LLBLGen.Pro.ORMSupportClasses.IValidator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,System.Int32)">
            <summary>
            Retrieves in the calling Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to 
            construct the total query.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="collectionToFill">Collection to fill with the entity objects retrieved</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="entityFactoryToUse">The EntityFactory to use when creating entity objects during a GetMulti() call.</param>
            <param name="validatorToUse">The Validator object to use when creating entity objects during a GetMulti() call.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory,SD.LLBLGen.Pro.ORMSupportClasses.IValidator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,System.Int32,System.Int32)">
            <summary>
            Retrieves in the calling Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to 
            construct the total query.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="collectionToFill">Collection to fill with the entity objects retrieved</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="entityFactoryToUse">The EntityFactory to use when creating entity objects during a GetMulti() call.</param>
            <param name="validatorToUse">The Validator object to use when creating entity objects during a GetMulti() call.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory,SD.LLBLGen.Pro.ORMSupportClasses.IValidator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath)">
            <summary>
            Retrieves in the calling entity collection object all entity objects
            which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to 
            construct the total query. It will also prefetch all related objects defined in the prefetchpath specified.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="collectionToFill">Collection to fill with the entity objects retrieved</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="entityFactoryToUse">The EntityFactory to use when creating entity objects during a GetMulti() call.</param>
            <param name="validatorToUse">The Validator object to use when creating entity objects during a GetMulti() call.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.PerformGetMultiAction(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IValidator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,System.Int32)">
            <summary>
            Retrieves in the passed in entity collection object all entity objects which match with the specified filter, 
            formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="collectionToFill">Collection to fill with the entity objects retrieved</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="validatorToUse">The Validator object to use when creating entity objects during a GetMulti() call.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.PerformGetMultiAction(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IValidator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath)">
            <summary>
            Retrieves in the calling entity collection object all entity objects
            which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to
            construct the total query. It will also prefetch all related objects defined in the prefetchpath specified.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="collectionToFill">Collection to fill with the entity objects retrieved</param>
            <param name="maxNumberOfItemsToReturn">The maximum number of items to return with this retrieval query.
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return.
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="validatorToUse">The Validator object to use when creating entity objects during a GetMulti() call.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.PerformGetMultiAsDataTableAction(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,System.Int32)">
            <summary>
            Retrieves entities of the type produced by the set entityfactory, in a datatable which match the specified filter. 
            It will always create a new connection to the database.
            </summary>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>a filled datatable if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.PerformGetMultiAsDataTableAction(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Data.DataTable,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,System.Int32,System.Int32)">
            <summary>
            Retrieves rows in the datatable provided which match the specified filter, containing the fields specified. 
            It will always create a new connection to the database.
            </summary>
            <param name="fieldsToReturn">IEntityFields implementation which forms the definition of the resultset to return.</param>
            <param name="tableToFill">The datatable to fill with the rows retrieved</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct to total query.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows or not</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is
            used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.DeleteMulti(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Deletes from the persistent storage all entities which match with the specified filter, formulated in
            the predicate or predicate expression definition, of the type and subtypes of the entity owning this DAO.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="deleteFilter">A predicate or predicate expression which should be used as filter for the entities to delete.</param>
            <returns>Number of entities affected, if the used persistent storage has rowcounting enabled.</returns>
            <remarks>Not supported for deleting entities which are part of a TargetPerEntity hierarchy</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.DeleteMulti(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Deletes from the persistent storage all 'Employee' entities which match with the specified filter, formulated in
            the predicate or predicate expression definition.
            </summary>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="deleteFilter">A predicate or predicate expression which should be used as filter for the entities to delete.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <returns>Number of entities affected, if the used persistent storage has rowcounting enabled.</returns>
            <remarks>Not supported for deleting entities which are part of a TargetPerEntity hierarchy</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.UpdateMulti(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Updates all entities of the same type or subtype of the entity <i>entityWithNewValues</i> directly in the persistent storage if they match the filter
            supplied in <i>filterBucket</i>. Only the fields changed in entityWithNewValues are updated for these fields. Entities of a subtype of the type
            of <i>entityWithNewValues</i> which are affected by the filterBucket's filter will thus also be updated. 
            </summary>
            <param name="entityWithNewValues">IEntity instance which holds the new values for the matching entities to update. Only
            changed fields are taken into account</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="updateFilter">A predicate or predicate expression which should be used as filter for the entities to update.</param>
            <returns>Number of entities affected, if the used persistent storage has rowcounting enabled. Use the returned value to determine if the
            update succeeded (value &gt; 0)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.UpdateMulti(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Updates all entities of the same type or subtype of the entity <i>entityWithNewValues</i> directly in the persistent storage if they match the filter
            supplied in <i>filterBucket</i>. Only the fields changed in entityWithNewValues are updated for these fields. Entities of a subtype of the type
            of <i>entityWithNewValues</i> which are affected by the filterBucket's filter will thus also be updated.
            </summary>
            <param name="entityWithNewValues">IEntity instance which holds the new values for the matching entities to update. Only
            changed fields are taken into account</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="updateFilter">A predicate or predicate expression which should be used as filter for the entities to update.</param>
            <param name="relations">Set of relations to walk to construct the total query</param>
            <returns>
            Number of entities affected, if the used persistent storage has rowcounting enabled. Use the returned value to determine if the
            update succeeded (value &gt; 0)
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Executes the expression defined with the field in the fields collection specified, using the various elements defined. The expression is executed as a
            scalar query and a single value is returned.
            </summary>
            <param name="fields">IEntityFields instance with a single field with an expression defined and eventually aggregates</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="filter">filter to use</param>
            <param name="relations">The relations to walk</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>the value which is the result of the expression defined on the specified field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean)">
            <summary>
            Executes the expression defined with the field in the fields collection specified, using the various elements defined. The expression is executed as a
            scalar query and a single value is returned.
            </summary>
            <param name="fields">IEntityFields instance with a single field with an expression defined and eventually aggregates</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="filter">filter to use</param>
            <param name="relations">The relations to walk</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="allowDuplicates">Allow duplicates in the resultset.</param>
            <returns>
            the value which is the result of the expression defined on the specified field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Gets the number of rows returned by a query for the fields specified, using the filter and groupby clause specified. 
            </summary>
            <param name="fields">IEntityFields instance with a single field with an expression defined and eventually aggregates</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="filter">filter to use</param>
            <param name="relations">The relations to walk</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>the number of rows in the set defined by the query elements passed in</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean)">
            <summary>
            Gets the number of rows returned by a query for the fields specified, using the filter and groupby clause specified.
            </summary>
            <param name="fields">IEntityFields instance with a single field with an expression defined and eventually aggregates</param>
            <param name="containingTransaction">A containing transaction, if caller is added to a transaction, or null if not.</param>
            <param name="filter">filter to use</param>
            <param name="relations">The relations to walk</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="allowDuplicates">Allow duplicates in the resultset.</param>
            <returns>the number of rows in the set defined by the query elements passed in</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.ExecuteActionQuery(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Executes the passed in action query and, if not null, runs it inside the passed in transaction.
            </summary>
            <param name="queryToExecute">ActionQuery to execute.</param>
            <param name="containingTransaction">A containing transaction if caller is added to a transaction, or null of not.</param>
            <returns>execution result, which is the amount of rows affected (if applicable)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.ExecuteSingleRowRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields)">
            <summary>
            Executes the passed in retrieval query and, if not null, runs it inside the passed in transaction. Used to read 1 row.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="containingTransaction">A containing transaction if caller is added to a transaction, or null of not.</param>
            <param name="fieldsToFill">The IEntityFields object to store the fetched data in</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.ExecuteMultiRowRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IValidator,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields)">
            <summary>
            Executes the passed in retrieval query and, if not null, runs it inside the passed in transaction. Used to read 1 row.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="containingTransaction">A containing transaction if caller is added to a transaction, or null of not.</param>
            <param name="collectionToFill">Collection to fill with the retrieved rows.</param>
            <param name="allowDuplicates">Flag to signal if duplicates in the datastream should be loaded into the collection (true) or not (false)</param>
            <param name="validatorToUse">Validator object to use when creating a new entity. Can be null.</param>
            <param name="fieldsUsedForQuery">Fields used for producing the query</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.ExecuteMultiRowDataTableRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,System.Data.Common.DbDataAdapter,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields)">
            <summary>
            Executes the passed in retrieval query and returns the results as a datatable using the passed in data-adapter. 
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="dataAdapterToUse">The dataadapter to use to fill the datatable.</param>
            <param name="fieldsToReturn">Fields persistence info objects for the fields used for the query. Required for type conversion on values.</param>
            <returns>DataTable with the rows requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.ExecuteMultiRowDataTableRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,System.Data.Common.DbDataAdapter,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields)">
            <summary>
            Executes the passed in retrieval query and returns the results in thedatatable specified using the passed in data-adapter. 
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="dataAdapterToUse">The dataadapter to use to fill the datatable.</param>
            <param name="tableToFill">DataTable to fill</param>
            <param name="fieldsToReturn">Fields persistence info objects for the fields used for the query. Required for type conversion on values.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.WireTransaction(SD.LLBLGen.Pro.ORMSupportClasses.IQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Wires the passed in transaction to the command object of the passed in query. If no transaction is passed in, nothing is wired.
            </summary>
            <param name="queryToWire">Query to wire up with the passed in transaction</param>
            <param name="activeTransaction">transaction to wire to the query</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.ExecuteScalarQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Executes the passed in query as a scalar query and returns the value returned from this scalar execution. 
            </summary>
            <param name="queryToExecute">a scalar query, which is a SELECT query which returns a single value</param>
            <param name="containingTransaction">A containing transaction if caller is added to a transaction, or null of not.</param>
            <returns>the scalar value returned from the query.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.PersistQueue(System.Collections.ArrayList,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Persists the queue passed in. The queue contains ActionQueueElements and is in the right order, just save it from front to back
            </summary>
            <param name="queueToPersist">Queue to persist.</param>
            <param name="insertActions">if true, the actions to perform are save actions, otherwise update actions</param>
            <param name="transactionToUse">Transaction to use.</param>
            <returns>bool if the actions all went ok.</returns>
            <remarks>It assumes a transaction, if needed, is already created and opened and passed in. All exceptions are bubbled upwards</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.DetermineConnectionToUse(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Determines the connection to use. If transaction to use is null, a new connection is created, otherwise the connection of the transaction is used.
            </summary>
            <param name="transactionToUse">Transaction to use.</param>
            <returns>a ready to use connection object.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.CreateDataAdapter">
            <summary>
            Creates a new ADO.NET data adapter.
            </summary>
            <returns>ready to use ADO.NET data-adapter</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.CheckForDuplicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.Collections.Hashtable@,System.Collections.Hashtable@)">
            <summary>
            Checks if the passed in entity is present in the hashtables passed in. If so
            </summary>
            <param name="entityToAdd">Entity which has to be tested if there was already a duplicate in the hashtables.</param>
            <param name="objectHashtable">See remarks</param>
            <param name="objectHashes">See remarks</param>
            <returns>true if there is no duplicate for hte passed in entity seen yet. False otherwise</returns>
            <remarks>construct hashtable for filtering out duplicates. Each hashtable entry is at first a section of
            empty cells. When a hashcode is found in the set of hashes, add an entry, if not existend to this
            hashtable. When the hashcode already is added to this hashtable, the entity of the new hashcode is
            compared to all the entities with the same hashcode in the list related to the hashcode in this table.
            when an equal object is found, it's a real duplicate, otherwise the entity is added to the list and the
            collection.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.FetchOneRow(System.Data.IDataReader,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields)">
            <summary>
            Fetches one row from the open data-reader and places that row into the passed in object rowDestination. rowDestination
            should match the format of the rows read by DataSource. Will only read the current row.
            </summary>
            <param name="dataSource">The open datareader used to fetch the data</param>
            <param name="rowDestination">The IEntityFields implementing object where the data should be stored.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.ReadRowIntoFields(System.Object[],SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Collections.Hashtable)">
            <summary>
            Fetches the values passed in into the rowDestination. 
            </summary>
            <param name="values">the values to read into rowDestination</param>
            <param name="rowDestination">The IEntityFields implementing object where the data should be stored.</param>
            <param name="fieldNameToOrdinal">hashtable with per fieldname the ordinal position in values.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.FetchParameterisedPrefetchPath(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Fetches the prefetch path using a parameterized range compare. This prefetch path fetch logic is used to produce fast prefetch path logic and also
            to be able to perform paging + prefetch path logic.
            </summary>
            <param name="rootEntities">Root entities.</param>
            <param name="maxNumberOfItemsToReturn">Max number of items to return.</param>
            <param name="prefetchPath">Prefetch path.</param>
            <param name="containingTransaction">The transaction the caller is in.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.FetchPrefetchPath(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            </summary>
            <param name="rootEntities">EntityCollection object containing one or more root objects which will contain the entities to fetch (and their paths)
            defined in the prefetch path.</param>
            <param name="filter">filter information used to retrieve the root entities.</param>
            <param name="relations">relations information used to retrieve the root entities</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return limit used to retrieve the root entities.</param>
            <param name="sortClauses">SortClause expression which was applied to the query executed to retrieve the root entities</param>
            <param name="prefetchPath">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="containingTransaction">The transaction the caller is in.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.MergeNormal(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,System.Boolean)">
            <summary>
            Merges the fetched entities in currentElement.RetrievalCollection with the root entities for normal relations (i.e. not m:n)
            </summary>
            <param name="rootEntities">Root entities.</param>
            <param name="currentElement">Current element.</param>
            <param name="rootEntitiesArePkSide">Root entities are pk side.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.MergeManyToMany(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Merges the entities fetched in currentElement.RetrievalCollection with the rootEntities for a many to many relation
            </summary>
            <param name="currentElement">Current element.</param>
            <param name="filter">Element filter.</param>
            <param name="relations">element filter relations</param>
            <param name="maxNumberOfItemsToReturn">Max number of items to return.</param>
            <param name="rootEntities">Root entities.</param>
            <param name="containingTransaction">the transaction we're in, if applicable.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.DetermineIfMerge(System.Collections.Hashtable,SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.Int64)">
            <summary>
            Determines if the counter for the entity passed in is lower than the maximum passed in and increases teh counter as well.
            </summary>
            <param name="maxCounters"></param>
            <param name="rootObject"></param>
            <param name="maxAmountOfItemsToReturn"></param>
            <returns>true if the counter is less than the maximum, which means that the merge can take place</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.FindPkObject(System.Collections.Hashtable,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Finds the pk object related to the FK object passed in via the relation specified.
            </summary>
            <param name="pkSideHashes">Pk side hashes hashtable to quickly find an entity based on the hash of the PK</param>
            <param name="fkHash">Fk hash value</param>
            <param name="fkObject">Fk object, to do a value compare</param>
            <param name="relation">the relation between pk and fk</param>
            <returns>the PK object related to the FK object, located in the pkSideHashes. if not found, null is returned.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.FindStartEntity(System.Collections.Hashtable,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.Data.DataRow)">
            <summary>
            Finds the start entity related to the end entity passed in via the relation specified.
            </summary>
            <param name="startEntityHashes">start entity hash to arraylist with startentity (root entities) matching this hash</param>
            <param name="startEntityHash">startentity hash value</param>
            <param name="relation">the relation between intermediate and start entity, required to retrieve the right values from the datarow</param>
            <param name="row">datarow with start-end PK fields, one relation per row.</param>
            <returns>the start entity object to find. if not found, null is returned.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.CreateHashes(System.Collections.Hashtable,SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase)">
            <summary>
            Creates the hashes for the collection passed in. 
            </summary>
            <param name="hashesToFill">Hashes to fill.</param>
            <param name="collectionToHash">Collection to hash.</param>
            <remarks>construct hashtable for looking up entities through their PK. Per hash value an arraylist is created with the entities
            with that hashvalue. Normally 1 entity per hashvalue is stored, but this can vary depending on the fact that the Hashvalue is 
            an int.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.CreateHashes(System.Collections.Hashtable,System.Collections.Hashtable,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates the hash code to datarow relations for both the start entity and the end entity. This is required because the hashvalues
            calculated from PK fields is sometimes not unique. We therefore have to store the values as well to do a value compare when required.
            the hash to datarow hashtable has per hashvalue an array list is stored with the datarows
            </summary>
            <param name="dataRowToStartEntityPkHash">datarow to startentity hash hashtable.</param>
            <param name="endEntityPkHashToDataRow">End entity pk hash to datarow hashtable</param>
            <param name="pkpkFields">Pkpkfields datatable</param>
            <param name="relations">Relations.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.CreateGetMultiFiltersRelations(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression@,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection@)">
            <summary>
            Creates the get multi filters / relations for various getmulti routines.
            </summary>
            <param name="selectFilter">Select filter.</param>
            <param name="relations">Relations.</param>
            <param name="filterToUse">Filter to use.</param>
            <param name="relationsToUse">Relations to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.CreatePrimaryKeyFilter(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields)">
            <summary>
            Creates a new predicate expression which filters on the primary key fields and the set values for the
            given primary key fields. If no primary key fields are specified, null is returned.
            </summary>
            <param name="fields">IEntityField collection with all the fields of the entity for which the filter has to be constructed</param>
            <returns>filled in predicate expression or null if no primary key fields are specified.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.CreatePrimaryKeyFilters(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields)">
            <summary>
            Creates for each entity which PK field(s) are in the passed in arraylist a new predicate expression which filters on the 
            primary key fields of that entity and the set values for the given primary key fields. If no primary key fields are specified, null is returned.
            </summary>
            <param name="fields">IEntityField collection with all the fields of the entity for which the filter has to be constructed</param>
            <returns>ArrayList with for each entity a filled in predicate expression or null if no primary key fields are specified. PK filters
            are stored in the same order as entities appear in the pkfields, which is the same order in which entities are located in the hierarchy
            (from root to leaf)</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.TypeDefaultValueSupplier">
            <summary>
            Class which will supply the default value for a specified .NET type. Necessary for rowfetchers when a NULL field is found.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DaoBase.EntityFactoryToUse">
            <summary>
            Gets / sets entityFactory to use
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase">
            <summary>
            Base class for DAA classes which are generated.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter">
            <summary>
            Interface for Data Access Adapter (DAA) objects. Instances of this interface are used as 'adapters' to work with databases. 
            Adapter specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.CreatePrimaryKeyFilter(System.Collections.ArrayList)">
            <summary>
            Creates a new predicate expression which filters on the primary key fields and the set values for the
            given primary key fields. If no primary key fields are specified, null is returned.
            </summary>
            <param name="primaryKeyFields">ArrayList with IEntityField2 instances which form the primary key for which the filter has to be constructed</param>
            <returns>filled in predicate expression or null if no primary key fields are specified.</returns>
            <remarks>Call this method passing IEntity2.Fields.PrimaryKeyFields</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.ExecuteActionQuery(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery)">
            <summary>
            Executes the passed in action query and, if not null, runs it inside the passed in transaction.
            </summary>
            <param name="queryToExecute">ActionQuery to execute.</param>
            <returns>execution result, which is the amount of rows affected (if applicable)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.ExecuteSingleRowRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Executes the passed in retrieval query and, if not null, runs it inside the passed in transaction. Used to read 1 row.
            It sets the connection object of the command object of query object passed in to the connection object of this class.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="fieldsToFill">The IEntityFields2 object to store the fetched data in</param>
            <param name="fieldsPersistenceInfo">The IFieldPersistenceInfo objects for the fieldsToFill fields</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.ExecuteMultiRowRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IValidator,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2)">
            <summary>
            Executes the passed in retrieval query and, if not null, runs it inside the passed in transaction. Used to read 1 or more rows.
            It sets the connection object of the command object of query object passed in to the connection object of this class.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="entityFactory">the factory object which can produce the entities this method has to fill.</param>
            <param name="collectionToFill">Collection to fill with the retrieved rows.</param>
            <param name="fieldsPersistenceInfo">The persistence information for the fields of the entity created by entityFactory</param>
            <param name="allowDuplicates">Flag to signal if duplicates in the datastream should be loaded into the collection (true) or not (false)</param>
            <param name="validatorToUse">Validator object to use when creating a new entity. Can be null.</param>
            <param name="fieldsUsedForQuery">Fields used for producing the query</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.ExecuteMultiRowDataTableRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,System.Data.Common.DbDataAdapter,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Executes the passed in retrieval query and returns the results as a datatable using the passed in data-adapter. 
            It sets the connection object of the command object of query object passed in to the connection object of this class.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="dataAdapterToUse">The dataadapter to use to fill the datatable.</param>
            <param name="fieldsPersistenceInfo">Fields persistence info objects for the fields used for the query. Required for type conversion on values.</param>
            <returns>DataTable with the rows requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.ExecuteMultiRowDataTableRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,System.Data.Common.DbDataAdapter,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Executes the passed in retrieval query and returns the results in thedatatable specified using the passed in data-adapter. 
            It sets the connection object of the command object of query object passed in to the connection object of this class.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="dataAdapterToUse">The dataadapter to use to fill the datatable.</param>
            <param name="tableToFill">DataTable to fill</param>
            <param name="fieldsPersistenceInfo">Fields persistence info objects for the fields used for the query. Required for type conversion on values.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.StartTransaction(System.Data.IsolationLevel,System.String)">
            <summary>
            Starts a new transaction. All database activity after this call will be ran in this transaction and all objects will participate
            in this transaction until its committed or rolled back. 
            If there is a transaction in progress, an exception is thrown.
            Will create and open a new connection if a transaction is not open and/or available.
            </summary>
            <param name="isolationLevelToUse">The isolation level to use for this transaction</param>
            <param name="name">The name for this transaction</param>
            <exception cref="T:System.InvalidOperationException">If a transaction is already in progress.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.SaveTransaction(System.String)">
            <summary>
            Creates a savepoint with the name savePointName in the current transaction. You can roll back to this savepoint using
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.Rollback(System.String)"/>.
            </summary>
            <param name="savePointName">name of savepoint. Must be unique in an active transaction</param>
            <exception cref="T:System.InvalidOperationException">If no transaction is in progress.</exception>
            <exception cref="T:System.ArgumentException">if savePointName is empty or null</exception>
            <exception cref="T:System.NotSupportedException">if the .NET database provider doesn't support transaction saving or when COM+ is used.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.Commit">
            <summary>
            Commits the transaction in action. It will end all database activity, since commiting a transaction is finalizing it. After
            calling Commit or Rollback, the ITransaction implementing class will reset itself.
            </summary>
            <remarks>Will close the active connection unless KeepConnectionOpen has been set to true</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.Rollback">
            <summary>
            Rolls back the transaction in action. It will end all database activity, since commiting a transaction is finalizing it. After
            calling Commit or Rollback, the ITransaction implementing class will reset itself. 
            </summary>
            <remarks>Will close the active connection unless KeepConnectionOpen has been set to true</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.Rollback(System.String)">
            <summary>
            Rolls back the transaction in action to the savepoint with the name savepointName. No internal objects are being reset when this method is called,
            so call this Rollback overload only to roll back to a savepoint. To roll back a complete transaction, call Rollback() without specifying a savepoint
            name. Create a savepoint by calling SaveTransaction(savePointName)
            </summary>
            <exception cref="T:System.InvalidOperationException">If no transaction is in progress.</exception>
            <exception cref="T:System.ArgumentException">if savePointName is empty or null</exception>
            <exception cref="T:System.NotSupportedException">if the .NET database provider doesn't support transaction rolling back a transaction to a named
            point or when COM+ is used.</exception>
            <param name="savePointName">name of the savepoint to roll back to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OpenConnection">
            <summary>
            Opens the active connection object. If the connection is already open, nothing is done.
            If no connection object is present, a new one is created
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.CloseConnection">
            <summary>
            Closes the active connection. If no connection is available or the connection is closed, nothing is done.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.SaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Saves the passed in entity to the persistent storage. Will <i>not</i> refetch the entity after this save.
            The entity will stay out-of-sync. If the entity is new, it will be inserted, if the entity is existent, the changed
            entity fields will be changed in the database. Will do a recursive save.
            </summary>
            <param name="entityToSave">The entity to save</param>
            <returns>true if the save was succesful, false otherwise.</returns>
            <remarks>Will use a current transaction if a transaction is in progress</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.SaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean)">
            <summary>
            Saves the passed in entity to the persistent storage. If the entity is new, it will be inserted, if the entity is existent, the changed
            entity fields will be changed in the database. Will do a recursive save.
            Will pass the concurrency predicate returned by GetConcurrencyPredicate(ConcurrencyPredicateType.Save) as update restriction.
            </summary>
            <param name="entityToSave">The entity to save</param>
            <param name="refetchAfterSave">When true, it will refetch the entity from the persistent storage so it will be up-to-date
            after the save action.</param>
            <returns>true if the save was succesful, false otherwise.</returns>
            <remarks>Will use a current transaction if a transaction is in progress</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.SaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Saves the passed in entity to the persistent storage. If the entity is new, it will be inserted, if the entity is existent, the changed
            entity fields will be changed in the database. Will do a recursive save.
            Will pass the concurrency predicate returned by GetConcurrencyPredicate(ConcurrencyPredicateType.Save) as update restriction.
            </summary>
            <param name="entityToSave">The entity to save</param>
            <param name="refetchAfterSave">When true, it will refetch the entity from the persistent storage so it will be up-to-date
            after the save action.</param>
            <param name="updateRestriction">Predicate expression, meant for concurrency checks in an Update query. Will be ignored when the entity is new.</param>
            <returns>true if the save was succesful, false otherwise.</returns>
            <remarks>Will use a current transaction if a transaction is in progress</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.SaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Boolean)">
            <summary>
            Saves the passed in entity to the persistent storage. If the entity is new, it will be inserted, if the entity is existent, the changed
            entity fields will be changed in the database.
            </summary>
            <param name="entityToSave">The entity to save</param>
            <param name="refetchAfterSave">When true, it will refetch the entity from the persistent storage so it will be up-to-date
            after the save action.</param>
            <param name="updateRestriction">Predicate expression, meant for concurrency checks in an Update query. Will be ignored when the entity is new.</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by entityToSave also.</param>
            <returns>true if the save was succesful, false otherwise.</returns>
            <remarks>Will use a current transaction if a transaction is in progress</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.SaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean,System.Boolean)">
            <summary>
            Saves the passed in entity to the persistent storage. If the entity is new, it will be inserted, if the entity is existent, the changed
            entity fields will be changed in the database. 
            Will pass the concurrency predicate returned by GetConcurrencyPredicate(ConcurrencyPredicateType.Save) as update restriction.
            </summary>
            <param name="entityToSave">The entity to save</param>
            <param name="refetchAfterSave">When true, it will refetch the entity from the persistent storage so it will be up-to-date
            after the save action.</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by entityToSave also.</param>
            <returns>true if the save was succesful, false otherwise.</returns>
            <remarks>Will use a current transaction if a transaction is in progress</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Fetches an entity from the persistent storage into the passed in Entity2 object using a primary key filter. The primary key fields of
            the entity passed in have to have the primary key values. (Example: CustomerID has to have a value, when you want to fetch a CustomerEntity
            from the persistent storage into the passed in object)
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored. The primary key fields have to have a value.</param>
            <remarks>Will use a current transaction if a transaction is in progress, so MVCC or other concurrency scheme used by the database can be
            utilized</remarks>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches an entity from the persistent storage into the passed in Entity2 object using a primary key filter. The primary key fields of
            the entity passed in have to have the primary key values. (Example: CustomerID has to have a value, when you want to fetch a CustomerEntity
            from the persistent storage into the passed in object)
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored. The primary key fields have to have a value.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <remarks>Will use a current transaction if a transaction is in progress, so MVCC or other concurrency scheme used by the database can be
            utilized</remarks>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches an entity from the persistent storage into the passed in Entity2 object using a primary key filter. The primary key fields of
            the entity passed in have to have the primary key values. (Example: CustomerID has to have a value, when you want to fetch a CustomerEntity
            from the persistent storage into the passed in object)
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored. The primary key fields have to have a value.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
            <remarks>Will use a current transaction if a transaction is in progress, so MVCC or other concurrency scheme used by the database can be
            utilized</remarks>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches an entity from the persistent storage into the passed in Entity2 object using a primary key filter. The primary key fields of
            the entity passed in have to have the primary key values. (Example: CustomerID has to have a value, when you want to fetch a CustomerEntity
            from the persistent storage into the passed in object)
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored. The primary key fields have to have a value.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <remarks>Will use a current transaction if a transaction is in progress, so MVCC or other concurrency scheme used by the database can be utilized</remarks>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityUsingUniqueConstraint(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Fetches an entity from the persistent storage into the object specified using the filter specified. 
            Use the entity's uniqueconstraint filter construction methods to construct the required uniqueConstraintFilter for the 
            unique constraint you want to use.
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored.</param>
            <param name="uniqueConstraintFilter">The filter which should filter on fields with a unique constraint.</param>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityUsingUniqueConstraint(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches an entity from the persistent storage into the object specified using the filter specified. 
            Use the entity's uniqueconstraint filter construction methods to construct the required uniqueConstraintFilter for the 
            unique constraint you want to use.
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored.</param>
            <param name="uniqueConstraintFilter">The filter which should filter on fields with a unique constraint.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityUsingUniqueConstraint(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches an entity from the persistent storage into the object specified using the filter specified. 
            Use the entity's uniqueconstraint filter construction methods to construct the required uniqueConstraintFilter for the 
            unique constraint you want to use.
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored.</param>
            <param name="uniqueConstraintFilter">The filter which should filter on fields with a unique constraint.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityUsingUniqueConstraint(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches an entity from the persistent storage into the object specified using the filter specified. 
            Use the entity's uniqueconstraint filter construction methods to construct the required uniqueConstraintFilter for the 
            unique constraint you want to use.
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored.</param>
            <param name="uniqueConstraintFilter">The filter which should filter on fields with a unique constraint.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            passed in entity factory. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="entityFactoryToUse">The factory which will be used to create a new entity object which will be fetched</param>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <returns>The new entity fetched.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            passed in entity factory. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="entityFactoryToUse">The factory which will be used to create a new entity object which will be fetched</param>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <returns>The new entity fetched.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            passed in entity factory. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="entityFactoryToUse">The factory which will be used to create a new entity object which will be fetched</param>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
            <returns>The new entity fetched, or a previous entity fetched if that entity was in the context specified</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            passed in entity factory. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="entityFactoryToUse">The factory which will be used to create a new entity object which will be fetched</param>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <returns>The new entity fetched, or a previous entity fetched if that entity was in the context specified</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.DeleteEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Deletes the specified entity from the persistent storage. The entity is not usable after this call, the state is set to
            OutOfSync.
            Will use the current transaction if a transaction is in progress.
            </summary>
            <param name="entityToDelete">The entity instance to delete from the persistent storage</param>
            <returns>true if the delete was succesful, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.DeleteEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Deletes the specified entity from the persistent storage. The entity is not usable after this call, the state is set to
            OutOfSync.
            Will use the current transaction if a transaction is in progress.
            </summary>
            <param name="entityToDelete">The entity instance to delete from the persistent storage</param>
            <param name="deleteRestriction">Predicate expression, meant for concurrency checks in a delete query</param>
            <returns>true if the delete was succesful, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            This overload returns all found entities and doesn't apply sorting
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            This overload returns all found entities and doesn't apply sorting
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            This overload doesn't apply sorting
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <exception cref="T:System.ArgumentException">If the passed in collectionToFill doesn't contain an entity factory.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <exception cref="T:System.ArgumentException">If the passed in collectionToFill doesn't contain an entity factory.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Int32,System.Int32)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to a value smaller than 2, no paging logic is applied</param>
            <exception cref="T:System.ArgumentException">If the passed in collectionToFill doesn't contain an entity factory.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,System.Int32,System.Int32)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            It will apply paging and it will from there use a prefetch path fetch using the read page. It's important that pageSize
            is smaller than the set ParameterisedPrefetchPathThreshold. It will work, though if pagesize is larger than the limits set for
            the ParameterisedPrefetchPathThreshold value, the query is likely to be slower than expected.
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="prefetchPath">Prefetch path to use.</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to a value smaller than 2, no paging logic is applied</param>
            <exception cref="T:System.ArgumentException">If the passed in collectionToFill doesn't contain an entity factory.</exception>
            <remarks>
            Special thanks to Marcus Mac Innes (http://www.styledesign.biz) for this optimization code.
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.SaveEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Saves all dirty objects inside the collection passed to the persistent storage. It will do this inside a transaction if a transaction
            is not yet available. Will not refetch saved entities and will not recursively save the entities.
            </summary>
            <param name="collectionToSave">EntityCollection with one or more dirty entities which have to be persisted</param>
            <returns>the amount of persisted entities</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.SaveEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,System.Boolean,System.Boolean)">
            <summary>
            Saves all dirty objects inside the collection passed to the persistent storage. It will do this inside a transaction if a transaction
            is not yet available.
            </summary>
            <param name="collectionToSave">EntityCollection with one or more dirty entities which have to be persisted</param>
            <param name="refetchSavedEntitiesAfterSave">Refetches a saved entity from the database, so the entity will not be 'out of sync'</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by the entities inside collectionToSave also.</param>
            <returns>the amount of persisted entities</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.DeleteEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Deletes all dirty objects inside the collection passed from the persistent storage. It will do this inside a transaction if a transaction
            is not yet available. Entities which are physically deleted from the persistent storage are marked with the state 'Deleted' but are not
            removed from the collection.
            If the passed in entity has a concurrency predicate factory object, the returned predicate expression is used to restrict the delete process.		
            </summary>
            <param name="collectionToDelete">EntityCollection with one or more dirty entities which have to be persisted</param>
            <returns>the amount of physically deleted entities</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.DeleteEntitiesDirectly(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Deletes all entities of the name passed in as <i>entityName</i> (e.g. "CustomerEntity") from the persistent storage if they match the filter
            supplied in <i>filterBucket</i>.
            </summary>
            <param name="entityName">The name of the entity to retrieve persistence information. For example "CustomerEntity". This name can be
            retrieved from an existing entity's Name property.</param>
            <param name="filterBucket">filter information to filter out the entities to delete</param>
            <returns>the amount of physically deleted entities</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.UpdateEntitiesDirectly(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Updates all entities of the same type of the entity <i>entityWithNewValues</i> directly in the persistent storage if they match the filter
            supplied in <i>filterBucket</i>. Only the fields changed in entityWithNewValues are updated for these fields. 
            </summary>
            <param name="entityWithNewValues">Entity object which contains the new values for the entities of the same type and which match the filter
            in filterBucket. Only fields which are changed are updated.</param>
            <param name="filterBucket">filter information to filter out the entities to update.</param>
            <returns>the amount of physically updated entities</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. Doesn't apply any sorting, doesn't limit
            the resultset on the amount of rows to return, does allow duplicates.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Boolean)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. Doesn't apply any sorting, doesn't limit
            the resultset on the amount of rows to return.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,System.Boolean)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. Doesn't apply any sorting.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. 
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset. Use the typed list's method GetFieldsInfo() to retrieve
            this IEntityField2 information</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. 
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset. Use the typed list's method GetFieldsInfo() to retrieve
            this IEntityField2 information</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. 
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset. Use the typed list's method GetFieldsInfo() to retrieve
            this IEntityField2 information</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to a value smaller than 2, no paging logic is applied</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            the passed in typed list.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="typedListToFill">Typed list to fill.</param>
            <remarks>Grabs the fields list and relations set from the typed list passed in. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            the passed in typed list.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="typedListToFill">Typed list to fill.</param>
            <param name="additionalFilter">An additional filter to use to filter the fetch of the typed list. If you need a more sophisticated
            filter approach, please use the overload which accepts an IRelationalPredicateBucket and add your filter to the bucket you receive
            when calling typedListToFill.GetRelationInfo().</param>
            <remarks>Grabs the fields list and relations set from the typed list passed in. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            the passed in typed list.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="typedListToFill">Typed list to fill.</param>
            <param name="additionalFilter">An additional filter to use to filter the fetch of the typed list. If you need a more sophisticated
            filter approach, please use the overload which accepts an IRelationalPredicateBucket and add your filter to the bucket you receive
            when calling typedListToFill.GetRelationInfo().</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <remarks>Grabs the fields list and relations set from the typed list passed in. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            the passed in typed list.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="typedListToFill">Typed list to fill.</param>
            <param name="additionalFilter">An additional filter to use to filter the fetch of the typed list. If you need a more sophisticated
            filter approach, please use the overload which accepts an IRelationalPredicateBucket and add your filter to the bucket you receive
            when calling typedListToFill.GetRelationInfo().</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to a value smaller than 2, no paging logic is applied</param>
            <remarks>Grabs the fields list and relations set from the typed list passed in. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage into the DataTable object passed in. Doesn't apply any sorting, doesn't limit the amount of rows returned by the query, doesn't
            apply any filtering, allows duplicate rows.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Boolean)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage using the filter information stored in
            filterBucket into the DataTable object passed in. Doesn't apply any sorting, doesn't limit the amount of rows returned by the query.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage using the filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.
            Use the Typed View's method GetFieldsInfo() to get this IEntityField2 field collection</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <remarks>To fill a DataTable with entity rows, use this method as well, by passing the Fields collection of an entity of the same type
            as the one you want to fetch as fieldCollectionToFetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage using the filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.
            Use the Typed View's method GetFieldsInfo() to get this IEntityField2 field collection</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on</param>
            <remarks>To fill a DataTable with entity rows, use this method as well, by passing the Fields collection of an entity of the same type
            as the one you want to fetch as fieldCollectionToFetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage using the filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.
            Use the Typed View's method GetFieldsInfo() to get this IEntityField2 field collection</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to a value smaller than 2, no paging logic is applied</param>
            <remarks>To fill a DataTable with entity rows, use this method as well, by passing the Fields collection of an entity of the same type
            as the one you want to fetch as fieldCollectionToFetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,System.Boolean)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage using the filter information stored in
            filterBucket into the DataTable object passed in. Doesn't apply any sorting
            Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,System.Boolean)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage into the DataTable object passed in. Doesn't apply any sorting, doesn't limit the amount of rows returned by the query, doesn't
            apply any filtering.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2)">
            <summary>
            Fetches the Typed View passed in from the persistent storage
            Doesn't apply any sorting, doesn't limit the amount of rows returned by the query, doesn't apply any filtering, allows duplicate rows.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Boolean)">
            <summary>
            Fetches the Typed View passed in from the persistent storage 
            Doesn't apply any sorting, doesn't limit the amount of rows returned by the query.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Fetches the Typed View passed in from the persistent storage 
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <remarks>To fill a DataTable with entity rows, use this method as well, by passing the Fields collection of an entity of the same type
            as the one you want to fetch as fieldCollectionToFetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Fetches the Typed View passed in from the persistent storage 
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on</param>
            <remarks>To fill a DataTable with entity rows, use this method as well, by passing the Fields collection of an entity of the same type
            as the one you want to fetch as fieldCollectionToFetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,System.Boolean)">
            <summary>
            Fetches the Typed View passed in from the persistent storage 
            Doesn't apply any sorting. Use this routine to fill a TypedView object.
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,System.Boolean)">
            <summary>
            Fetches the Typed View passed in from the persistent storage 
            Doesn't apply any sorting, doesn't limit the amount of rows returned by the query, doesn't apply any filtering.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnBeforeTransactionCommit">
            <summary>
            Called right before the Commit() method starts its logic.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnAfterTransactionCommit">
            <summary>
            Called right after the Commit() method has performed its logic and the commit was succesful.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnBeforeTransactionRollback">
            <summary>
            Called right before the Rollback() method starts its logic.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnAfterTransactionRollback">
            <summary>
            Called right after the Rollback() method has performed its logic and the rollback was succesful.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnSaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Called right before the actual Save action is executed.
            </summary>
            <param name="saveQuery">the ActionQuery object which will be executed</param>
            <param name="entityToSave">the entity which will be saved by saveQuery</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnSaveEntityComplete(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Called right after the actual Save action was executed.
            </summary>
            <param name="saveQuery">the ActionQuery object which will be executed</param>
            <param name="entityToSave">the entity which is saved by saveQuery</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnSaveEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Called at the start of the SaveEntityCollection() method
            </summary>
            <param name="entityCollectionToSave">the entity collection to save</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnSaveEntityCollectionComplete(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Called at the end of the SaveEntityCollection() method
            </summary>
            <param name="entityCollectionToSave">the entity collection which was saved</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnDeleteEntity(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Called right before the actual delete action is executed
            </summary>
            <param name="deleteQuery">the ActionQuery object which will be executed</param>
            <param name="entityToDelete">the entity which will be deleted by deleteQuery</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnDeleteEntityComplete(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Called right before the actual delete action is executed
            </summary>
            <param name="deleteQuery">the ActionQuery object which will be executed</param>
            <param name="entityToDelete">the entity which was deleted by deleteQuery</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnDeleteEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Called at the start of the DeleteEntityCollection method
            </summary>
            <param name="entityCollectionToDelete">the entity collection to delete</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnDeleteEntitiesDirectly(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery)">
            <summary>
            Called right before the actual delete query is executed
            </summary>
            <param name="deleteQuery">The ActionQuery to execute</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnDeleteEntitiesDirectlyComplete(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery)">
            <summary>
            Called right after the actual delete query is executed
            </summary>
            <param name="deleteQuery">The ActionQuery to execute</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnDeleteEntityCollectionComplete(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Called at the end of the DeleteEntityCollection method
            </summary>
            <param name="entityCollectionToDelete">the entity collection which was delete</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnFetchEntity(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2)">
            <summary>
            Called right before the actual fetch is executed.
            </summary>
            <param name="selectQuery">the RetrievalQuery which will be executed</param>
            <param name="fieldsToFetch">the IEntityFields2 object which will be filled by selectQuery</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnFetchEntityComplete(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2)">
            <summary>
            Called right after the actual fetch is executed.
            </summary>
            <param name="selectQuery">the RetrievalQuery which was executed</param>
            <param name="fieldsToFetch">the IEntityFields2 object which was filled by selectQuery</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnFetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Called right before the actual fetch is executed
            </summary>
            <param name="selectQuery">the RetrievalQuery which will be executed</param>
            <param name="entityCollectionToFetch">the entity collection to fill</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnFetchEntityCollectionComplete(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Called right after the actual fetch is executed
            </summary>
            <param name="selectQuery">the RetrievalQuery which was executed</param>
            <param name="entityCollectionToFetch">the entity collection which was filled</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnFetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable)">
            <summary>
            Called right before the actual fetch is executed
            </summary>
            <param name="selectQuery">the RetrievalQuery object to execute</param>
            <param name="fieldCollectionToFetch">the fieldslist used to construct the query</param>
            <param name="dataTableToFill">the datatable object to fill</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnFetchTypedListComplete(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable)">
            <summary>
            Called right after the actual fetch is executed
            </summary>
            <param name="selectQuery">the RetrievalQuery object which was executed</param>
            <param name="fieldCollectionToFetch">the fieldslist used to construct the query</param>
            <param name="dataTableToFill">the datatable object which was filled</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnFetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable)">
            <summary>
            Called right before the actual fetch is executed
            </summary>
            <param name="selectQuery">the RetrievalQuery object to execute</param>
            <param name="fieldCollectionToFetch">the fieldslist used to construct the query</param>
            <param name="dataTableToFill">the datatable object to fill</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnFetchTypedViewComplete(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable)">
            <summary>
            Called right after the actual fetch is executed
            </summary>
            <param name="selectQuery">the RetrievalQuery object which was executed</param>
            <param name="fieldCollectionToFetch">the fieldslist used to construct the query</param>
            <param name="dataTableToFill">the datatable object which was filled</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnGetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery)">
            <summary>
            Called right before the actual scalar query is executed
            </summary>
            <param name="scalarQuery">RetrievalQuery object which will be executed</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnUpdateEntitiesDirectly(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery)">
            <summary>
            Called right before the actual update query is executed
            </summary>
            <param name="updateQuery">The ActionQuery to execute</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.OnUpdateEntitiesDirectlyComplete(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery)">
            <summary>
            Called right after the actual update query is executed
            </summary>
            <param name="updateQuery">The ActionQuery to execute</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Gets a scalar value, calculated with the aggregate and expression specified. the field specified is the field the expression and aggregate are
            applied on.
            </summary>
            <param name="field">Field to which to apply the aggregate function and expression</param>
            <param name="aggregateToApply">Aggregate function to apply. </param>
            <returns>the scalar value requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Gets a scalar value, calculated with the aggregate and expression specified. the field specified is the field the expression and aggregate are
            applied on.
            </summary>
            <param name="field">Field to which to apply the aggregate function and expression</param>
            <param name="expressionToExecute">The expression to execute. Can be null</param>
            <param name="aggregateToApply">Aggregate function to apply. </param>
            <returns>the scalar value requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Gets a scalar value, calculated with the aggregate and expression specified. the field specified is the field the expression and aggregate are
            applied on.
            </summary>
            <param name="field">Field to which to apply the aggregate function and expression</param>
            <param name="expressionToExecute">The expression to execute. Can be null</param>
            <param name="aggregateToApply">Aggregate function to apply. </param>
            <param name="filter">The filter to apply to retrieve the scalar</param>
            <returns>the scalar value requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Gets a scalar value, calculated with the aggregate and expression specified. the field specified is the field the expression and aggregate are
            applied on.
            </summary>
            <param name="field">Field to which to apply the aggregate function and expression</param>
            <param name="expressionToExecute">The expression to execute. Can be null</param>
            <param name="aggregateToApply">Aggregate function to apply. </param>
            <param name="filter">The filter to apply to retrieve the scalar</param>
            <param name="groupByClause">The groupby clause to apply to retrieve the scalar</param>
            <returns>the scalar value requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Gets a scalar value, calculated with the aggregate and expression specified. the field specified is the field the expression and aggregate are
            applied on.
            </summary>
            <param name="field">Field to which to apply the aggregate function and expression</param>
            <param name="expressionToExecute">The expression to execute. Can be null</param>
            <param name="aggregateToApply">Aggregate function to apply. </param>
            <param name="filter">The filter to apply to retrieve the scalar</param>
            <param name="groupByClause">The groupby clause to apply to retrieve the scalar</param>
            <param name="relations">The relations part of the filter.</param>
            <returns>the scalar value requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Executes the expression defined with the field in the fields collection specified, using the various elements defined. The expression is executed as a
            scalar query and a single value is returned.
            </summary>
            <param name="fields">IEntityFields2 instance with a single field with an expression defined and eventually aggregates</param>
            <param name="filter">filter to use</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>the value which is the result of the expression defined on the specified field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Executes the expression defined with the field in the fields collection specified, using the various elements defined. The expression is executed as a
            scalar query and a single value is returned.
            </summary>
            <param name="fields">IEntityFields2 instance with a single field with an expression defined and eventually aggregates</param>
            <param name="filter">filter to use</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="relations">The relations part of the filter.</param>
            <returns>the value which is the result of the expression defined on the specified field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Gets the estimated number of objects returned by a query for objects to store in the entity collection passed in, using the filter and 
            groupby clause specified. The number is estimated as duplicate objects can be present in the raw query results, but will be filtered out
            when the query result is transformed into objects.
            </summary>
            <param name="collection">EntityCollection instance which will be fetched by the query to get the rowcount for</param>
            <param name="filter">filter to use by the query to get the rowcount for</param>
            <returns>the number of rows the query for the fields specified, using the filter, relations and groupbyClause specified.</returns>
            <remarks>This method performs a SELECT COUNT(*) FROM (actual query) and executes that as a scalar query. This construct is not supported on
            Firebird. You can try to achieve the same results by using GetScalar and AggregateFunction.CountRow, though those results can differ from
            the result returned by GetDbCount if you use a group by clause. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Gets the estimated number of objects returned by a query for objects to store in the entity collection passed in, using the filter and 
            groupby clause specified. The number is estimated as duplicate objects can be present in the raw query results, but will be filtered out
            when the query result is transformed into objects.
            </summary>
            <param name="collection">EntityCollection instance which will be fetched by the query to get the rowcount for</param>
            <param name="filter">filter to use by the query to get the rowcount for</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>the number of rows the query for the fields specified, using the filter, relations and groupbyClause specified.</returns>
            <remarks>This method performs a SELECT COUNT(*) FROM (actual query) and executes that as a scalar query. This construct is not supported on
            Firebird. You can try to achieve the same results by using GetScalar and AggregateFunction.CountRow, though those results can differ from
            the result returned by GetDbCount if you use a group by clause. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Gets the number of rows returned by a query for the fields specified, using the filter and groupby clause specified. 
            </summary>
            <param name="fields">IEntityFields2 instance with the fields returned by the query to get the rowcount for</param>
            <param name="filter">filter to use by the query to get the rowcount for</param>
            <returns>the number of rows the query for the fields specified, using the filter, relations and groupbyClause specified.</returns>
            <remarks>This method performs a SELECT COUNT(*) FROM (actual query) and executes that as a scalar query. This construct is not supported on
            Firebird. You can try to achieve the same results by using GetScalar and AggregateFunction.CountRow, though those results can differ from
            the result returned by GetDbCount if you use a group by clause. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Gets the number of rows returned by a query for the fields specified, using the filter and groupby clause specified. 
            </summary>
            <param name="fields">IEntityFields2 instance with the fields returned by the query to get the rowcount for</param>
            <param name="filter">filter to use by the query to get the rowcount for</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>the number of rows the query for the fields specified, using the filter, relations and groupbyClause specified.</returns>
            <remarks>This method performs a SELECT COUNT(*) FROM (actual query) and executes that as a scalar query. This construct is not supported on
            Firebird. You can try to achieve the same results by using GetScalar and AggregateFunction.CountRow, though those results can differ from
            the result returned by GetDbCount if you use a group by clause. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean)">
            <summary>
            Gets the number of rows returned by a query for the fields specified, using the filter and groupby clause specified. 
            </summary>
            <param name="fields">IEntityFields2 instance with the fields returned by the query to get the rowcount for</param>
            <param name="filter">filter to use by the query to get the rowcount for</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <returns>the number of rows the query for the fields specified, using the filter, relations and groupbyClause specified.</returns>
            <remarks>This method performs a SELECT COUNT(*) FROM (actual query) and executes that as a scalar query. This construct is not supported on
            Firebird. You can try to achieve the same results by using GetScalar and AggregateFunction.CountRow, though those results can differ from
            the result returned by GetDbCount if you use a group by clause. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.ExecuteScalarQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery)">
            <summary>
            Executes the passed in query as a scalar query and returns the value returned from this scalar execution. 
            </summary>
            <param name="queryToExecute">a scalar query, which is a SELECT query which returns a single value</param>
            <returns>the scalar value returned from the query.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.TypeDefaultValueSupplier">
            <summary>
            Class which will supply the default value for a specified .NET type. Necessary for rowfetchers when a NULL field is found.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.IsTransactionInProgress">
            <summary>
            Gets IsTransactionInProgress. True when there is a transaction in progress.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.TransactionIsolationLevel">
            <summary>
            Gets / sets the isolation level a transaction should use. 
            Setting this during a transaction in progress has no effect on the current running transaction.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.TransactionName">
            <summary>
            Gets the name of the transaction. Setting this during a transaction in progress has no effect on the current running transaction.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.ConnectionString">
            <summary>
            Gets / sets the connection string to use for the connection with the database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.KeepConnectionOpen">
            <summary>
            Gets / sets KeepConnectionOpen, a flag used to keep open connections after a database action has finished.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.CommandTimeOut">
            <summary>
            Gets / sets the timeout value to use with the command object(s) created by the adapter.
            Default is 30 seconds
            Set this prior to calling a method which executes database logic.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter.InComPlusTransaction">
            <summary>
            Returns true if this DataAccessAdapter is hosted inside an IComPlusAdapterContext implementing object.
            This means that all transactions by this DataAccessAdapter object are routed through COM+ and not controlled by ADO.NET.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IComPlusAdapterContext)">
            <summary>
            CTor
            </summary>
            <param name="comPlusContextHost">the COM+ context host for this adapter instance.</param>
            <remarks>do not call this from your code</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Gets a scalar value, calculated with the aggregate and expression specified. the field specified is the field the expression and aggregate are
            applied on.
            </summary>
            <param name="field">Field to which to apply the aggregate function and expression</param>
            <param name="aggregateToApply">Aggregate function to apply. </param>
            <returns>the scalar value requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Gets a scalar value, calculated with the aggregate and expression specified. the field specified is the field the expression and aggregate are
            applied on.
            </summary>
            <param name="field">Field to which to apply the aggregate function and expression</param>
            <param name="expressionToExecute">The expression to execute. Can be null</param>
            <param name="aggregateToApply">Aggregate function to apply. </param>
            <returns>the scalar value requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Gets a scalar value, calculated with the aggregate and expression specified. the field specified is the field the expression and aggregate are
            applied on.
            </summary>
            <param name="field">Field to which to apply the aggregate function and expression</param>
            <param name="expressionToExecute">The expression to execute. Can be null</param>
            <param name="aggregateToApply">Aggregate function to apply. </param>
            <param name="filter">The filter to apply to retrieve the scalar</param>
            <returns>the scalar value requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Gets a scalar value, calculated with the aggregate and expression specified. the field specified is the field the expression and aggregate are
            applied on.
            </summary>
            <param name="field">Field to which to apply the aggregate function and expression</param>
            <param name="expressionToExecute">The expression to execute. Can be null</param>
            <param name="aggregateToApply">Aggregate function to apply. </param>
            <param name="filter">The filter to apply to retrieve the scalar</param>
            <param name="groupByClause">The groupby clause to apply to retrieve the scalar</param>
            <returns>the scalar value requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Gets a scalar value, calculated with the aggregate and expression specified. the field specified is the field the expression and aggregate are
            applied on.
            </summary>
            <param name="field">Field to which to apply the aggregate function and expression</param>
            <param name="expressionToExecute">The expression to execute. Can be null</param>
            <param name="aggregateToApply">Aggregate function to apply. </param>
            <param name="filter">The filter to apply to retrieve the scalar</param>
            <param name="groupByClause">The groupby clause to apply to retrieve the scalar</param>
            <param name="relations">The relations part of the filter.</param>
            <returns>the scalar value requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Executes the expression defined with the field in the fields collection specified, using the various elements defined. The expression is executed as a
            scalar query and a single value is returned.
            </summary>
            <param name="fields">IEntityFields2 instance with a single field with an expression defined and eventually aggregates</param>
            <param name="filter">filter to use</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>the value which is the result of the expression defined on the specified field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Executes the expression defined with the field in the fields collection specified, using the various elements defined. The expression is executed as a
            scalar query and a single value is returned.
            </summary>
            <param name="fields">IEntityFields2 instance with a single field with an expression defined and eventually aggregates</param>
            <param name="filter">filter to use</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="relations">The relations part of the filter.</param>
            <returns>the value which is the result of the expression defined on the specified field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Gets the estimated number of objects returned by a query for objects to store in the entity collection passed in, using the filter and 
            groupby clause specified. The number is estimated as duplicate objects can be present in the raw query results, but will be filtered out
            when the query result is transformed into objects.
            </summary>
            <param name="collection">EntityCollection instance which will be fetched by the query to get the rowcount for</param>
            <param name="filter">filter to use by the query to get the rowcount for</param>
            <returns>the number of rows the query for the fields specified, using the filter, relations and groupbyClause specified.</returns>
            <remarks>This method performs a SELECT COUNT(*) FROM (actual query) and executes that as a scalar query. This construct is not supported on
            Firebird. You can try to achieve the same results by using GetScalar and AggregateFunction.CountRow, though those results can differ from
            the result returned by GetDbCount if you use a group by clause. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Gets the estimated number of objects returned by a query for objects to store in the entity collection passed in, using the filter and 
            groupby clause specified. The number is estimated as duplicate objects can be present in the raw query results, but will be filtered out
            when the query result is transformed into objects.
            </summary>
            <param name="collection">EntityCollection instance which will be fetched by the query to get the rowcount for</param>
            <param name="filter">filter to use by the query to get the rowcount for</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>the number of rows the query for the fields specified, using the filter, relations and groupbyClause specified.</returns>
            <remarks>This method performs a SELECT COUNT(*) FROM (actual query) and executes that as a scalar query. This construct is not supported on
            Firebird. You can try to achieve the same results by using GetScalar and AggregateFunction.CountRow, though those results can differ from
            the result returned by GetDbCount if you use a group by clause. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Gets the number of rows returned by a query for the fields specified, using the filter and groupby clause specified. 
            </summary>
            <param name="fields">IEntityFields2 instance with the fields returned by the query to get the rowcount for</param>
            <param name="filter">filter to use by the query to get the rowcount for</param>
            <returns>the number of rows the query for the fields specified, using the filter, relations and groupbyClause specified.</returns>
            <remarks>This method performs a SELECT COUNT(*) FROM (actual query) and executes that as a scalar query. This construct is not supported on
            Firebird. You can try to achieve the same results by using GetScalar and AggregateFunction.CountRow, though those results can differ from
            the result returned by GetDbCount if you use a group by clause. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Gets the number of rows returned by a query for the fields specified, using the filter and groupby clause specified. 
            </summary>
            <param name="fields">IEntityFields2 instance with the fields returned by the query to get the rowcount for</param>
            <param name="filter">filter to use by the query to get the rowcount for</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>the number of rows the query for the fields specified, using the filter, relations and groupbyClause specified.</returns>
            <remarks>This method performs a SELECT COUNT(*) FROM (actual query) and executes that as a scalar query. This construct is not supported on
            Firebird. You can try to achieve the same results by using GetScalar and AggregateFunction.CountRow, though those results can differ from
            the result returned by GetDbCount if you use a group by clause. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean)">
            <summary>
            Gets the number of rows returned by a query for the fields specified, using the filter and groupby clause specified. 
            </summary>
            <param name="fields">IEntityFields2 instance with the fields returned by the query to get the rowcount for</param>
            <param name="filter">filter to use by the query to get the rowcount for</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <returns>the number of rows the query for the fields specified, using the filter, relations and groupbyClause specified.</returns>
            <remarks>This method performs a SELECT COUNT(*) FROM (actual query) and executes that as a scalar query. This construct is not supported on
            Firebird. You can try to achieve the same results by using GetScalar and AggregateFunction.CountRow, though those results can differ from
            the result returned by GetDbCount if you use a group by clause. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ExecuteScalarQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery)">
            <summary>
            Executes the passed in query as a scalar query and returns the value returned from this scalar execution. 
            </summary>
            <param name="queryToExecute">a scalar query, which is a SELECT query which returns a single value</param>
            <returns>the scalar value returned from the query.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ExecuteActionQuery(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery)">
            <summary>
            Executes the passed in action query and, if not null, runs it inside the passed in transaction.
            </summary>
            <param name="queryToExecute">ActionQuery to execute.</param>
            <returns>execution result, which is the amount of rows affected (if applicable)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ExecuteSingleRowRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Executes the passed in retrieval query and, if not null, runs it inside the passed in transaction. Used to read 1 row.
            It sets the connection object of the command object of query object passed in to the connection object of this class.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="fieldsToFill">The IEntityFields2 object to store the fetched data in</param>
            <param name="fieldsPersistenceInfo">The IFieldPersistenceInfo objects for the fieldsToFill fields</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ExecuteMultiRowRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IValidator,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2)">
            <summary>
            Executes the passed in retrieval query and, if not null, runs it inside the passed in transaction. Used to read 1 or more rows.
            It sets the connection object of the command object of query object passed in to the connection object of this class.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="entityFactory">the factory object which can produce the entities this method has to fill.</param>
            <param name="collectionToFill">Collection to fill with the retrieved rows.</param>
            <param name="fieldsPersistenceInfo">The persistence information for the fields of the entity created by entityFactory</param>
            <param name="allowDuplicates">Flag to signal if duplicates in the datastream should be loaded into the collection (true) or not (false)</param>
            <param name="validatorToUse">Validator object to use when creating a new entity. Can be null.</param>
            <param name="fieldsUsedForQuery">Fields used for producing the query</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ExecuteMultiRowDataTableRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,System.Data.Common.DbDataAdapter,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Executes the passed in retrieval query and returns the results as a datatable using the passed in data-adapter.
            It sets the connection object of the command object of query object passed in to the connection object of this class.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="dataAdapterToUse">The dataadapter to use to fill the datatable.</param>
            <param name="fieldsPersistenceInfo">Fields persistence info objects for the fields used for the query. Required for type conversion on values.</param>
            <returns>DataTable with the rows requested</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ExecuteMultiRowDataTableRetrievalQuery(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,System.Data.Common.DbDataAdapter,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Executes the passed in retrieval query and returns the results in thedatatable specified using the passed in data-adapter. 
            It sets the connection object of the command object of query object passed in to the connection object of this class.
            </summary>
            <param name="queryToExecute">Retrieval query to execute</param>
            <param name="dataAdapterToUse">The dataadapter to use to fill the datatable.</param>
            <param name="tableToFill">DataTable to fill</param>
            <param name="fieldsPersistenceInfo">Fields persistence info objects for the fields used for the query. Required for type conversion on values.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.WireTransaction(SD.LLBLGen.Pro.ORMSupportClasses.IQuery)">
            <summary>
            Wires an active transaction to the command object of the passed in query. If no transaction is in progress, nothing is wired.
            </summary>
            <param name="queryToWire">Query to wire up with the passed in transaction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.StartTransaction(System.Data.IsolationLevel,System.String)">
            <summary>
            Starts a new transaction. All database activity after this call will be ran in this transaction and all objects will participate
            in this transaction until its committed or rolled back. 
            If there is a transaction in progress, an exception is thrown.
            Will create and open a new connection if a transaction is not open and/or available.
            </summary>
            <param name="isolationLevelToUse">The isolation level to use for this transaction</param>
            <param name="name">The name for this transaction</param>
            <exception cref="T:System.InvalidOperationException">If a transaction is already in progress.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.Commit">
            <summary>
            Commits the transaction in action. It will end all database activity, since commiting a transaction is finalizing it. After
            calling Commit or Rollback, the ITransaction implementing class will reset itself. Will close the connection.
            If in a COM+ transaction: it will flag the context to commit. It will NOT set the done bit.
            </summary>
            <remarks>Will close the active connection unless KeepConnectionOpen has been set to true</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.Rollback">
            <summary>
            Rolls back the transaction in action. It will end all database activity, since commiting a transaction is finalizing it. After
            calling Commit or Rollback, the ITransaction implementing class will reset itself. 
            If in a COM+ transaction: it will flag the context to abort. It will NOT set the done bit.
            </summary>
            <remarks>Will close the active connection unless KeepConnectionOpen has been set to true</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OpenConnection">
            <summary>
            Opens the active connection object. If the connection is already open, nothing is done.
            If no connection object is present, a new one is created
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CloseConnection">
            <summary>
            Closes the active connection. If no connection is available or the connection is closed, nothing is done.
            If there is a transaction in progress, it's rolled back.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.SaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Saves the passed in entity to the persistent storage. Will <i>not</i> refetch the entity after this save.
            The entity will stay out-of-sync. If the entity is new, it will be inserted, if the entity is existent, the changed
            entity fields will be changed in the database. Will do a recursive save.
            Will pass the concurrency predicate returned by GetConcurrencyPredicate(ConcurrencyPredicateType.Save) as update restriction.
            </summary>
            <param name="entityToSave">The entity to save</param>
            <returns>true if the save was succesful, false otherwise.</returns>
            <remarks>Will use a current transaction if a transaction is in progress</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.SaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean)">
            <summary>
            Saves the passed in entity to the persistent storage. If the entity is new, it will be inserted, if the entity is existent, the changed
            entity fields will be changed in the database. Will do a recursive save.
            Will pass the concurrency predicate returned by GetConcurrencyPredicate(ConcurrencyPredicateType.Save) as update restriction.
            </summary>
            <param name="entityToSave">The entity to save</param>
            <param name="refetchAfterSave">When true, it will refetch the entity from the persistent storage so it will be up-to-date
            after the save action.</param>
            <returns>true if the save was succesful, false otherwise.</returns>
            <remarks>Will use a current transaction if a transaction is in progress</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.SaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean,System.Boolean)">
            <summary>
            Saves the passed in entity to the persistent storage. If the entity is new, it will be inserted, if the entity is existent, the changed
            entity fields will be changed in the database. 
            Will pass the concurrency predicate returned by GetConcurrencyPredicate(ConcurrencyPredicateType.Save) as update restriction.
            </summary>
            <param name="entityToSave">The entity to save</param>
            <param name="refetchAfterSave">When true, it will refetch the entity from the persistent storage so it will be up-to-date
            after the save action.</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by entityToSave also.</param>
            <returns>true if the save was succesful, false otherwise.</returns>
            <remarks>Will use a current transaction if a transaction is in progress</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.SaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Saves the passed in entity to the persistent storage. If the entity is new, it will be inserted, if the entity is existent, the changed
            entity fields will be changed in the database. Will do a recursive save.
            </summary>
            <param name="entityToSave">The entity to save</param>
            <param name="refetchAfterSave">When true, it will refetch the entity from the persistent storage so it will be up-to-date
            after the save action.</param>
            <param name="updateRestriction">Predicate expression, meant for concurrency checks in an Update query. Will be ignored if the entity is new. This
            predicate is used instead of a predicate produced by a set ConcurrencyPredicateFactory.</param>
            <returns>true if the save was succesful, false otherwise.</returns>
            <remarks>Will use a current transaction if a transaction is in progress</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.SaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Boolean)">
            <summary>
            Saves the passed in entity to the persistent storage. If the entity is new, it will be inserted, if the entity is existent, the changed
            entity fields will be changed in the database.
            </summary>
            <param name="entityToSave">The entity to save</param>
            <param name="refetchAfterSave">When true, it will refetch the entity from the persistent storage so it will be up-to-date
            after the save action.</param>
            <param name="updateRestriction">Predicate expression, meant for concurrency checks in an Update query. Will be ignored if the entity is new. This
            predicate is used instead of a predicate produced by a set ConcurrencyPredicateFactory.</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by entityToSave also.</param>
            <returns>true if the save was succesful, false otherwise.</returns>
            <remarks>Will use a current transaction if a transaction is in progress</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.PersistQueue(System.Collections.ArrayList,System.Boolean)">
            <summary>
            Persists the queue passed in. The queue contains ActionQueueElements and is in the right order, just save it from front to back
            </summary>
            <param name="queueToPersist">Queue to persist.</param>
            <param name="insertActions">if true, the actions to perform are insert actions, otherwise update actions</param>
            <returns>bool if the actions all went ok.</returns>
            <remarks>It assumes a transaction, if needed, is already created and opened, as well as a connection. All exceptions are bubbled upwards</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Fetches an entity from the persistent storage into the passed in Entity2 object using a primary key filter. The primary key fields of
            the entity passed in have to have the primary key values. (Example: CustomerID has to have a value, when you want to fetch a CustomerEntity
            from the persistent storage into the passed in object)
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored. The primary key fields have to have a value.</param>
            <remarks>Will use a current transaction if a transaction is in progress, so MVCC or other concurrency scheme used by the database can be
            utilized</remarks>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches an entity from the persistent storage into the passed in Entity2 object using a primary key filter. The primary key fields of
            the entity passed in have to have the primary key values. (Example: CustomerID has to have a value, when you want to fetch a CustomerEntity
            from the persistent storage into the passed in object)
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored. The primary key fields have to have a value.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
            <remarks>Will use a current transaction if a transaction is in progress, so MVCC or other concurrency scheme used by the database can be
            utilized</remarks>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches an entity from the persistent storage into the passed in Entity2 object using a primary key filter. The primary key fields of
            the entity passed in have to have the primary key values. (Example: CustomerID has to have a value, when you want to fetch a CustomerEntity
            from the persistent storage into the passed in object)
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored. The primary key fields have to have a value.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <remarks>Will use a current transaction if a transaction is in progress, so MVCC or other concurrency scheme used by the database can be
            utilized</remarks>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches an entity from the persistent storage into the passed in Entity2 object using a primary key filter. The primary key fields of
            the entity passed in have to have the primary key values. (Example: CustomerID has to have a value, when you want to fetch a CustomerEntity
            from the persistent storage into the passed in object)
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored. The primary key fields have to have a value.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <remarks>Will use a current transaction if a transaction is in progress, so MVCC or other concurrency scheme used by the database can be utilized</remarks>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityUsingUniqueConstraint(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Fetches an entity from the persistent storage into the object specified using the filter specified. 
            Use the entity's uniqueconstraint filter construction methods to construct the required uniqueConstraintFilter for the 
            unique constraint you want to use.
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored.</param>
            <param name="uniqueConstraintFilter">The filter which should filter on fields with a unique constraint.</param>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityUsingUniqueConstraint(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches an entity from the persistent storage into the object specified using the filter specified. 
            Use the entity's uniqueconstraint filter construction methods to construct the required uniqueConstraintFilter for the 
            unique constraint you want to use.
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored.</param>
            <param name="uniqueConstraintFilter">The filter which should filter on fields with a unique constraint.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityUsingUniqueConstraint(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches an entity from the persistent storage into the object specified using the filter specified. 
            Use the entity's uniqueconstraint filter construction methods to construct the required uniqueConstraintFilter for the 
            unique constraint you want to use.
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored.</param>
            <param name="uniqueConstraintFilter">The filter which should filter on fields with a unique constraint.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityUsingUniqueConstraint(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches an entity from the persistent storage into the object specified using the filter specified. 
            Use the entity's uniqueconstraint filter construction methods to construct the required uniqueConstraintFilter for the 
            unique constraint you want to use.
            </summary>
            <param name="entityToFetch">The entity object in which the fetched entity data will be stored.</param>
            <param name="uniqueConstraintFilter">The filter which should filter on fields with a unique constraint.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <returns>true if the Fetch was succesful, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            passed in entity factory. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="entityFactoryToUse">The factory which will be used to create a new entity object which will be fetched</param>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <returns>The new entity fetched.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            passed in entity factory. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="entityFactoryToUse">The factory which will be used to create a new entity object which will be fetched</param>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful. </param>
            <returns>The new entity fetched, or a previous entity fetched if that entity was in the context specified</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            passed in entity factory. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="entityFactoryToUse">The factory which will be used to create a new entity object which will be fetched</param>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <returns>The new entity fetched.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchNewEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,SD.LLBLGen.Pro.ORMSupportClasses.Context)">
            <summary>
            Fetches a new entity using the filter/relation combination filter passed in via <i>filterBucket</i> and the new entity is created using the
            passed in entity factory. Use this method when fetching a related entity using a current entity (for example, fetch the related Customer entity
            of an existing Order entity)
            </summary>
            <param name="entityFactoryToUse">The factory which will be used to create a new entity object which will be fetched</param>
            <param name="filterBucket">the completely filled in IRelationPredicateBucket object which will be used as a filter for the fetch. The fetch
            will only load the first entity loaded, even if the filter results into more entities being fetched</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <param name="contextToUse">The context to add the entity to if the fetch was succesful, and before the prefetch path is fetched. This ensures
            that the prefetch path is fetched using the context specified and will re-use already loaded entity objects.</param>
            <returns>The new entity fetched, or a previous entity fetched if that entity was in the context specified</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.DeleteEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Deletes the specified entity from the persistent storage. The entity is not usable after this call, the state is set to OutOfSync.
            Will use the current transaction if a transaction is in progress.
            If the passed in entity has a concurrency predicate factory object, the returned predicate expression is used to restrict the delete process.		
            </summary>
            <param name="entityToDelete">The entity instance to delete from the persistent storage</param>
            <returns>true if the delete was succesful, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.DeleteEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Deletes the specified entity from the persistent storage. The entity is not usable after this call, the state is set to
            OutOfSync.
            Will use the current transaction if a transaction is in progress.
            </summary>
            <param name="entityToDelete">The entity instance to delete from the persistent storage</param>
            <param name="deleteRestriction">Predicate expression, meant for concurrency checks in a delete query</param>
            <returns>true if the delete was succesful, otherwise false.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            This overload returns all found entities and doesn't apply sorting
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            This overload returns all found entities and doesn't apply sorting
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            This overload doesn't apply sorting
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <exception cref="T:System.ArgumentException">If the passed in collectionToFill doesn't contain an entity factory.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="prefetchPath">The prefetch path to use for this fetch, which will fetch all related entities defined by the path as well.</param>
            <exception cref="T:System.ArgumentException">If the passed in collectionToFill doesn't contain an entity factory.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Int32,System.Int32)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to a value smaller than 2, no paging logic is applied</param>
            <exception cref="T:System.ArgumentException">If the passed in collectionToFill doesn't contain an entity factory.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2,System.Int32,System.Int32)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            It will apply paging and it will from there use a prefetch path fetch using the read page. It's important that pageSize
            is smaller than the set <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ParameterisedPrefetchPathThreshold"/>. It will work, though if pagesize is larger than the limits set for
            the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ParameterisedPrefetchPathThreshold"/> value, the query is likely to be slower than expected.
            </summary>
            <param name="collectionToFill">EntityCollection object containing an entity factory which has to be filled</param>
            <param name="filterBucket">filter information for retrieving the entities. If null, all entities are returned of the type created by
            the factory in the passed in EntityCollection instance.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return. If 0, all entities matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="prefetchPath">Prefetch path to use.</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to a value smaller than 2, no paging logic is applied</param>
            <exception cref="T:System.ArgumentException">If the passed in collectionToFill doesn't contain an entity factory.</exception>
            <remarks>
            Special thanks to Marcus Mac Innes (http://www.styledesign.biz) for this optimization code. 
            </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.SaveEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Saves all dirty objects inside the collection passed to the persistent storage. It will do this inside a transaction if a transaction
            is not yet available. Will not refetch saved entities and will not recursively save the entities.
            </summary>
            <param name="collectionToSave">EntityCollection with one or more dirty entities which have to be persisted</param>
            <returns>the amount of persisted entities</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.SaveEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,System.Boolean,System.Boolean)">
            <summary>
            Saves all dirty objects inside the collection passed to the persistent storage. It will do this inside a transaction if a transaction
            is not yet available.
            </summary>
            <param name="collectionToSave">EntityCollection with one or more dirty entities which have to be persisted</param>
            <param name="refetchSavedEntitiesAfterSave">Refetches a saved entity from the database, so the entity will not be 'out of sync'</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by the entities inside collectionToSave also.</param>
            <returns>the amount of persisted entities</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.DeleteEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Deletes all dirty objects inside the collection passed from the persistent storage. It will do this inside a transaction if a transaction
            is not yet available. Entities which are physically deleted from the persistent storage are marked with the state 'Deleted' but are not
            removed from the collection.
            </summary>
            <param name="collectionToDelete">EntityCollection with one or more dirty entities which have to be persisted</param>
            <returns>the amount of physically deleted entities</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.DeleteEntitiesDirectly(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Deletes all entities of the name passed in as <i>entityName</i> (e.g. "CustomerEntity") from the persistent storage if they match the filter
            supplied in <i>filterBucket</i>.
            </summary>
            <param name="entityName">The name of the entity to retrieve persistence information. For example "CustomerEntity". This name can be
            retrieved from an existing entity's LLBLGenProEntityName property.</param>
            <param name="filterBucket">filter information to filter out the entities to delete</param>
            <returns>the amount of physically deleted entities</returns>
            <remarks>Not supported for entities which are in a TargetPerEntity hierarchy.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.UpdateEntitiesDirectly(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Updates all entities of the same type or subtype of the entity <i>entityWithNewValues</i> directly in the persistent storage if they match the filter
            supplied in <i>filterBucket</i>. Only the fields changed in entityWithNewValues are updated for these fields. Entities of a subtype of the type
            of <i>entityWithNewValues</i> which are affected by the filterBucket's filter will thus also be updated. 
            </summary>
            <param name="entityWithNewValues">Entity object which contains the new values for the entities of the same type and which match the filter
            in filterBucket. Only fields which are changed are updated.</param>
            <param name="filterBucket">filter information to filter out the entities to update.</param>
            <returns>the number of physically updated entities. Use this number only to test if the update succeeded (so value is &gt; 0).</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            the passed in typed list.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="typedListToFill">Typed list to fill.</param>
            <remarks>Grabs the fields list and relations set from the typed list passed in. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            the passed in typed list.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="typedListToFill">Typed list to fill.</param>
            <param name="additionalFilter">An additional filter to use to filter the fetch of the typed list. If you need a more sophisticated
            filter approach, please use the overload which accepts an IRelationalPredicateBucket and add your filter to the bucket you receive
            when calling typedListToFill.GetRelationInfo().</param>
            <remarks>Grabs the fields list and relations set from the typed list passed in. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            the passed in typed list.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="typedListToFill">Typed list to fill.</param>
            <param name="additionalFilter">An additional filter to use to filter the fetch of the typed list. If you need a more sophisticated
            filter approach, please use the overload which accepts an IRelationalPredicateBucket and add your filter to the bucket you receive
            when calling typedListToFill.GetRelationInfo().</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <remarks>Grabs the fields list and relations set from the typed list passed in. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            the passed in typed list.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="typedListToFill">Typed list to fill.</param>
            <param name="additionalFilter">An additional filter to use to filter the fetch of the typed list. If you need a more sophisticated
            filter approach, please use the overload which accepts an IRelationalPredicateBucket and add your filter to the bucket you receive
            when calling typedListToFill.GetRelationInfo().</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to a value smaller than 2, no paging logic is applied</param>
            <remarks>Grabs the fields list and relations set from the typed list passed in. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. Doesn't apply any sorting, doesn't limit
            the resultset on the amount of rows to return, does allow duplicates.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Boolean)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. Doesn't apply any sorting, doesn't limit
            the resultset on the amount of rows to return.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,System.Boolean)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. Doesn't apply any sorting.
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. 
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset. Use the typed list's method GetFieldsInfo() to retrieve
            this IEntityField2 information</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. 
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset. Use the typed list's method GetFieldsInfo() to retrieve
            this IEntityField2 information</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32)">
            <summary>
            Fetches the fields passed in fieldCollectionToFetch from the persistent storage using the relations and filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a typed list object. 
            For TypedView filling, use the method FetchTypedView()
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields to fetch into the datatable. The fields
            inside this object are used to construct the selection resultset. Use the typed list's method GetFieldsInfo() to retrieve
            this IEntityField2 information</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to a value smaller than 2, no paging logic is applied</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2)">
            <summary>
            Fetches the Typed View passed in from the persistent storage
            Doesn't apply any sorting, doesn't limit the amount of rows returned by the query, doesn't apply any filtering, allows duplicate rows.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,System.Boolean)">
            <summary>
            Fetches the Typed View passed in from the persistent storage 
            Doesn't apply any sorting, doesn't limit the amount of rows returned by the query, doesn't apply any filtering.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Boolean)">
            <summary>
            Fetches the Typed View passed in from the persistent storage 
            Doesn't apply any sorting, doesn't limit the amount of rows returned by the query.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,System.Boolean)">
            <summary>
            Fetches the Typed View passed in from the persistent storage 
            Doesn't apply any sorting. Use this routine to fill a TypedView object.
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Fetches the Typed View passed in from the persistent storage 
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <remarks>To fill a DataTable with entity rows, use this method as well, by passing the Fields collection of an entity of the same type
            as the one you want to fetch as fieldCollectionToFetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Fetches the Typed View passed in from the persistent storage 
            </summary>
            <param name="typedViewToFill">Typed view to fill.</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on</param>
            <remarks>To fill a DataTable with entity rows, use this method as well, by passing the Fields collection of an entity of the same type
            as the one you want to fetch as fieldCollectionToFetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage into the DataTable object passed in. Doesn't apply any sorting, doesn't limit the amount of rows returned by the query, doesn't
            apply any filtering, allows duplicate rows.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,System.Boolean)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage into the DataTable object passed in. Doesn't apply any sorting, doesn't limit the amount of rows returned by the query, doesn't
            apply any filtering.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Boolean)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage using the filter information stored in
            filterBucket into the DataTable object passed in. Doesn't apply any sorting, doesn't limit the amount of rows returned by the query.
            Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,System.Boolean)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage using the filter information stored in
            filterBucket into the DataTable object passed in. Doesn't apply any sorting
            Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data. 
            Use the TypedList's method GetRelationInfo() to retrieve this bucket.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage using the filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.
            Use the Typed View's method GetFieldsInfo() to get this IEntityField2 field collection</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <remarks>To fill a DataTable with entity rows, use this method as well, by passing the Fields collection of an entity of the same type
            as the one you want to fetch as fieldCollectionToFetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage using the filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.
            Use the Typed View's method GetFieldsInfo() to get this IEntityField2 field collection</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on</param>
            <remarks>To fill a DataTable with entity rows, use this method as well, by passing the Fields collection of an entity of the same type
            as the one you want to fetch as fieldCollectionToFetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32)">
            <summary>
            Fetches the Typed View fields passed in fieldCollectionToFetch from the persistent storage using the filter information stored in
            filterBucket into the DataTable object passed in. Use this routine to fill a TypedView object.
            </summary>
            <param name="fieldCollectionToFetch">IEntityField2 collection which contains the fields of the typed view to fetch into the datatable.
            Use the Typed View's method GetFieldsInfo() to get this IEntityField2 field collection</param>
            <param name="dataTableToFill">The datatable object to fill with the data for the fields in fieldCollectionToFetch</param>
            <param name="filterBucket">filter information (relations and predicate expressions) for retrieving the data.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. If 0, all rows matching the filter are returned</param>
            <param name="sortClauses">SortClause expression which is applied to the query executed, sorting the fetch result.</param>
            <param name="allowDuplicates">When true, it will not filter out duplicate rows, otherwise it will DISTINCT duplicate rows.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to a value smaller than 2, no paging logic is applied</param>
            <remarks>To fill a DataTable with entity rows, use this method as well, by passing the Fields collection of an entity of the same type
            as the one you want to fetch as fieldCollectionToFetch.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnGetScalar(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery)">
            <summary>
            Called right before the actual scalar query is executed
            </summary>
            <param name="scalarQuery">RetrievalQuery object which will be executed</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnSaveEntity(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Called right before the actual Save action is executed.
            </summary>
            <param name="saveQuery">the ActionQuery object which will be executed</param>
            <param name="entityToSave">the entity which will be saved by saveQuery</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnSaveEntityComplete(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Called right after the actual Save action was executed.
            </summary>
            <param name="saveQuery">the ActionQuery object which will be executed</param>
            <param name="entityToSave">the entity which is saved by saveQuery</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnSaveEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Called at the start of the SaveEntityCollection() method
            </summary>
            <param name="entityCollectionToSave">the entity collection to save</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnSaveEntityCollectionComplete(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Called at the end of the SaveEntityCollection() method
            </summary>
            <param name="entityCollectionToSave">the entity collection which was saved</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnDeleteEntity(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Called right before the actual delete action is executed
            </summary>
            <param name="deleteQuery">the ActionQuery object which will be executed</param>
            <param name="entityToDelete">the entity which will be deleted by deleteQuery</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnDeleteEntityComplete(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Called right before the actual delete action is executed
            </summary>
            <param name="deleteQuery">the ActionQuery object which will be executed</param>
            <param name="entityToDelete">the entity which was deleted by deleteQuery</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnDeleteEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Called at the start of the DeleteEntityCollection method
            </summary>
            <param name="entityCollectionToDelete">the entity collection to delete</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnDeleteEntityCollectionComplete(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Called at the end of the DeleteEntityCollection method
            </summary>
            <param name="entityCollectionToDelete">the entity collection which was delete</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnDeleteEntitiesDirectly(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery)">
            <summary>
            Called right before the actual delete query is executed
            </summary>
            <param name="deleteQuery">The ActionQuery to execute</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnDeleteEntitiesDirectlyComplete(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery)">
            <summary>
            Called right before the actual delete query is executed
            </summary>
            <param name="deleteQuery">The ActionQuery to execute</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnFetchEntity(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2)">
            <summary>
            Called right before the actual fetch is executed.
            </summary>
            <param name="selectQuery">the RetrievalQuery which will be executed</param>
            <param name="fieldsToFetch">the IEntityFields2 object which will be filled by selectQuery</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnFetchEntityComplete(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2)">
            <summary>
            Called right after the actual fetch is executed.
            </summary>
            <param name="selectQuery">the RetrievalQuery which was executed</param>
            <param name="fieldsToFetch">the IEntityFields2 object which was filled by selectQuery</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnFetchEntityCollection(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Called right before the actual fetch is executed
            </summary>
            <param name="selectQuery">the RetrievalQuery which will be executed</param>
            <param name="entityCollectionToFetch">the entity collection to fill</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnFetchEntityCollectionComplete(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Called right after the actual fetch is executed
            </summary>
            <param name="selectQuery">the RetrievalQuery which was executed</param>
            <param name="entityCollectionToFetch">the entity collection which was filled</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnFetchTypedList(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable)">
            <summary>
            Called right before the actual fetch is executed
            </summary>
            <param name="selectQuery">the RetrievalQuery object to execute</param>
            <param name="fieldCollectionToFetch">the fieldslist used to construct the query</param>
            <param name="dataTableToFill">the datatable object to fill</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnFetchTypedListComplete(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable)">
            <summary>
            Called right after the actual fetch is executed
            </summary>
            <param name="selectQuery">the RetrievalQuery object which was executed</param>
            <param name="fieldCollectionToFetch">the fieldslist used to construct the query</param>
            <param name="dataTableToFill">the datatable object which was filled</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnFetchTypedView(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable)">
            <summary>
            Called right before the actual fetch is executed
            </summary>
            <param name="selectQuery">the RetrievalQuery object to execute</param>
            <param name="fieldCollectionToFetch">the fieldslist used to construct the query</param>
            <param name="dataTableToFill">the datatable object to fill</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnFetchTypedViewComplete(SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Data.DataTable)">
            <summary>
            Called right after the actual fetch is executed
            </summary>
            <param name="selectQuery">the RetrievalQuery object which was executed</param>
            <param name="fieldCollectionToFetch">the fieldslist used to construct the query</param>
            <param name="dataTableToFill">the datatable object which was filled</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnUpdateEntitiesDirectly(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery)">
            <summary>
            Called right before the actual update query is executed
            </summary>
            <param name="updateQuery">The ActionQuery to execute</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnUpdateEntitiesDirectlyComplete(SD.LLBLGen.Pro.ORMSupportClasses.IActionQuery)">
            <summary>
            Called right after the actual update query is executed
            </summary>
            <param name="updateQuery">The ActionQuery to execute</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnBeforeEntitySave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean)">
            <summary>
            Called from PersistQueue, the internal queue processing routine, before the entity is validated and before the entity 
            is used to create a query and actually saved. The entity passed in as entitySaved is already added to the transaction.
            </summary>
            <param name="entitySaved">Entity to be saved.</param>
            <param name="insertAction">if true, the entity is in the insertqueue, otherwise the update queue.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnBeforeTransactionCommit">
            <summary>
            Called right before the Commit() method starts its logic.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnAfterTransactionCommit">
            <summary>
            Called right after the Commit() method has performed its logic and the commit was succesful.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnBeforeTransactionRollback">
            <summary>
            Called right before the Rollback() method starts its logic.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.OnAfterTransactionRollback">
            <summary>
            Called right after the Rollback() method has performed its logic and the rollback was succesful.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.SaveTransaction(System.String)">
            <summary>
            Creates a savepoint with the name savePointName in the current transaction. You can roll back to this savepoint using
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.Rollback(System.String)"/>.
            </summary>
            <param name="savePointName">name of savepoint. Must be unique in an active transaction</param>
            <exception cref="T:System.InvalidOperationException">If no transaction is in progress.</exception>
            <exception cref="T:System.ArgumentException">if savePointName is empty or null or there is already a savepoint defined with the name specified</exception>
            <exception cref="T:System.NotSupportedException">if the .NET database provider doesn't support transaction saving or when COM+ is used.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.Rollback(System.String)">
            <summary>
            Rolls back the transaction in action to the savepoint with the name savepointName. No internal objects are being reset when this method is called,
            so call this Rollback overload only to roll back to a savepoint. To roll back a complete transaction, call Rollback() without specifying a savepoint
            name. Create a savepoint by calling SaveTransaction(savePointName)
            </summary>
            <exception cref="T:System.InvalidOperationException">If no transaction is in progress.</exception>
            <exception cref="T:System.ArgumentException">if savePointName is empty or null or there is no savepoint defined with the name specified</exception>
            <exception cref="T:System.NotSupportedException">if the .NET database provider doesn't support transaction rolling back a transaction to a named
            point or when COM+ is used.</exception>
            <param name="savePointName">name of the savepoint to roll back to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreatePrimaryKeyFilter(System.Collections.ArrayList)">
            <summary>
            Creates a new predicate expression which filters on the primary key fields and the set values for the
            given primary key fields. If no primary key fields are specified, null is returned.
            </summary>
            <param name="primaryKeyFields">ArrayList with IEntityField2 instances which form the primary key for which the filter has to be constructed</param>
            <returns>filled in predicate expression or null if no primary key fields are specified.</returns>
            <remarks>Call this method passing IEntity2.Fields.PrimaryKeyFields</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreatePrimaryKeyFilters(System.Collections.ArrayList)">
            <summary>
            Creates for each entity which PK field(s) are in the passed in arraylist a new predicate expression which filters on the 
            primary key fields of that entity and the set values for the
            given primary key fields. If no primary key fields are specified, null is returned.
            </summary>
            <param name="primaryKeyFields">ArrayList with IEntityField2 instances which form the primary key for which the filter has to be constructed</param>
            <returns>ArrayList with for each entity a filled in predicate expression or null if no primary key fields are specified. PK filters
            are stored in the same order as entities appear in the pkfields, which is the same order in which entities are located in the hierarchy
            (from root to leaf)</returns>
            <remarks>Call this method passing IEntity2.Fields.PrimaryKeyFields</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateConnection">
            <summary>
            Creates a new connection object using the current connection string value
            </summary>
            <remarks>Will close and dispose an active connection.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetActiveConnection">
            <summary>
            Returns the active connection object. If no connection object is present, a new one will be created.
            </summary>
            <returns>The active connection object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateNewPhysicalConnection(System.String)">
            <summary>
            Creates a new physical connection object.
            </summary>
            <param name="connectionString">Connectionstring to use for the new connection object</param>
            <returns>IDbConnection implementing connection object.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateNewPhysicalTransaction">
            <summary>
            Creates a new physical transaction object over the created connection. The connection is assumed to be open.
            </summary>
            <returns>a physical transaction object, like an instance of SqlTransaction.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateNewPhysicalDataAdapter">
            <summary>
            Creates a new .NET DataAdapter for the database system this DataAccessAdapter object is targeting. 
            </summary>
            <returns>New .NET DataAdapter object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetFieldPersistenceInfo(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2)">
            <summary>
            Retrieves the persistence info for the field passed in. 
            </summary>
            <param name="field">Field which fieldpersistence info has to be retrieved</param>
            <returns>the requested persistence information</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetFieldPersistenceInfos(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Retrieves the persistence info objects for the fields of the entity passed in.
            </summary>
            <param name="entity">Entity object which fields the persistence information should be retrieved for</param>
            <returns>the requested persistence information</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetFieldPersistenceInfos(System.String)">
            <summary>
            Retrieves the persistence info objects for the fields of the entity passed in.
            </summary>
            <param name="entityName">Entity name for entity type which fields the persistence information should be retrieved for</param>
            <returns>the requested persistence information</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InsertPersistenceInfoObjects(SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Inserts in each predicate expression element the persistence info object for the field used. If there is already a fieldpersistenceinfo 
            element for a given field, it is skipped. 
            </summary>
            <param name="expression">IPredicateExpression object which has predicate elements whose persistence info objects have to be
            set to a value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateDynamicQueryEngine">
            <summary>
            Creates a new Dynamic Query engine object and passes in the defined catalog/schema overwrite hashtables.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InsertPersistenceInfoObjects(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Inserts in each entityrelation object the persistence info objects for the fields referenced.
            </summary>
            <param name="relations">IRelationCollection object which has entityrelation objects whose fields' persistence info objects have to be
            set to a value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InsertPersistenceInfoObjects(SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Inserts in each SortClause object the persistence info object for the field referenced.
            </summary>
            <param name="sortClauses">ISortExpression object which has SortClause objects whose fields persistence info object has to be
            set to a value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InsertPersistenceInfoObjects(SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Inserts for each entityfield in the collection the persistence info object 
            </summary>
            <param name="groupByClause">IGroupByCollection object which has IEntityField(2) objects whose persistence info object has to be
            set to a value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InsertPersistenceInfoObjects(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Inserts for each entityfield in the expression the persistence info object 
            </summary>
            <param name="expression">IExpression object which has IEntityField(2) objects whose persistence info object has to be
            set to a value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateInsertDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Creates a new insert DQ for the entity passed in.
            </summary>
            <param name="entityToSave">the entity to create the Insert query for</param>
            <param name="persistenceInfoObjects">persistence objects for the entity</param>
            <returns>a fully usable IActionQuery object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateUpdateDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Collections.ArrayList)">
            <summary>
            Creates a new Update DQ for the entity passed in.
            </summary>
            <param name="entityToSave">the entity to create the Update query for</param>
            <param name="persistenceInfoObjects">persistence objects for the entity</param>
            <param name="pkFilters">Arraylist, with for each entity (from root to leaf) the PK filter for that entity. </param>
            <returns>a fully usable IActionQuery object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateUpdateDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Collections.ArrayList,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new Update DQ for the entity passed in.
            </summary>
            <param name="entityWithNewValues">the entity to with new values to use for the SET clauses</param>
            <param name="persistenceInfoObjects">persistence objects for the fields in entityWithNewValues</param>
            <param name="pkFilters">Arraylist, with for each entity (from root to leaf) the PK filter for that entity. </param>
            <param name="additionalFilter">The additional filter to use in the update query, used for concurrency purposes</param>
            <param name="relationsToWalk">Relations to walk to fulfill the filter</param>
            <returns>a fully usable IActionQuery object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateSelectDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32)">
            <summary>
            Creates a new Select DQ for the fields passed in using the parameters specified.
            </summary>
            <param name="fieldsToFetch">fields to fetch using the select</param>
            <param name="persistenceInfoObjects">persistence info objects for the fields</param>
            <param name="filter">filter to use for the where clause</param>
            <param name="maxNumberOfItemsToReturn">max. amount of rows to return</param>
            <param name="sortClauses">sort clause specifications to use</param>
            <param name="relationsToWalk">relations to walk to build the FROM clause</param>
            <param name="allowDuplicates">flag to specify if duplicates should be returned</param>
            <param name="groupByClause">group by clause to embed in the query</param>
            <param name="pageNumber">The page number to retrieve</param>
            <param name="pageSize">the page size to retrieve</param>
            <returns>ready to use query to use.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateRowCountDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Creates a new RowCount DQ for the query build with the elements passed in
            </summary>
            <param name="fieldsToFetch">fields to fetch using the select</param>
            <param name="persistenceInfoObjects">persistence info objects for the fields</param>
            <param name="filter">filter to use for the where clause</param>
            <param name="relationsToWalk">relations to walk to build the FROM clause</param>
            <param name="allowDuplicates">flag to specify if duplicates should be returned</param>
            <param name="groupByClause">group by clause to embed in the query</param>
            <returns>ready to use query to use.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateDeleteDQ(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Collections.ArrayList)">
            <summary>
            Creates a new Delete Query object which is ready to use.
            </summary>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the delete query</param>
            <param name="pkFilters">Arraylist, with for each entity (from root to leaf) the PK filter for that entity. </param>
            <returns>IActionQuery instance which is ready to be used.</returns>
            <remarks>Generic version</remarks>
            <exception cref="T:System.ArgumentNullException">When persistenceInfo is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateDeleteDQ(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Collections.ArrayList,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new Delete Query object which is ready to use.
            </summary>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the delete query</param>
            <param name="pkFilters">Arraylist, with for each entity (from root to leaf) the PK filter for that entity. </param>
            <param name="additionalDeleteFilter">Extra predicate for concurrency purposes.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a second FROM clause with INNER JOINs.</param>
            <returns>IActionQuery instance which is ready to be used.</returns>
            <remarks>Generic version</remarks>
            <exception cref="T:System.ArgumentNullException">When persistenceInfo is null or when deleteFilter is null or when relationsToWalk is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.GetFieldPersistenceInfos(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2)">
            <summary>
            Retrieves the persistence info for the fields passed in. 
            </summary>
            <param name="fields">Fields for which the persistence info has to be determined</param>
            <returns>the requested persistence information</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.AddTransactionParticipant(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Adds the passed in entity as a participant of this transaction. 
            </summary>
            <param name="participant">The participant which actions have to be included in this transaction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CheckForDuplicate(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Collections.Hashtable@,System.Collections.Hashtable@)">
            <summary>
            Checks if the passed in entity is present in the hashtables passed in. 
            </summary>
            <param name="entityToAdd">Entity which has to be tested if there was already a duplicate in the hashtables.</param>
            <param name="objectHashtable">See remarks</param>
            <param name="objectHashes">See remarks</param>
            <returns>true if there is no duplicate for hte passed in entity seen yet. False otherwise</returns>
            <remarks>construct hashtable for filtering out duplicates. Each hashtable entry is at first a section of
            empty cells. When a hashcode is found in the set of hashes, add an entry, if not existend to this
            hashtable. When the hashcode already is added to this hashtable, the entity of the new hashcode is
            compared to all the entities with the same hashcode in the list related to the hashcode in this table.
            when an equal object is found, it's a real duplicate, otherwise the entity is added to the list and the
            collection.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InterpretFilterBucket(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Boolean@,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression@)">
            <summary>
            Interprets the passed in filterbucket and returns information determined after interpreting the data inside the IRelationPredicateBucket object.
            The Relations and predicate expression are initialized with field persistence info objects
            </summary>
            <param name="filterBucket">The IRelationPredicateBucket object with the filter information to interepret</param>
            <param name="relationsPresent">Ref parameter which will be true if there are relation objects specified inside filterBucket</param>
            <param name="expressionToPass">Ref parameter which will be the predicate expression to pass to query construction code</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchEntityUsingFilter(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Fetches an entity from the persistent storage using the filter specified.
            </summary>
            <param name="fieldsToFetch">The EntityFields2 object to store the entity data in</param>
            <param name="persistenceInfos">the field persistence infos for the fields passed in..</param>
            <param name="filter">The filter to use to retrieve one entity. If the filter matches more than 1 entity, the first entity read will be used.</param>
            <returns>true if fetch succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.RemoveElementsFromTransaction(SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ActionToPerformDuringRemove)">
            <summary>
            Removes all participating elements from this transaction and sends them a commit or rollback signal, based on the passed in boolean Commit.
            This action will make the participating objects to take care of their own connections again.
            </summary>
            <param name="action">Action to perform on each removed element.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.Reset">
            <summary>
            Resets the transaction object. All participants will be notified.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchOneRow(System.Data.IDataReader,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Fetches one row from the open data-reader and places that row into the passed in object rowDestination. rowDestination
            should match the format of the rows read by DataSource. Will only read the current row.
            </summary>
            <param name="dataSource">The open datareader used to fetch the data</param>
            <param name="rowDestination">The IEntityFields2 implementing object where the data should be stored.</param>
            <param name="fieldsPersistenceInfo">The IFieldPersistenceInfo objects for the rowDestination fields</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ReadRowIntoFields(System.Object[],SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2,System.Collections.Hashtable,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Fetches the values passed in into the rowDestination. 
            </summary>
            <param name="values">the values to read into rowDestination</param>
            <param name="rowDestination">The IEntityFields2 implementing object where the data should be stored.</param>
            <param name="fieldNameToOrdinal">hashtable with per fieldname the ordinal position in values.</param>
            <param name="fieldsPersistenceInfo">The IFieldPersistenceInfo objects used for the fields to produce the query. They're in the same order
            as the values in 'values', and values[0] belongs to fieldsPersistenceInfo[0]. Used for type converters.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchPrefetchPath(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches one or more entities which match the filter information in the filterBucket into the EntityCollection passed.
            The entity collection object has to contain an entity factory object which will be the factory for the entity instances
            to be fetched.
            </summary>
            <param name="rootEntities">EntityCollection object containing one or more root objects which will contain the entities to fetch (and their paths)
            defined in the prefetch path.</param>
            <param name="filterBucket">filter information used to retrieve the root entities.</param>
            <param name="maxNumberOfItemsToReturn">The maximum amount of entities to return limit used to retrieve the root entities.</param>
            <param name="sortClauses">SortClause expression which was applied to the query executed to retrieve the root entities</param>
            <param name="prefetchPath">the PrefetchPath which defines the graph of objects to fetch.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FetchParameterisedPrefetchPath(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2)">
            <summary>
            Fetches the prefetch path using a parameterized range compare. This prefetch path fetch logic is used to produce fast prefetch path logic and also
            to be able to perform paging + prefetch path logic.
            </summary>
            <param name="rootEntities">Root entities.</param>
            <param name="maxNumberOfItemsToReturn">Max number of items to return.</param>
            <param name="prefetchPath">Prefetch path.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.MergeNormal(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Boolean)">
            <summary>
            Merges the fetched entities in currentElement.RetrievalCollection with the root entities for normal relations (i.e. not m:n)
            </summary>
            <param name="rootEntities">Root entities.</param>
            <param name="currentElement">Current element.</param>
            <param name="rootEntitiesArePkSide">Root entities are pk side.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.MergeManyToMany(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Merges the entities fetched in currentElement.RetrievalCollection with the rootEntities for a many to many relation
            </summary>
            <param name="currentElement">Current element.</param>
            <param name="elementFilter">Element filter.</param>
            <param name="maxNumberOfItemsToReturn">Max number of items to return.</param>
            <param name="rootEntities">Root entities.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.DetermineIfMerge(System.Collections.Hashtable,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Int64)">
            <summary>
            Determines if the counter for the entity passed in is lower than the maximum passed in and increases teh counter as well.
            </summary>
            <param name="maxCounters"></param>
            <param name="rootObject"></param>
            <param name="maxAmountOfItemsToReturn"></param>
            <returns>true if the counter is less than the maximum, which means that the merge can take place</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FindPkObject(System.Collections.Hashtable,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Finds the pk object related to the FK object passed in via the relation specified.
            </summary>
            <param name="pkSideHashes">Pk side hashes hashtable to quickly find an entity based on the hash of the PK</param>
            <param name="fkHash">Fk hash value</param>
            <param name="fkObject">Fk object, to do a value compare</param>
            <param name="relation">the relation between pk and fk</param>
            <returns>the PK object related to the FK object, located in the pkSideHashes. if not found, null is returned.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.FindStartEntity(System.Collections.Hashtable,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.Data.DataRow)">
            <summary>
            Finds the start entity related to the end entity passed in via the relation specified.
            </summary>
            <param name="startEntityHashes">start entity hash to arraylist with startentity (root entities) matching this hash</param>
            <param name="startEntityHash">startentity hash value</param>
            <param name="relation">the relation between intermediate and start entity, required to retrieve the right values from the datarow</param>
            <param name="row">datarow with start-end PK fields, one relation per row.</param>
            <returns>the start entity object to find. if not found, null is returned.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateHashes(System.Collections.Hashtable,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Creates the hashes for the collection passed in. 
            </summary>
            <param name="hashesToFill">Hashes to fill.</param>
            <param name="collectionToHash">Collection to hash.</param>
            <remarks>construct hashtable for looking up entities through their PK. Per hash value an arraylist is created with the entities
            with that hashvalue. Normally 1 entity per hashvalue is stored, but this can vary depending on the fact that the Hashvalue is 
            an int.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateHashes(System.Collections.Hashtable,System.Collections.Hashtable,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates the hash code to datarow relations for both the start entity and the end entity. This is required because the hashvalues
            calculated from PK fields is sometimes not unique. We therefore have to store the values as well to do a value compare when required.
            the hash to datarow hashtable has per hashvalue an array list is stored with the datarows
            </summary>
            <param name="dataRowToStartEntityPkHash">datarow to startentity hash hashtable.</param>
            <param name="endEntityPkHashToDataRow">End entity pk hash to datarow hashtable</param>
            <param name="pkpkFields">Pkpkfields datatable</param>
            <param name="relations">Relations.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IComPlusAdapterContext)">
            <summary>
            Inits the class.
            </summary>
            <param name="comPlusContextHost">Com plus context host.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.Dispose">
            <summary>
            Implements the IDispose' method Dispose.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.Dispose(System.Boolean)">
            <summary>
            Implements the Dispose functionality. If a transaction is in progress, it will rollback that transaction.
            </summary>
            <param name="isDisposing">Flag which signals this routine if a dispose action should take place (true) or not (false)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateDeleteDQ(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Creates a new delete DQ for the entity passed in.
            </summary>
            <param name="persistenceInfoObject">persistence objects for the entity's first field.</param>
            <param name="filter">The filter to use in the delete query</param>
            <returns>a fully usable IActionQuery object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateDeleteDQ(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new delete DQ for the entity passed in.
            </summary>
            <param name="persistenceInfoObject">persistence objects for the entity's first field.</param>
            <param name="filter">The filter to use in the delete query</param>
            <param name="relationsToWalk">Relations to use walk to fulfill the filter</param>
            <returns>a fully usable IActionQuery object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateUpdateDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Creates a new Update DQ for the entity passed in.
            </summary>
            <param name="entityToSave">the entity to create the Update query for</param>
            <param name="persistenceInfoObjects">persistence objects for the entity</param>
            <param name="filter">The filter to use in the update query</param>
            <returns>a fully usable IActionQuery object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CreateUpdateDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new Update DQ for the entity passed in.
            </summary>
            <param name="entityWithNewValues">the entity to with new values to use for the SET clauses</param>
            <param name="persistenceInfoObjects">persistence objects for the fields in entityWithNewValues</param>
            <param name="filter">The filter to use in the update query</param>
            <param name="relationsToWalk">Relations to walk to fulfill the filter</param>
            <returns>a fully usable IActionQuery object</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ParameterisedPrefetchPathThreshold">
            <summary>
            Gets or sets the parameterised prefetch path threshold. This threshold is used to determine when the prefetch path logic should switch to a 
            subquery or when it should use a WHERE field IN (value1, value2, ... valueN) construct, based on the # of elements in the parent collection.
            If that # of elements exceeds this threshold, a subquery is constructed, otherwise field IN (value1, value2, ...) construct is used.
            The default value is 50. On average, this is faster than using a subquery which returns 50 elements. Use this to tune prefetch path fetch logic
            for your particular needs. 
            <br/><br/>
            This threshold is also used to determine if paging is possible. A page size bigger than this threshold will disable the paging functionality
            when using paging + prefetch paths. 
            </summary>
            <remarks>Testing showed that values larger than 300 will be slower than a subquery.
            <br/><br/>
            Special thanks to Marcus Mac Innes (http://www.styledesign.biz) for this optimization code. 
            </remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.TypeDefaultValueSupplier">
            <summary>
            Class which will supply the default value for a specified .NET type. Necessary for rowfetchers when a NULL field is found.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.IsTransactionInProgress">
            <summary>
            Gets IsTransactionInProgress. True when there is a transaction in progress.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.TransactionIsolationLevel">
            <summary>
            Gets / sets the isolation level a transaction should use. 
            Setting this during a transaction in progress has no effect on the current running transaction.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.TransactionName">
            <summary>
            Gets the name of the transaction. Setting this during a transaction in progress has no effect on the current running transaction.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ConnectionString">
            <summary>
            Gets / sets the connection string to use for the connection with the database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.KeepConnectionOpen">
            <summary>
            Gets / sets KeepConnectionOpen, a flag used to keep open connections after a database action has finished.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.PhysicalTransaction">
            <summary>
            The physical transaction object used over the current ActiveConnection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.CommandTimeOut">
            <summary>
            Gets / sets the timeout value to use with the command object(s) created by the adapter.
            Default is 30 seconds
            Set this prior to calling a method which executes database logic.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.InComPlusTransaction">
            <summary>
            Returns true if this DataAccessAdapter is hosted inside an IComPlusAdapterContext implementing object.
            This means that all transactions by this DataAccessAdapter object are routed through COM+ and not controlled by ADO.NET.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ActionToPerformDuringRemove">
            <summary>
            Enum which is used to signal the element removal routine what to do while removing hte elements.
            This is a performance issue, now the loop has to be run just once
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ActionToPerformDuringRemove.None">
            <summary>
            No action
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ActionToPerformDuringRemove.SendCommit">
            <summary>
            Call ITransactionalElement.TransactionCommit()
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DataAccessAdapterBase.ActionToPerformDuringRemove.SendRollback">
            <summary>
            Call ITransactionalElement.TransactionRollback()
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactory2Converter">
            <summary>
            Type converter class which is used during design time to serialize a correct constructor call for an entity factory2. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactory2Converter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance [can convert to] the specified context.
            </summary>
            <param name="context">Context.</param>
            <param name="destinationType">Destination type.</param>
            <returns>
            	<c>true</c> if this instance [can convert to] the specified context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactory2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts to the specified type, if applicable.
            </summary>
            <param name="context">Context.</param>
            <param name="culture">Culture.</param>
            <param name="value">Value.</param>
            <param name="destinationType">Destination type.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryConverter">
            <summary>
            Type converter class which is used during design time to serialize a correct constructor call for an entity factory. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this instance [can convert to] the specified context.
            </summary>
            <param name="context">Context.</param>
            <param name="destinationType">Destination type.</param>
            <returns>
            	<c>true</c> if this instance [can convert to] the specified context; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactoryConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts to the specified type, if applicable.
            </summary>
            <param name="context">Context.</param>
            <param name="culture">Culture.</param>
            <param name="value">Value.</param>
            <param name="destinationType">Destination type.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionToolboxItem">
            <summary>
            Toolbox item for EntityCollectionBase2 derived classes. This class makes sure the designer pops up the first time an entity collection
            is dragged onto the form.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionToolboxItem.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionToolboxItem"/> instance.
            </summary>
            <param name="typeToRepresent">Type to represent.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionToolboxItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionToolboxItem"/> instance.
            </summary>
            <param name="info">Info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionToolboxItem.CreateComponentsCore(System.ComponentModel.Design.IDesignerHost)">
            <summary>
            Creates the components core.
            </summary>
            <param name="host">Host.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionComponentDesigner">
            <summary>
            Simple designer class for adapter collections to set the entity factory when no factory is set.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionComponentDesigner.#ctor">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionComponentDesigner"/> instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionComponentDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            This method provides an opportunity to perform processing when a designer is initialized.
            The component parameter is the component that the designer is associated with.
            </summary>
            <param name="component">Component.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionComponentDesigner.OnSetEntityFactory(System.Object,System.EventArgs)">
            <summary>
            Called when the user clicks the Set EntityFactory to use command in the menu
            </summary>
            <param name="sender">Sender.</param>
            <param name="e">E.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionComponentDesigner.SelectEntityFactoryToUse(System.ComponentModel.IComponent)">
            <summary>
            Selects the entity factory to use for the EntityCollectionBase2 instance which is the component. 
            </summary>
            <param name="entityCollectionComponent"></param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionComponentDesigner.Verbs">
            <summary>
            Gets the verbs.
            </summary>
            <value></value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase">
            <summary>
            Base class for every DbSpecificCreator implementation
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator">
            <summary>
            Interface for DatabaseSpecificCreator objects, which use the Strategy pattern to supply IPredicate implementations with a way to
            create parameter objects, field names, including prefix/postfix characters, and conversion routines, which suit the target database.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateParameter(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Data.ParameterDirection)">
            <summary>
            Creates a valid Parameter based on the passed in IEntityField implementation.
            </summary>
            <param name="field">IEntityField instance used to base the parameter on.</param>
            <param name="direction">The direction for the parameter</param>
            <returns>Valid parameter for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateParameter(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Data.ParameterDirection)">
            <summary>
            Creates a valid Parameter based on the passed in IEntityFieldCore implementation and the passed in IFieldPersistenceInfo instance
            </summary>
            <param name="field">IEntityFieldCore instance used to base the parameter on.</param>
            <param name="persistenceInfo">Persistence information to create the parameter.</param>
            <param name="direction">The direction for the parameter</param>
            <returns>Valid parameter for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateParameter(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Data.ParameterDirection,System.Object)">
            <summary>
            Creates a valid Parameter based on the passed in IEntityFieldCore implementation and the passed in IFieldPersistenceInfo instance
            </summary>
            <param name="field">IEntityFieldCore instance used to base the parameter on.</param>
            <param name="persistenceInfo">Persistence information to create the parameter.</param>
            <param name="direction">The direction for the parameter</param>
            <param name="value">Value to set the parameter to.</param>
            <returns>Valid parameter for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateParameter(System.String,System.Data.ParameterDirection,System.Object)">
            <summary>
            Creates a parameter based on the fieldcore passed in and the value passed in. The value is used to determine the DB type. 
            No precision/scale/length is set, this is left to the IDataParameter implementing object. This method is used to
            produce parameters for expression values. 
            </summary>
            <param name="name">name to be used for the parameter.</param>
            <param name="direction">Direction for the parameter</param>
            <param name="value">value the parameter is for.</param>
            <returns>Valid parameter for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateLikeParameter(System.String,System.String)">
            <summary>
            Creates a valid Parameter for the pattern in a LIKE statement. This is a special case, because it shouldn't rely on the type of the
            field the LIKE statement is used with but should be the unicode varchar type. 
            </summary>
            <param name="fieldName">The name of the field the LIKE statement is used with.</param>
            <param name="pattern">The pattern to be passed as the value for the parameter. Is used to determine length of the parameter.</param>
            <returns>Valid parameter for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateLikeParameter(System.String,System.String,System.Int32)">
            <summary>
            Creates a valid Parameter for the pattern in a LIKE statement. This is a special case, because it shouldn't rely on the type of the
            field the LIKE statement is used with but should be the unicode varchar type. 
            </summary>
            <param name="fieldName">The name of the field the LIKE statement is used with.</param>
            <param name="pattern">The pattern to be passed as the value for the parameter. Is used to determine length of the parameter.</param>
            <param name="targetFieldDbType">Type of the target field db</param>
            <returns>Valid parameter for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateFieldName(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.String,System.String)">
            <summary>
            Creates a valid field name based on the passed in IFieldPersistenceInfo implementation. The fieldname is
            ready to use in queries and contains all pre/postfix characters required. This field name is
            not padded with an alias if that alias should be created. Effectively, this is the
            same as CreateFieldName(field persistence info, fieldname, false);
            </summary>
            <param name="persistenceInfo">IFieldPersistenceInfo instance used to formulate the fieldname</param>
            <param name="fieldName">name of the entity field, to determine if an alias is required</param>
            <param name="objectAlias">Alias of object the field maps to. Only specified when called from a predicate.</param>
            <param name="containingObjectName">Name of the containing object of the field with name fieldName.</param>
            <returns>
            Valid field name for usage with the target database.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateFieldName(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Creats a valid field name based on the passed in IFieldPersistenceInfo implementation. The fieldname is
            ready to use in queries and contains all pre/postfix characters required. 
            </summary>
            <param name="persistenceInfo">IFieldPersistenceInfo instance used to formulate the fieldname</param>
            <param name="fieldName">name of the entity field, to determine if an alias is required</param>
            <param name="objectAlias">Alias of object the field maps to. Only specified when called from a predicate.</param>
            <param name="appendAlias">When true, the routine should construct an alias construction statement.</param>
            <param name="containingObjectName">Name of the containing object of the field with name fieldName.</param>
            <returns>Valid field name for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateFieldName(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.String,System.Int32@,System.Boolean)">
            <summary>
            Creates the name for the field, and takes into account an aggregate function present and an expression present. If one or both are present, the
            field is replaced with (expression) or surrounded with (aggregate) the function (if applyAggregateFunction is true).
            </summary>
            <param name="fieldCore">fieldcore part of the field. Required to determine expression and aggregate function</param>
            <param name="persistenceInfo">persistence info object for the field.</param>
            <param name="fieldName">name for the field to be used</param>
            <param name="objectAlias">Alias for object hte field belongs to</param>
            <param name="uniqueMarker">uniquemarker variable for expression's toquerytext method.</param>
            <param name="applyAggregateFunction">flag to apply aggregate function or not. Aggregate functions can't be applied when the call originates
            from a predicate which is not part of a having clause.</param>
            <returns>string representing the field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateFieldNameSimple(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String)">
            <summary>
            Creates a valid field name based on the passed in IFieldPersistenceInfo implementation. The fieldname is
            ready to use in queries and contains all pre/postfix characters required. This field name is
            not padded with an alias if that alias should be created. Effectively, this is the
            same as CreateFieldNameSimple(field persistence info, fieldname, false);. The fieldname is 'simple' in that
            it doesn't contain any catalog, schema or table references. 
            </summary>
            <param name="persistenceInfo">IFieldPersistenceInfo instance used to formulate the fieldname</param>
            <param name="fieldName">name of the entity field, to determine if an alias is required</param>
            <returns>Valid field name for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateFieldNameSimple(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.Boolean)">
            <summary>
            Creats a valid field name based on the passed in IFieldPersistenceInfo implementation. The fieldname is
            ready to use in queries and contains all pre/postfix characters required. The fieldname is 'simple' in that
            it doesn't contain any catalog, schema or table references. 
            </summary>
            <param name="persistenceInfo">IFieldPersistenceInfo instance used to formulate the fieldname</param>
            <param name="fieldName">name of the entity field, to determine if an alias is required</param>
            <param name="appendAlias">When true, the routine should construct an alias construction statement.</param>
            <returns>Valid field name for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateObjectName(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            Creates a valid object name (f.e. a name for a table or view) based on the passed in IFieldPersistenceInfo implementation. The fieldname is
            ready to use in queries and contains all pre/postfix characters required. 
            </summary>
            <param name="persistenceInfo">IFieldPersistenceInfo instance which source object info is used to formulate the objectname</param>
            <returns>Valid object name</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.ConvertComparisonOperator(SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator)">
            <summary>
            Converts the passed in comparison operator to a string usable in a query.
            </summary>
            <param name="operatorToConvert">Operator to convert to string</param>
            <returns>The string representation usable in a query of the operator passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.ConvertSortOperator(SD.LLBLGen.Pro.ORMSupportClasses.SortOperator)">
            <summary>
            Converts the passed in sort operator to a string usable in a query
            </summary>
            <param name="operatorToConvert">sort operator to convert to a string</param>
            <returns>The string representation usable in a query of the operator passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.ConvertExpressionOperator(SD.LLBLGen.Pro.ORMSupportClasses.ExOp)">
            <summary>
            Converts the passed in expression operator (exop) to a string usable in a query 
            </summary>
            <param name="operatorToConvert">Expression operator to convert to a string</param>
            <returns>The string representation usable in a query of the operator passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.ConvertSetOperator(SD.LLBLGen.Pro.ORMSupportClasses.SetOperator)">
            <summary>
            Converts the passed in set operator to a string usable in a query 
            </summary>
            <param name="operatorToConvert">Set operator to convert to a string</param>
            <returns>The string representation usable in a query of the operator passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.ToUpperFunctionName">
            <summary>
            Returns the SQL functionname to make a string uppercase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateSubQuery(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32@)">
            <summary>
            Creates a new Select Query which is ready to use as a subquery, based on the specified select list and the specified set of relations.
            </summary>
            <param name="selectList">list of IEntityFieldCore objects to select</param>
            <param name="fieldPersistenceInfos">Array of IFieldPersistenceInfo objects to use to build the select query</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no 
            filtering is done, and all rows are returned.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <param name="groupByClause">the group by clause to use</param>
            <param name="uniqueMarker">a unique marker value to use. </param>
            <returns>IRetrievalQuery instance which is ready to be used.</returns>
            <exception cref="T:System.ArgumentNullException">When selectList is null or fieldsPersistenceInfo is null or relationsToWalk is null</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.CreateValidAlias(System.String)">
            <summary>
            Routine which creates a valid alias string for the raw alias passed in. For example, the alias will be surrounded by "[]" on sqlserver. 
            Used by the RelationCollection to produce a valid alias for joins.
            </summary>
            <param name="rawAlias">the raw alias to make valid</param>
            <returns>valid alias string to use.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificCreator.FindRealAlias(System.String,System.String)">
            <summary>
            Finds the real alias for the entity + objectalias combination. A real alias is necessary as an entity mapped onto multiple tables (through inheritance)
            is aliased with a single object alias but each target has to have a different real alias. 
            </summary>
            <param name="entityName">Name of the entity the holder of the objectAlias is defined in</param>
            <param name="objectAlias">Object alias.</param>
            <returns>the real alias for the entityname + objectAlias combination. If not found, objectAlias is returned.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.#ctor">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase"/> instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.ProduceAliasScopeData(SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Produces the alias scope data for the relations collection passed in, which define 0 or more aliases and form a separated scope.
            </summary>
            <param name="relations">Relations.</param>
            <remarks>produces the alias - entitynames in the current scope. If this has to be done in a new scope, call CreateNewAliasScope() first.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateParameter(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Data.ParameterDirection)">
            <summary>
            Creates a valid Parameter based on the passed in IEntityField implementation.
            </summary>
            <param name="field">IEntityField instance used to base the parameter on.</param>
            <param name="direction">The direction for the parameter</param>
            <returns>Valid parameter for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateParameter(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Data.ParameterDirection)">
            <summary>
            Creates a valid Parameter based on the passed in IEntityFieldCore implementation and the passed in IFieldPersistenceInfo instance
            </summary>
            <param name="field">IEntityFieldCore instance used to base the parameter on.</param>
            <param name="persistenceInfo">Persistence information to create the parameter.</param>
            <param name="direction">The direction for the parameter</param>
            <returns>Valid parameter for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateParameter(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Data.ParameterDirection,System.Object)">
            <summary>
            Creates a valid Parameter based on the passed in IEntityFieldCore implementation and the passed in IFieldPersistenceInfo instance
            </summary>
            <param name="field">IEntityFieldCore instance used to base the parameter on.</param>
            <param name="persistenceInfo">Persistence information to create the parameter.</param>
            <param name="direction">The direction for the parameter</param>
            <param name="valueToSet">Value to set the parameter to.</param>
            <returns>Valid parameter for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateParameter(System.String,System.Data.ParameterDirection,System.Object)">
            <summary>
            Creates a parameter based on the fieldcore passed in and the value passed in. The value is used to determine the DB type. 
            No precision/scale/length is set, this is left to the IDataParameter implementing object. This method is used to
            produce parameters for expression values. 
            </summary>
            <param name="name">name to be used for the parameter.</param>
            <param name="direction">Direction for the parameter</param>
            <param name="value">value the parameter is for.</param>
            <returns>Valid parameter for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateLikeParameter(System.String,System.String)">
            <summary>
            Creates a valid Parameter for the pattern in a LIKE statement. This is a special case, because it shouldn't rely on the type of the
            field the LIKE statement is used with but should be the unicode varchar type. 
            </summary>
            <param name="fieldName">The name of the field the LIKE statement is used with.</param>
            <param name="pattern">The pattern to be passed as the value for the parameter. Is used to determine length of the parameter.</param>
            <returns>Valid parameter for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateLikeParameter(System.String,System.String,System.Int32)">
            <summary>
            Creates a valid Parameter for the pattern in a LIKE statement. This is a special case, because it shouldn't rely on the type of the
            field the LIKE statement is used with but should be the unicode varchar type. 
            </summary>
            <param name="fieldName">The name of the field the LIKE statement is used with.</param>
            <param name="pattern">The pattern to be passed as the value for the parameter. Is used to determine length of the parameter.</param>
            <param name="targetFieldDbType">Type of the target field db</param>
            <returns>Valid parameter for usage with the target database.</returns>
            <remarks>This version ignores targetFieldDbType and calls CreateLikeParameter(fieldname, pattern). When you override this one, also
            override the other.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateFieldName(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.String,System.String)">
            <summary>
            Creates a valid field name based on the passed in IFieldPersistenceInfo implementation. The fieldname is
            ready to use in queries and contains all pre/postfix characters required. This field name is
            not padded with an alias if that alias should be created. Effectively, this is the
            same as CreateFieldName(field persistence info, fieldname, false);
            </summary>
            <param name="persistenceInfo">IFieldPersistenceInfo instance used to formulate the fieldname</param>
            <param name="fieldName">name of the entity field, to determine if an alias is required</param>
            <param name="objectAlias">Alias of object the field maps to. Only specified when called from a predicate.</param>
            <param name="containingObjectName">Name of the containing object of the field with name fieldName.</param>
            <returns>Valid field name for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateFieldName(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Creats a valid field name based on the passed in IFieldPersistenceInfo implementation. The fieldname is
            ready to use in queries and contains all pre/postfix characters required. 
            </summary>
            <param name="persistenceInfo">IFieldPersistenceInfo instance used to formulate the fieldname</param>
            <param name="fieldName">name of the entity field, to determine if an alias is required</param>
            <param name="objectAlias">Alias of object the field maps to. Only specified when called from a predicate.</param>
            <param name="appendAlias">When true, the routine should construct an alias construction statement.</param>
            <param name="containingObjectName">Name of the containing object of the field with name fieldName.</param>
            <returns>Valid field name for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateFieldName(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.String,System.Int32@,System.Boolean)">
            <summary>
            Creates the name for the field, and takes into account an aggregate function present and an expression present. If one or both are present, the
            field is replaced with (expression) or surrounded with (aggregate) the function (if applyAggregateFunction is true).
            </summary>
            <param name="fieldCore">fieldcore part of the field. Required to determine expression and aggregate function</param>
            <param name="persistenceInfo">persistence info object for the field.</param>
            <param name="fieldName">name for the field to be used</param>
            <param name="objectAlias">Alias for object hte field belongs to</param>
            <param name="uniqueMarker">uniquemarker variable for expression's toquerytext method.</param>
            <param name="applyAggregateFunction">flag to apply aggregate function or not. Aggregate functions can't be applied when the call originates
            from a predicate which is not part of a having clause.</param>
            <returns>string representing the field</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateFieldNameSimple(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String)">
            <summary>
            Creates a valid field name based on the passed in IFieldPersistenceInfo implementation. The fieldname is
            ready to use in queries and contains all pre/postfix characters required. This field name is
            not padded with an alias if that alias should be created. Effectively, this is the
            same as CreateFieldNameSimple(field persistence info, fieldname, false);. The fieldname is 'simple' in that
            it doesn't contain any catalog, schema or table references. 
            </summary>
            <param name="persistenceInfo">IFieldPersistenceInfo instance used to formulate the fieldname</param>
            <param name="fieldName">name of the entity field, to determine if an alias is required</param>
            <returns>Valid field name for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateFieldNameSimple(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.Boolean)">
            <summary>
            Creats a valid field name based on the passed in IFieldPersistenceInfo implementation. The fieldname is
            ready to use in queries and contains all pre/postfix characters required. The fieldname is 'simple' in that
            it doesn't contain any catalog, schema or table references. 
            </summary>
            <param name="persistenceInfo">IFieldPersistenceInfo instance used to formulate the fieldname</param>
            <param name="fieldName">name of the entity field, to determine if an alias is required</param>
            <param name="appendAlias">When true, the routine should construct an alias construction statement.</param>
            <returns>Valid field name for usage with the target database.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateObjectName(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            Creates a valid object name (f.e. a name for a table or view) based on the passed in IFieldPersistenceInfo implementation. The fieldname is
            ready to use in queries and contains all pre/postfix characters required. 
            </summary>
            <param name="persistenceInfo">IFieldPersistenceInfo instance which source object info is used to formulate the objectname</param>
            <returns>Valid object name</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.ConvertComparisonOperator(SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator)">
            <summary>
            Converts the passed in comparison operator to a string usable in a query.
            </summary>
            <param name="operatorToConvert">Operator to convert to string</param>
            <returns>The string representation usable in a query of the operator passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.ConvertSortOperator(SD.LLBLGen.Pro.ORMSupportClasses.SortOperator)">
            <summary>
            Converts the passed in sort operator to a string usable in a query
            </summary>
            <param name="operatorToConvert">sort operator to convert to a string</param>
            <returns>The string representation usable in a query of the operator passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.ConvertExpressionOperator(SD.LLBLGen.Pro.ORMSupportClasses.ExOp)">
            <summary>
            Converts the passed in expression operator (exop) to a string usable in a query 
            </summary>
            <param name="operatorToConvert">Expression operator to convert to a string</param>
            <returns>The string representation usable in a query of the operator passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.ConvertSetOperator(SD.LLBLGen.Pro.ORMSupportClasses.SetOperator)">
            <summary>
            Converts the passed in set operator to a string usable in a query 
            </summary>
            <param name="operatorToConvert">Set operator to convert to a string</param>
            <returns>The string representation usable in a query of the operator passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.ToUpperFunctionName">
            <summary>
            Returns the SQL functionname to make a string uppercase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateSubQuery(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32@)">
            <summary>
            Creates a new Select Query which is ready to use as a subquery, based on the specified select list and the specified set of relations.
            </summary>
            <param name="selectList">list of IEntityFieldCore objects to select</param>
            <param name="fieldPersistenceInfos">Array of IFieldPersistenceInfo objects to use to build the select query</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no 
            filtering is done, and all rows are returned.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <param name="groupByClause">the group by clause to use</param>
            <param name="uniqueMarker">a unique marker value to use. </param>
            <returns>IRetrievalQuery instance which is ready to be used.</returns>
            <exception cref="T:System.ArgumentNullException">When selectList is null or fieldsPersistenceInfo is null or relationsToWalk is null</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateValidAlias(System.String)">
            <summary>
            Routine which creates a valid alias string for the raw alias passed in. For example, the alias will be surrounded by "[]" on sqlserver. 
            Used by the RelationCollection to produce a valid alias for joins.
            </summary>
            <param name="rawAlias">the raw alias to make valid</param>
            <returns>valid alias string to use.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.SetCreatorInDQE(SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase)">
            <summary>
            Sets this instance as the creator in the DQE.
            Used in subquery creations, to pass on the creator to a DQE.
            </summary>
            <param name="dqe">Dqe.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.GetRealValue(System.Object,System.ComponentModel.TypeConverter,System.Type)">
            <summary>
            Gets the real value, by converting the passed in value, if necessary
            </summary>
            <param name="currentValue">Current value.</param>
            <param name="typeConverterToUse">Type converter to use.</param>
            <param name="actualDotNetType">Type of the actual dot net.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.GetNewPerCallCatalogName(System.String)">
            <summary>
            Gets the new catalog name from the per-call hashtable name overwrites set into this object. If no per call name pairs are defined or the
            name passed in isn't found, the same name passed in is returned
            </summary>
            <param name="currentName">Name of the current.</param>
            <returns>the new name </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.GetNewPerCallSchemaName(System.String)">
            <summary>
            Gets the new schema name from the per-call hashtable name overwrites set into this object. If no per call name pairs are defined or the
            name passed in isn't found, the same name passed in is returned
            </summary>
            <param name="currentName">Name of the current.</param>
            <returns>the new name </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.StripObjectNameChars(System.String)">
            <summary>
            Strips the object name chars from the name passed in. For example [name] will become name
            </summary>
            <param name="toStrip">To strip.</param>
            <returns>name without the name's object name chars (Which are db specific)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.CreateNewAliasScope">
            <summary>
            Creates a new alias scope and makes it active.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.DestroyCurrentAliasScope">
            <summary>
            Destroys the current alias scope and makes the previous one active, if any.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.FindRealAlias(System.String,System.String)">
            <summary>
            Finds the real alias for the entity + objectalias combination. A real alias is necessary as an entity mapped onto multiple tables (through inheritance)
            is aliased with a single object alias but each target has to have a different real alias. 
            </summary>
            <param name="entityName">Name of the entity the holder of the objectAlias is defined in</param>
            <param name="objectAlias">Object alias.</param>
            <returns>the real alias for the entityname + objectAlias combination. If not found, objectAlias is returned.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.PerCallCatalogNameOverwrites">
            <summary>
            Gets / sets perCallCatalogNameOverwrites name pairs
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DbSpecificCreatorBase.PerCallSchemaNameOverwrites">
            <summary>
            Gets / sets perCallSchemaNameOverwrites name pairs
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase">
            <summary>
            Central base class for all DynamicQueryEngine classes. Shared logic is placed in this class, which can be overriden in the DynamicQueryEngine
            classes per database. 
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.InsertQueryBufferLength">
            <summary>
            Length of buffer in which Insert queries are generated
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.DeleteQueryBufferLength">
            <summary>
            Length of buffer in which Delete queries are generated
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.UpdateQueryBufferLength">
            <summary>
            Length of buffer in which Update queries are generated
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.SelectQueryBufferLength">
            <summary>
            Length of buffer in which Select queries are generated
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.SelectJoinQueryBufferLength">
            <summary>
            Length of buffer in which Join constructs for select queries are generated
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.SelectResultSetBufferLength">
            <summary>
            Length of buffer in which resultset definitions for select queries are generated
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.UniqueMarker">
            <summary>
            The unique marker for this DQE. Used to make unique parameter names.
            This is only set to a value different than 0 when the call originates from a subquery predicate
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.Switch">
            <summary>
            The traceswitch used in the DQE. Set in the static constructor of the derived class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.#ctor">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase"/> instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateInsertDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Data.IDbConnection)">
            <summary>
            Creates a new Insert Query object which is ready to use. 
            </summary>
            <param name="fields">EntityFields object to use to build the insert query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <returns>IActionQuery Instance which is ready to be used.</returns>
            <remarks>Self servicing specific</remarks>
            <exception cref="T:System.ArgumentNullException">When fields is null</exception>
            <exception cref="T:System.ArgumentException">When fields contains no EntityField instances.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateInsertDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.IDbConnection)">
            <summary>
            Creates a new Insert Query object which is ready to use. 
            </summary>
            <param name="fields">Array of EntityFieldCore objects to use to build the insert query</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the insert query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <returns>IActionQuery Instance which is ready to be used.</returns>
            <remarks>Generic version.</remarks>
            <exception cref="T:System.ArgumentNullException">When fields is null or fieldsPersistenceInfo is null</exception>
            <exception cref="T:System.ArgumentException">When fields contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryConstructionException">When there are no fields to insert in the fields list. This exception is to prevent 
            INSERT INTO table () VALUES () style queries.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSingleTargetInsertDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.IDbConnection,System.Collections.Hashtable@)">
            <summary>
            Creates a new Insert Query object which is ready to use. 
            </summary>
            <param name="fields">Array of EntityFieldCore objects to use to build the insert query</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the insert query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="fieldToParameter">Hashtable which will contain after the call for each field the parameter which contains or will contain
            the field's value.</param>
            <returns>IActionQuery Instance which is ready to be used.</returns>
            <remarks>Generic version.</remarks>
            <exception cref="T:System.ArgumentNullException">When fields is null or fieldsPersistenceInfo is null</exception>
            <exception cref="T:System.ArgumentException">When fields contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryConstructionException">When there are no fields to insert in the fields list. This exception is to prevent 
            INSERT INTO table () VALUES () style queries.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateDeleteDQ(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.IDbConnection,System.Collections.ArrayList)">
            <summary>
            Creates a new Delete Query object which is ready to use.
            </summary>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the delete query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="pkFilters">Arraylist, with for each entity (from root to leaf) the PK filter for that entity. </param>
            <returns>IActionQuery instance which is ready to be used.</returns>
            <remarks>Generic version</remarks>
            <exception cref="T:System.ArgumentNullException">When persistenceInfo is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSingleTargetDeleteDQ(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.IDbConnection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new Delete Query object which is ready to use.
            </summary>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the delete query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="deleteFilter">A complete IPredicate implementing object which contains the filter for the rows to delete</param>
            <returns>IActionQuery instance which is ready to be used.</returns>
            <remarks>Generic version</remarks>
            <exception cref="T:System.ArgumentNullException">When persistenceInfo is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateDeleteDQ(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.IDbConnection,System.Collections.ArrayList,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new Delete Query object which is ready to use.
            </summary>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the delete query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="pkFilters">Arraylist, with for each entity (from root to leaf) the PK filter for that entity. </param>
            <param name="additionalDeleteFilter">Extra predicate for concurrency purposes.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a second FROM clause with INNER JOINs.</param>
            <returns>IActionQuery instance which is ready to be used.</returns>
            <remarks>Generic version</remarks>
            <exception cref="T:System.ArgumentNullException">When persistenceInfo is null or when deleteFilter is null or when relationsToWalk is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSingleTargetDeleteDQ(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.IDbConnection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new Delete Query object which is ready to use.
            </summary>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the delete query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="deleteFilter">A complete IPredicate implementing object which contains the filter for the rows to delete</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a second FROM clause with INNER JOINs.</param>
            <returns>IActionQuery instance which is ready to be used.</returns>
            <remarks>Generic version</remarks>
            <exception cref="T:System.ArgumentNullException">When persistenceInfo is null or when deleteFilter is null or when relationsToWalk is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateUpdateDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Data.IDbConnection,System.Collections.ArrayList)">
            <summary>
            Creates a new Update Query object which is ready to use. Only 'changed' EntityFields are included in the update query.
            Primary Key fields are never updated. 
            </summary>
            <param name="fields">EntityFields object to use to build the update query.</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="pkFilters">Arraylist, with for each entity (from root to leaf) the PK filter for that entity. </param>
            <returns>IActionQuery instance which is ready to be used.</returns>
            <remarks>Selfservicing specific</remarks>
            <exception cref="T:System.ArgumentNullException">When fields is null</exception>
            <exception cref="T:System.ArgumentException">When fields contains no EntityField instances.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateUpdateDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Data.IDbConnection,System.Collections.ArrayList,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new Update Query object which is ready to use. Only 'changed' EntityFieldCore are included in the update query. 
            Primary Key fields are never updated. 
            </summary>
            <param name="fields">EntityFields object to use to build the update query.</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="pkFilters">Arraylist, with for each entity (from root to leaf) the PK filter for that entity. </param>
            <param name="additionalUpdateFilter">Extra predicate for concurrency purposes.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <returns>IActionQuery instance which is ready to be used.</returns>
            <remarks>Selfservicing specific</remarks>
            <exception cref="T:System.ArgumentNullException">When fields is null or when updateFilter is null or when relationsToWalk is null</exception>
            <exception cref="T:System.ArgumentException">When fields contains no EntityField instances.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateUpdateDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.IDbConnection,System.Collections.ArrayList)">
            <summary>
            Creates a new Update Query object which is ready to use. Only 'changed' EntityFieldCore fields are included in the update query. 
            </summary>
            <param name="fields">EntityFieldCore array to use to build the update query.</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the update query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="pkFilters">Arraylist, with for each entity (from root to leaf) the PK filter for that entity. </param>
            <returns>IActionQuery instance which is ready to be used.</returns>
            <exception cref="T:System.ArgumentNullException">When fields is null or fieldsPersistenceInfo is null</exception>
            <exception cref="T:System.ArgumentException">When fields contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSingleTargetUpdateDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.IDbConnection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new Update Query object which is ready to use. Only 'changed' EntityFieldCore fields are included in the update query. 
            Primary Key fields are never updated. 
            </summary>
            <param name="fields">EntityFieldCore array to use to build the update query.</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the update query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="updateFilter">A complete IPredicate implementing object which contains the filter for the rows to update</param>
            <returns>IActionQuery instance which is ready to be used.</returns>
            <exception cref="T:System.ArgumentNullException">When fields is null or fieldsPersistenceInfo is null</exception>
            <exception cref="T:System.ArgumentException">When fields contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateUpdateDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.IDbConnection,System.Collections.ArrayList,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new Update Query object which is ready to use. Only 'changed' EntityFieldCore are included in the update query.
            Primary Key fields are never updated. 
            </summary>
            <param name="fields">Array of EntityFieldCore objects to use to build the insert query</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the update query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="pkFilters">Arraylist, with for each entity (from root to leaf) the PK filter for that entity. </param>
            <param name="additionalUpdateFilter">Extra predicate for concurrency purposes.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <returns>IActionQuery instance which is ready to be used.</returns>
            <exception cref="T:System.ArgumentNullException">When fields is null or when updateFilter is null or 
            when relationsToWalk is null or when fieldsPersistence is null</exception>
            <exception cref="T:System.ArgumentException">When fields contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSingleTargetUpdateDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.IDbConnection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new Update Query object which is ready to use. Only 'changed' EntityFieldCore are included in the update query.
            Primary Key fields are never updated. 
            </summary>
            <param name="fields">Array of EntityFieldCore objects to use to build the insert query</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the update query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="updateFilter">A complete IPredicate implementing object which contains the filter for the rows to update</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <returns>IActionQuery instance which is ready to be used.</returns>
            <exception cref="T:System.ArgumentNullException">When fields is null or when updateFilter is null or 
            when relationsToWalk is null or when fieldsPersistence is null</exception>
            <exception cref="T:System.ArgumentException">When fields contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSelectDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Data.IDbConnection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Creates a new Select Query which is ready to use. If selectFilter is set to null, all rows are selected.
            </summary>
            <param name="selectList">list of fields to select</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no 
            filtering is done, and all rows are returned.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>IRetrievalQuery instance which is ready to be used.</returns>
            <remarks>SelfServicing specific</remarks>
            <exception cref="T:System.ArgumentNullException">When selectList is null</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityField instances.</exception>
            <exception cref="T:System.ArgumentException">When selectList contains one or more EntityField instances which are not present in a filled groupByClause.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSelectDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Data.IDbConnection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean)">
            <summary>
            Creates a new Select Query which is ready to use. If selectFilter is set to null, all rows are selected.
            </summary>
            <param name="selectList">list of fields to select</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no 
            filtering is done, and all rows are returned.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="allowDuplicates">Flag which forces the inclusion of DISTINCT if set to true. If the resultset contains fields of type ntext, text or image, no duplicate filtering
            is done.</param>
            <returns>IRetrievalQuery instance which is ready to be used.</returns>
            <remarks>Selfservicing specific</remarks>
            <exception cref="T:System.ArgumentNullException">When selectList is null</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityField instances.</exception>
            <exception cref="T:System.ArgumentException">When selectList contains one or more EntityField instances which are not present in a filled groupByClause.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSelectDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Data.IDbConnection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Creates a new Select Query which is ready to use, based on the specified select list and the specified set of relations.
            If selectFilter is set to null, all rows are selected.
            </summary>
            <param name="selectList">list of fields to select</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no 
            filtering is done, and all rows are returned.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <param name="allowDuplicates">Flag which forces the inclusion of DISTINCT if set to true. If the resultset contains fields of type ntext, text or image, no duplicate filtering
            is done.</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>IRetrievalQuery instance which is ready to be used.</returns>
            <remarks>Selfservicing specific</remarks>
            <exception cref="T:System.ArgumentNullException">When selectList is null or when relationsToWalk is null.</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityField instances.</exception>
            <exception cref="T:System.ArgumentException">When selectList contains one or more EntityField instances which are not present in a filled groupByClause.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSelectDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.IDbConnection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean)">
            <summary>
            Creates a new Select Query which is ready to use. If selectFilter is set to null, all rows are selected.
            </summary>
            <param name="selectList">list of IEntityFieldCore objects to select</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the select query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no 
            filtering is done, and all rows are returned.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="allowDuplicates">Flag which forces the inclusion of DISTINCT if set to true. If the resultset contains fields of type ntext, text or image, no duplicate filtering
            is done.</param>
            <returns>IRetrievalQuery instance which is ready to be used.</returns>
            <remarks>Generic version</remarks>
            <exception cref="T:System.ArgumentNullException">When selectList is null or fieldsPersistenceInfo is null</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSelectDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.IDbConnection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Creates a new Select Query which is ready to use, based on the specified select list and the specified set of relations.
            If selectFilter is set to null, all rows are selected.
            </summary>
            <param name="selectList">list of IEntityFieldCore objects to select</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the select query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no 
            filtering is done, and all rows are returned.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <param name="allowDuplicates">Flag which forces the inclusion of DISTINCT if set to true. If the resultset contains fields of type ntext, text or image, no duplicate filtering
            is done.</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>IRetrievalQuery instance which is ready to be used.</returns>
            <remarks>Generic version</remarks>
            <exception cref="T:System.ArgumentNullException">When selectList is null or fieldsPersistenceInfo is null</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSelectDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.IDbConnection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Boolean,System.Boolean)">
            <summary>
            Creates a new Select Query which is ready to use, based on the specified select list and the specified set of relations.
            If selectFilter is set to null, all rows are selected.
            </summary>
            <param name="selectList">list of IEntityFieldCore objects to select</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the select query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no 
            filtering is done, and all rows are returned.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <param name="allowDuplicates">Flag which forces the inclusion of DISTINCT if set to true. If the resultset contains fields of type ntext, text or image, no duplicate filtering
            is done.</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="relationsSpecified">flag to signal if relations are specified, this is a result of a check. This routine should
            simply assume the value of this flag is correct.</param>
            <param name="sortClausesSpecified">flag to signal if sortClauses are specified, this is a result of a check. This routine should
            simply assume the value of this flag is correct.</param>
            <returns>IRetrievalQuery instance which is ready to be used.</returns>
            <exception cref="T:System.ArgumentNullException">When selectList is null or fieldsPersistenceInfo is null</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSelectDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields,System.Data.IDbConnection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32)">
            <summary>
            Creates a new Select Query which is ready to use, based on the specified select list and the specified set of relations.
            If selectFilter is set to null, all rows are selected.
            </summary>
            <param name="selectList">list of fields to select</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no 
            filtering is done, and all rows are returned.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <param name="allowDuplicates">Flag which forces the inclusion of DISTINCT if set to true. If the resultset contains fields of type ntext, text or image, no duplicate filtering
            is done.</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="pageNumber">the page number to retrieve. First page starts with 1.</param>
            <param name="pageSize">the page size to retrieve. If set to 0 or 1 no paging logic is applied.</param>
            <returns>IRetrievalQuery instance which is ready to be used.</returns>
            <remarks>Selfservicing specific</remarks>
            <exception cref="T:System.ArgumentNullException">When selectList is null or when relationsToWalk is null.</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityField instances.</exception>
            <exception cref="T:System.ArgumentException">When selectList contains one or more EntityField instances which are not present in a filled groupByClause.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSelectDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.IDbConnection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32)">
            <summary>
            Creates a new Select Query which is ready to use, based on the specified select list and the specified set of relations.
            If selectFilter is set to null, all rows are selected.
            </summary>
            <param name="selectList">list of IEntityFieldCore objects to select</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the select query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no 
            filtering is done, and all rows are returned.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <param name="allowDuplicates">Flag which forces the inclusion of DISTINCT if set to true. If the resultset contains fields of type ntext, text or image, no duplicate filtering
            is done.</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="pageNumber">the page number to retrieve. First page starts with 1. If set to 0 or lower, no paging logic is applied</param>
            <param name="pageSize">the page size to retrieve. If set to 0 no paging logic is applied.</param>
            <returns>IRetrievalQuery instance which is ready to be used.</returns>
            <remarks>Generic version</remarks>
            <exception cref="T:System.ArgumentNullException">When selectList is null or fieldsPersistenceInfo is null or relationsToWalk is null</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreatePagingSelectDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.IDbConnection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32)">
            <summary>
            Creates a new Select Query which is ready to use, based on the specified select list and the specified set of relations.
            If selectFilter is set to null, all rows are selected.
            </summary>
            <param name="selectList">list of IEntityFieldCore objects to select</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the select query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no 
            filtering is done, and all rows are returned.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <param name="allowDuplicates">Flag which forces the inclusion of DISTINCT if set to true. If the resultset contains fields of type ntext, text or image, no duplicate filtering
            is done.</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <param name="pageNumber">the page number to retrieve. First page starts with 1. If set to 0 or lower, no paging logic is applied</param>
            <param name="pageSize">the page size to retrieve. If set to 0 no paging logic is applied.</param>
            <returns>IRetrievalQuery instance which is ready to be used.</returns>
            <remarks>Generic version</remarks>
            <exception cref="T:System.ArgumentNullException">When selectList is null or fieldsPersistenceInfo is null or relationsToWalk is null</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateRowCountDQ(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Data.IDbConnection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Creates a select query which will be executed as a scalar, and which will return a single value, the number of rows in the query
            formed by the elements passed in. 
            </summary>
            <param name="selectList">list of IEntityFieldCore objects to select</param>
            <param name="fieldsPersistenceInfo">Array of IFieldPersistenceInfo objects to use to build the select query</param>
            <param name="connectionToUse">The connection to use for the query</param>
            <param name="selectFilter">A complete IPredicate implementing object which contains the filter for the rows to select. When set to null, no 
            filtering is done, and all rows are returned.</param>
            <param name="relationsToWalk">list of EntityRelation objects, which will be used to formulate a FROM clause with INNER JOINs.</param>
            <param name="allowDuplicates">Flag which forces the inclusion of DISTINCT if set to true. If the resultset contains fields of type ntext, text or image, no duplicate filtering
            is done.</param>
            <param name="groupByClause">The list of fields to group by on. When not specified or an empty collection is specified, no group by clause
            is added to the query. A check is performed for each field in the selectList. If a field in the selectList is not present in the groupByClause
            collection, an exception is thrown.</param>
            <returns>IRetrievalQuery instance which is ready to be used.</returns>
            <exception cref="T:System.ArgumentNullException">When selectList is null or fieldsPersistenceInfo is null</exception>
            <exception cref="T:System.ArgumentException">When selectList contains no EntityFieldCore instances or fieldsPersistenceInfo is empty.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.AppendGroupByClause(System.Text.StringBuilder,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Appends a GROUP BY clause to the query specified.
            </summary>
            <param name="queryText">query text currently being build</param>
            <param name="groupByClause">group by collection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.AppendOrderByClause(System.Text.StringBuilder,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Appends an ORDER BY clause to the query specified.
            </summary>
            <param name="queryText">query text currently being build</param>
            <param name="sortClauses">sort clauses collection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.ConstructFieldsToUpdateList(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Constructs the list of fields to update plus its corresponding fieldpersistenceinfo list.
            </summary>
            <param name="fields"></param>
            <param name="fieldsPersistenceInfo"></param>
            <param name="fieldsToUpdate">will be altered</param>
            <param name="persistenceInfoFieldsToUpdate">will be altered</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CheckIfFieldNeedsInsertAction(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Checks the if field needs insert action.
            </summary>
            <param name="field">Field.</param>
            <returns>true if the field needs to be included in the insert query. This is the case if the field is
            changed or not read only, or that it is linked to a supertype field (which indicates that the field will be receiving its value later)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CheckIfSortClausesAreInSelectList(System.Collections.Hashtable,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Checks the if fields in the sort clauses are in select list and returns true if so, otherwise false. 
            This check is used to determine if the DISTINCT marker has to be emitted or not.
            </summary>
            <param name="fieldNamesInSelectList">Field names in select list.</param>
            <param name="sortClauses">Sort clauses.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.DetermineFilterToUse(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Determines the filter to use.
            </summary>
            <param name="filter">Filter.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSubqueryConnectionClausesUpdate(System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection)">
            <summary>
            Produces a set of WHERE Clauses to use in the UPDATE queries which have filters spanning multiple entities.
            It produces updatedTableAlias.Field1 = relatedEntityTable.Field1 AND ... clauses for each relation updatedEntity is in.
            </summary>
            <param name="updatedEntity">The entity being updated. This entity is already in the relation list, and should be tied to
            entities inside the relation list</param>
            <param name="updatedTableAlias">Alias for updatedEntity. To use in the clauses</param>
            <param name="relationsToWalk">relations used in the query build up by caller</param>
            <returns>predicates to use in WHERE clause in subquery in mentioned update queries.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateSubqueryConnectionClausesDelete(System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection)">
            <summary>
            Produces a set of WHERE Clauses to use in the DELETE queries which have filters spanning multiple entities.
            It produces deleteTableAlias.Field1 = relatedEntityTable.Field1 AND ... clauses for each relation the table of the persistence info is in.
            </summary>
            <param name="deleteTable">name of table the caller is building the query for</param>
            <param name="deleteTableAlias">Alias for deleteTable. To use in the clauses</param>
            <param name="relationsToWalk">relations used in the query build up by caller</param>
            <returns>predicates to use in WHERE clause in subquery in mentioned delete queries.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.ResetCreator">
            <summary>
            Resets the creator object with a new one. Only used by DAO objects which keep a Dynamic Query Engine object alive.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateCommand">
            <summary>
            Creates a new IDbCommand object and initializes it
            </summary>
            <returns>ready to use IDbCommand object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CreateDbSpecificCreator">
            <summary>
            Creates a new IDbSpecificCreator and initializes it
            </summary>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.CommandTimeOut">
            <summary>
            Gets / sets the command time out (in seconds). This is a global setting, so every Command object created after you've set this
            property to a value will have that value as CommandTimeOut. Default is 30 seconds which is the ADO.NET default.
            Do not set this property by hand, use the selfservicing dbUtils class to do that for you.
            Adapter's DataAccessAdapter class has its own, per call, command timeout setting, which is recommended over this setting, which is global
            for all calls.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.Creator">
            <summary>
            Gets / sets creator
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.PerCallCatalogNameOverwrites">
            <summary>
            Gets / sets perCallCatalogNameOverwrites name pairs
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.DynamicQueryEngineBase.PerCallSchemaNameOverwrites">
            <summary>
            Gets / sets perCallSchemaNameOverwrites name pairs
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase">
            <summary>
            General Entity Base class, which is used to inherit the Entity classes from.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity">
            <summary>
            Interface used for all Entity classes, it's the interface implemented by the abstract base class which is used to derive every entity class from
            SelfServicing specific
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore">
            <summary>
            Interface used for as a base for all Entity classes
            Generic specific
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.SetRelatedEntityProperty(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Sets the related entity property to the entity specified. If the property is a collection, it will add the entity specified to that collection.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="entity">Entity to set as an related entity</param>
            <remarks>Used by prefetch path logic.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.FlagAsSaved">
            <summary>
            Method which will fire the AfterSave event to signal that this entity is persisted and refetched succesfully.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.RejectChanges">
            <summary>
            Will reject (and thus roll back) all changes made to the current set of the entity's EntityFields. It rolls back to the values they had before the
            edit cycle started.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.SetNewFieldValue(System.String,System.Object)">
            <summary>
            Sets the EntityField with the name fieldName to the new value value. Marks also the entityfields as dirty. Will refetch the complete entity's fields
            from the database if necessary (i.e. the entity is outofsync.).
            </summary>
            <param name="fieldName">Name of EntityField to set the new value of</param>
            <param name="value">Value to set</param>
            <returns>true if the value is actually set, false otherwise.</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same IEntityField.DataType as the field.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified has a size that is larger than the maximum size defined for the related column in the databas</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.SetNewFieldValue(System.Int32,System.Object)">
            <summary>
            Sets the EntityField on index fieldIndex to the new value value. Marks also the entityfields as dirty. Will refetch the complete entity's fields
            from the database if necessary (i.e. the entity is outofsync.).
            </summary>
            <param name="fieldIndex">Index of EntityField to set the new value of</param>
            <param name="value">Value to set</param>
            <returns>true if the value is actually set, false otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.GetCurrentFieldValue(System.Int32)">
            <summary>
            Gets the current value of the EntityField with the index fieldIndex. Will refetch the complete entity's fields
            from the database if necessary (i.e. the entity is outofsync.).
            </summary>
            <param name="fieldIndex">Index of EntityField to get the current value of</param>
            <returns>The current value of the EntityField specified</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityIsDeletedException">When the entity is marked as deleted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When fieldIndex is smaller than 0 or bigger than the amount of fields in the fields collection.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.FlagMeAsChanged">
            <summary>
            Routine which will flag all subscribers of the EntityContentsChanged event that this entity's contents is changed.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.GetHashCode">
            <summary>
            Overrides the GetHashCode routine. It will calculate a hashcode for this entity using the eXclusive OR of the 
            hashcodes of the primary key fields in this entity. That hashcode is returned. If no primary key fields are present,
            the hashcode of the base class is returned, which will not be unique.
            </summary>
            <returns>Hashcode for this entity object, based on its primary key field values</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.GetConcurrencyPredicate(SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType)">
            <summary>
            Creates the requested predicate of the type specified. If no IConcurrencyPredicateFactory instance is stored in this entity instance, null
            is returned.
            </summary>
            <param name="predicateTypeToCreate">The type of predicate to create</param>
            <returns>A ready to use predicate to use in the query to execute, or null/Nothing if no IConcurrencyPredicateFactory instance is present, 
            in which case the predicate is ignored</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.Validate">
            <summary>
            Validates the entity by calling a set IEntityValidator implementing object's Validate() method. If no IEntityValidator object is set
            true is returned.
            </summary>
            <returns>The result of IEntityValidator.Validate(this).</returns>
            <remarks>Called by save logic.</remarks>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityValidationException">If validation fails</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.SaveFields(System.String)">
            <summary>
            Saves the current set of fields under the name specified in an internal hashtable. All data inside the field objects is preserved.
            If there is already a set of fields saved under the name specified, that set of fields is overwritten.
            </summary>
            <param name="name">Name to store the fields under. Case sensitive</param>
            <remarks>Creates a deep copy of the fields object.</remarks>
            <exception cref="T:System.InvalidOperationException">when this method is called while the object is participating in a transaction.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.RollbackFields(System.String)">
            <summary>
            Replaces the current set of fields with the fields saved under the name specified. If no set of fields is found with the name specified
            an exception is thrown. Removes the entry after a succesful rollback.
            </summary>
            <param name="name">Name under which the fields are stored which have to replace the current set of fields. Case sensitive</param>
            <remarks>replaces the current set of fields with the set of fields saved under the name specified. The current set of fields, with all the
            data are lost after a succesful rollback.</remarks>
            <exception cref="T:System.ArgumentException">thrown when the name specified is not found.</exception>
            <exception cref="T:System.InvalidOperationException">when this method is called while the object is participating in a transaction.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.DiscardSavedFields">
            <summary>
            Removes all saved field sets from the internal hashtable, clearing up space. This method is also called when 
            an entity is saved.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.CheckIfIsSubTypeOf(System.Int32)">
            <summary>Determines whether this entity is a subType of the entity represented by the passed in enum value, which represents a value in the EntityType enum</summary>
            <param name="typeOfEntity">Type of entity.</param>
            <returns>true if the passed in type is a supertype of this entity, otherwise false</returns>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.EntityContentsChanged">
            <summary>
            Event handler declaration for the event that is fired each time the one of values of this entity are changed.
            The event does not contain the value / field which is changed, it only signals subscribers the entity is changed
            and the subscriber should act accordingly, f.e. fire a ListChanged event.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.AfterSave">
            <summary>
            Event handler declaration for the event that is fired each time this entity is persisted. Related entities can subscribe to
            this event to start housekeeping actions, like syncing internal FK fields with the PK fields of this entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.IsNew">
            <summary>
            Marker for the entity object if the object is new and should be inserted when saved (true) or read from the
            database (false).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.IsDirty">
            <summary>
            Marker for the entity object if the object is 'dirty' (changed, true) or not (false). Affects/reads .Fields.IsDirty.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.Validator">
            <summary>
            The validator object used to validate values for fields. This is a custom validator called after the build-in validations succeed.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.EntityValidatorToUse">
            <summary>
            The validator object used to validate the complete entity. Call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.Validate"/> to use this validator.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.ObjectID">
            <summary>
            Gets / sets the unique Object ID which is created at runtime when the entity is instantiated. Can be used for external caches.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.IsDeserializing">
            <summary>
            Returns true if this entity instance is in the middle of a deserialization process, for example during a ReadXml() call.
            For internal use only. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.ConcurrencyPredicateFactoryToUse">
            <summary>
            Gets / sets the IConcurrencyPredicateFactory to use for <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.GetConcurrencyPredicate(SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType)"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.PrimaryKeyFields">
            <summary>
            List of IEntityField references which form the primary key. Reads/Affects .Fields.PrimaryKeyFields
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.ActiveContext">
            <summary>
            Gets / sets the active context this entity is in. Setting this property is not adding the entity to the context, it will make contained
            entities be added to the passed in context. If the entity is already in a context, setting this property has no effect. 
            Setting this property is done by framework code, use the Context's Add/Get methods to work with contexts and entities.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore.LLBLGenProEntityTypeValue">
            <summary>
            Returns the EntityType enum value for this entity.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.SetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.String)">
            <summary>
            Sets the internal parameter related to the fieldname passed to the instance relatedEntity. 
            </summary>
            <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.UnsetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.String)">
            <summary>
            Unsets the internal parameter related to the fieldname passed to the instance relatedEntity. Reverses the actions taken by SetRelatedEntity() 
            </summary>
            <param name="relatedEntity">Instance to unset as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.GetDependingRelatedEntities">
            <summary>
            Gets a collection of related entities referenced by this entity which depend on this entity (this entity is the PK side of their FK fields). These
            entities will have to be persisted after this entity during a recursive save.
            </summary>
            <returns>Collection with 0 or more IEntity objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.GetDependentRelatedEntities">
            <summary>
            Gets a collection of related entities referenced by this entity which this entity depends on (this entity is the FK side of their PK fields). These
            entities will have to be persisted before this entity during a recursive save.
            </summary>
            <returns>Collection with 0 or more IEntity objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.GetMemberEntityCollections">
            <summary>
            Gets an ArrayList of all entity collections stored as member variables in this entity. The contents of the ArrayList is
            used by the Save logic to perform recursive saves. Only 1:n related collections are returned.
            </summary>
            <returns>Collection with 0 or more IEntityCollection objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.Save">
            <summary>
            Saves the Entity class to the persistent storage. It updates or inserts the entity, which depends if the entity was originally read from the 
            database. Will not recursively save internal dirty entities. 
            Uses, if applicable, the ConcurrencyPredicateFactory to supply the predicate to limit save activity.
            </summary>
            <returns>true if Save succeeded, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the save process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.Save(System.Boolean)">
            <summary>
            Saves the Entity class to the persistent storage. It updates or inserts the entity, which depends if the entity was originally read from the 
            database.
            Uses, if applicable, the ConcurrencyPredicateFactory to supply the predicate to limit save activity.
            </summary>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by this entity also.</param>
            <returns>true if Save succeeded, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the save process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.Save(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Saves the Entity class to the persistent storage. It updates or inserts the entity, which depends if the entity was originally read from the 
            database. If the entity is new, an insert is done and the updateRestriction is ignored. If the entity is not new, the updateRestriction
            predicate is used to create an additional where clause (it will be added with AND) for the update query. This predicate can be used for
            concurrency checks, like checks on timestamp column values. Will not recursively save internal dirty entities. 
            </summary>
            <param name="updateRestriction">Predicate expression, meant for concurrency checks in an Update query. Will be ignored when the entity is
            new. Overrules an optional set ConcurrencyPredicateFactory.</param>
            <returns>true if Save succeeded, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the save process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.Save(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            Saves the Entity class to the persistent storage. It updates or inserts the entity, which depends if the entity was originally read from the 
            database. If the entity is new, an insert is done and the updateRestriction is ignored. If the entity is not new, the updateRestriction
            predicate is used to create an additional where clause (it will be added with AND) for the update query. This predicate can be used for
            concurrency checks, like checks on timestamp column values.
            </summary>
            <param name="updateRestriction">Predicate expression, meant for concurrency checks in an Update query. Will be ignored when the entity is
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by this entity also.</param>
            new. Overrules an optional set ConcurrencyPredicateFactory.</param>
            <returns>true if Save succeeded, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the save process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.Delete">
            <summary>
            Deletes the Entity from the persistent storage. This method succeeds also when the Entity is not present.
            Uses, if applicable, the ConcurrencyPredicateFactory to supply the predicate to limit delete activity.
            </summary>
            <returns>true if Delete succeeded, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the delete process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.Delete(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Deletes the Entity from the persistent storage. This method succeeds also when the Entity is not present.
            </summary>
            <param name="deleteRestriction">Predicate expression, meant for concurrency checks in a delete query. Overrules the predicate returned
            by a set ConcurrencyPredicateFactory object.</param>
            <returns>true if Delete succeeded, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the delete process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.Refetch">
            <summary>
            Refetches the Entity from the persistent storage. Refetch is used to re-load an Entity which is marked "Out-of-sync", due to a save action. 
            Refetching an empty Entity has no effect.
            </summary>
            <returns>true if Refetch succeeded, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the save process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.ToXml">
            <summary>
            Converts the EntityFields inside this entity into an EntityFields node with inner nodes for each field.
            </summary>
            <returns>XmlNode containing the EntityFields in xml format</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.WriteXml(System.String@)">
            <summary>
            Converts the data inside inside this entity into XML, recursively. 
            </summary>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.WriteXml(System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts the data inside inside this entity into XML, recursively. 
            </summary>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.WriteXml(System.String,System.String@)">
            <summary>
            Converts the data inside inside this entity into XML, recursively.
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.WriteXml(System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts the data inside inside this entity into XML, recursively.
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.ReadXml(System.Xml.XmlNode)">
            <summary>
            Will fill the entity and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntity.WriteXml() and the Xml has to be compatible with the structure of this entity.
            </summary>
            <param name="node">XmlNode with Xml data which should be read into this entity and its members. Node's root element is the root element
            of the entity's Xml data</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.ReadXml(System.String)">
            <summary>
            Will fill the entity and its containing members (recursively) with the data stored in the Xml string passed in. The string xmlData has to
            be filled with Xml in the format written by IEntity.WriteXml() and the Xml has to be compatible with the structure of this entity.
            </summary>
            <param name="xmlData">string with Xml data which should be read into this entity and its members. This string has to be in the
            correct format and should be loadable into a new XmlDocument without problems</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.Fields">
            <summary>
            The internal presentation of the data, which is an EntityFields object, which implements <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.EntityFactoryToUse">
            <summary>
            The EntityFactory to use when creating entity objects during a GetSingle*() call.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntity.IsSerializing">
            <summary>
            Returns true if this entity instance is in the middle of a serialization process, for example during a WriteXml() call.
            For internal use only. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement">
            <summary>
            Interface which is necessary for the Transaction class. Every class which has to be controlled by a Transaction object
            has to implement this interface. Examples are: an Entity class and an Entity Collection Class.
            SelfServicing specific
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement.TransactionCommit">
            <summary>
            When the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> in which this element participates is commited, this element can succesfully finish actions performed by this
            element. This method is called by <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/>, you should not call it by yourself. When this element doesn't participate in a
            transaction it finishes the actions itself, calling this method is not needed.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement.TransactionRollback">
            <summary>
            When the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> in which this element participates is rolled back, this element has to roll back its internal variables.
            This method is called by <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/>, you should not call it by yourself. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement.Transaction">
            <summary>
            The <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> this ITransactionalElement implementing object is participating in. Only valid if
            <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement.ParticipatesInTransaction"/> is true. If set to null, the ITransactionalElement is no longer participating
            in a transaction.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement.ParticipatesInTransaction">
            <summary>
            Flag to check if the ITransactionalElement implementing object is participating in a transaction or not.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IValidatable">
            <summary>
            interface for marking an object validatable. This interface is implemented in EntityBase and EntityBase2, so you can pass these objects
            to a method which handles IValidatable objects. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IValidatable.Validate">
            <summary>
            Validates the implementing object. The LLBLGen Pro implementation does this by calling a set IEntityValidator implementing object's 
            Validate() method. If no IEntityValidator object is set true is returned.
            </summary>
            <returns>The result of IEntityValidator.Validate(this).</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityValidationException">If validation fails</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Private CTor for deserialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.FlagAsSaved">
            <summary>
            Method which will fire the AfterSave event to signal that this entity is persisted and refetched succesfully.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ToXml">
            <summary>
            Converts the EntityFields inside this entity into an EntityFields node with inner nodes for each field.
            </summary>
            <returns>XmlNode containing the EntityFields in xml format</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity to XML, recursively. Uses the LLBLGenProEntityName for the rootnode name
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.String@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.WriteXml(System.String@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.WriteXml(System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity to XML, recursively. Uses the LLBLGenProEntityName for the rootnode name
            </summary>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.WriteXml(System.String,System.String@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.WriteXml(System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Entity2Xml(System.String,System.Xml.XmlDocument,System.Collections.Hashtable,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlNode@)">
            <summary>
            Produces the actual XML for this entity, recursively. Because it recurses through referenced entities, it keeps track of which objects are processed
            so cyclic references are not resulting in cyclic recursion and thus a crash. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="processedObjectIDs">Hashtable with ObjectIDs of all the objects already processed. If this entity's ObjectID is in the
            hashtable's key list, a ProcessedObjectReference tag is emitted and the routine simply returns. </param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ReadXml(System.String)">
            <summary>
            Will fill the entity and its containing members (recursively) with the data stored in the Xml string passed in. The string xmlData has to
            be filled with Xml in the format written by IEntity.WriteXml() and the Xml has to be compatible with the structure of this entity.
            </summary>
            <param name="xmlData">string with Xml data which should be read into this entity and its members. This string has to be in the
            correct format and should be loadable into a new XmlDocument without problems</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ReadXml(System.Xml.XmlNode)">
            <summary>
            Will fill the entity and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntity.WriteXml() and the Xml has to be compatible with the structure of this entity.
            </summary>
            <param name="node">XmlNode with Xml data which should be read into this entity and its members. Node's root element is the root element
            of the entity's Xml data</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Xml2Entity(System.Xml.XmlNode,System.Collections.Hashtable,System.Collections.ArrayList)">
            <summary>
            Performs the actual conversion from Xml to entity data. 
            </summary>
            <param name="node">current node which points to an entity node.</param>
            <param name="processedObjectIDs">ObjectID's of all entities instantiated</param>
            <param name="nodeEntityReferences">Arraylist with all the references to entity objects we probably do not yet have instantiated. This list
            is traversed after the xml tree has been processed. (not done by this routine, but by the caller)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetHashCode">
            <summary>
            Overrides the GetHashCode routine. It will calculate a hashcode for this entity using the eXclusive OR of the 
            hashcodes of the primary key fields in this entity. That hashcode is returned. If no primary key fields are present,
            the hashcode of the base class is returned, which will not be unique.
            </summary>
            <returns>Hashcode for this entity object, based on its primary key field values</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Validate">
            <summary>
            Validates the entity by calling a set IEntityValidator implementing object's Validate() method. If no IEntityValidator object is set
            true is returned.
            </summary>
            <returns>The result of IEntityValidator.Validate(this).</returns>
            <remarks>Called by save logic.</remarks>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityValidationException">If validation fails</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ToXml(System.String)">
            <summary>
            Converts the EntityFields inside this entity into an EntityFields node with inner nodes for each field.
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <returns>a complete xml representation for this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.FlagMeAsChanged">
            <summary>
            Routine which will flag all subscribers of the EntityContentsChanged event that this entity's contents is changed.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CheckForRefetch">
            <summary>
            Will check if the entity should refetch itself. Will use the factory pattern trick.
            Refetching occurs when the EntityFields are marked OutOfSync and thus not dirty. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Save">
            <summary>
            Saves the Entity class to the persistent storage. It updates or inserts the entity, which depends if the entity was originally read from the 
            database. Will not recursively save internal dirty entities. 
            Uses, if applicable, the ConcurrencyPredicateFactory to supply the predicate to limit save activity.
            </summary>
            <returns>true if Save succeeded, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the save process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Save(System.Boolean)">
            <summary>
            Saves the Entity class to the persistent storage. It updates or inserts the entity, which depends if the entity was originally read from the 
            database. Uses, if applicable, the ConcurrencyPredicateFactory to supply the predicate to limit save activity.
            </summary>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by this entity also.</param>
            <returns>true if Save succeeded, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the save process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Save(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Saves the Entity class to the persistent storage. It updates or inserts the entity, which depends if the entity was originally read from the 
            database. If the entity is new, an insert is done and the updateRestriction is ignored. If the entity is not new, the updateRestriction
            predicate is used to create an additional where clause (it will be added with AND) for the update query. This predicate can be used for
            concurrency checks, like checks on timestamp column values. Will not recursively save internal dirty entities. 
            </summary>
            <param name="updateRestriction">Predicate expression, meant for concurrency checks in an Update query. Will be ignored when the entity is
            new. Overrules an optional set ConcurrencyPredicateFactory.</param>
            <returns>true if Save succeeded, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the save process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Save(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            Saves the Entity class to the persistent storage. It updates or inserts the entity, which depends if the entity was originally read from the 
            database. If the entity is new, an insert is done and the updateRestriction is ignored. If the entity is not new, the updateRestriction
            predicate is used to create an additional where clause (it will be added with AND) for the update query. This predicate can be used for
            concurrency checks, like checks on timestamp column values.
            </summary>
            <param name="updateRestriction">Predicate expression, meant for concurrency checks in an Update query. Will be ignored when the entity is
            new. Overrules an optional set ConcurrencyPredicateFactory.</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by this entity also.</param>
            <returns>true if Save succeeded, false otherwise</returns>
            <remarks>Do not call this routine directly, use the overloaded version in a derived class as this version doesn't construct a
            local transaction during recursive save, this is done in the overloaded version in a derived class.</remarks>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the save process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.RejectChanges">
            <summary>
            Will reject (and thus roll back) all changes made to the current set of the entity's EntityFields. It rolls back to the values they had before the
            edit cycle started.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.TransactionCommit">
            <summary>
            When the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> in which this IEntity participates is commited, this IEntity can succesfully finish actions performed by this
            IEntity. This method is called by <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/>, you should not call it by yourself. When this IEntity doesn't participate in a
            transaction it finishes the actions itself, calling this method is not needed.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.TransactionRollback">
            <summary>
            When the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> in which this IEntity participates is rolled back, this IEntity has to roll back its internal variables.
            This method is called by <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/>, you should not call it by yourself. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Equals(System.Object)">
            <summary>
            Compares passed in object with the given object. This is a compare of PK fields. These have to be the same in VALUES. 
            When the values are not the same, or the type is not the same as the current type, false is returned, true otherwise.
            When this doesn't have any PK fields, all fields are compared. null values are considered as the same value. 
            </summary>
            <param name="obj">IEntity implementing object of the same type as this which will be compared to the PK values of this. </param>
            <returns>True when the PK values of this are the same as the PK values of obj, or when this doesn't have any PK fields, all fields
            have the same value as obj's fields. False otherwise.</returns>
            <remarks>If this entity or the passed in entity is new, no values are compared, but the physical objects are compared (object.Equals()),
            because new entities can look the same, value wise due to identity fields which are all 0, however which are physical different entities 
            (object wise)</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Delete">
            <summary>
            Deletes the Entity from the persistent storage. This method succeeds also when the Entity is not present.
            Uses, if applicable, the ConcurrencyPredicateFactory to supply the predicate to limit delete activity.
            </summary>
            <returns>true if Delete succeeded, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the delete process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Delete(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Deletes the Entity from the persistent storage. This method succeeds also when the Entity is not present.
            </summary>
            <param name="deleteRestriction">Predicate expression, meant for concurrency checks in a delete query. Overrules the predicate returned
            by a set ConcurrencyPredicateFactory object.</param>
            <returns>true if Delete succeeded, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">When an exception is caught during the delete process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable member. Does custom serialization so event handlers do not get serialized.
            </summary>
            <param name="info">See ISerializable</param>
            <param name="context">See ISerialilzable</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetConcurrencyPredicate(SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType)">
            <summary>
            Creates the requested predicate of the type specified. If no IConcurrencyPredicateFactory instance is stored in this entity instance, null
            is returned.
            </summary>
            <param name="predicateTypeToCreate">The type of predicate to create</param>
            <returns>A ready to use predicate to use in the query to execute, or null/Nothing if no IConcurrencyPredicateFactory instance is present, 
            in which case the predicate is ignored</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetCurrentFieldValue(System.Int32)">
            <summary>
            Gets the current value of the EntityField with the index fieldIndex. Will refetch the complete entity's fields
            from the database if necessary (i.e. the entity is outofsync.).
            </summary>
            <param name="fieldIndex">Index of EntityField to get the current value of</param>
            <returns>The current value of the EntityField specified</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityIsDeletedException">When the entity is marked as deleted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When fieldIndex is smaller than 0 or bigger than the amount of fields in the fields collection.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.EndEdit">
            <summary>
            IEditableObject method. Used by databinding.
            A succesful edit has been performed. All new values have to be moved to the current value slots.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CancelEdit">
            <summary>
            IEditableObject method. Used by databinding.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.BeginEdit">
            <summary>
            IEditableObject method. Used by databinding.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetNewFieldValue(System.String,System.Object)">
            <summary>
            Sets the EntityField with the name fieldName to the new value value. Marks also the entityfields as dirty. Will refetch the complete entity's fields
            from the database if necessary (i.e. the entity is outofsync.).
            </summary>
            <param name="fieldName">Name of EntityField to set the new value of</param>
            <param name="value">Value to set</param>
            <returns>true if the value is actually set, false otherwise.</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same IEntityField.DataType as the field.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified has a size that is larger than the maximum size defined for the related column in the databas</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetNewFieldValue(System.Int32,System.Object)">
            <summary>
            Sets the EntityField on index fieldIndex to the new value value. Marks also the entityfields as dirty. Will refetch the complete entity's fields
            from the database if necessary (i.e. the entity is outofsync.).
            </summary>
            <param name="fieldIndex">Index of EntityField to set the new value of</param>
            <param name="value">Value to set</param>
            <returns>true if the value is actually set, false otherwise.</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same IEntityField.DataType as the field.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified has a size that is larger than the maximum size defined for the related column in the database
            or the index passed in is not in the fields range of valid indexes.</exception> 
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetNewFieldValue(System.Int32,System.Object,System.Boolean)">
            <summary>
            Sets the EntityField on index fieldIndex to the new value value. Marks also the entityfields as dirty. Will refetch the complete entity's fields
            from the database if necessary (i.e. the entity is outofsync.).
            </summary>
            <param name="fieldIndex">Index of EntityField to set the new value of</param>
            <param name="value">Value to set</param>
            <param name="checkForRefetch">If set to true, it will check if this entity is out of sync and will refetch it first if it is. Use true in normal
            behavior, false for framework specific code.</param>
            <returns>true if the value is actually set, false otherwise.</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same IEntityField.DataType as the field.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified has a size that is larger than the maximum size defined for the related column in the database
            or the index passed in is not in the fields range of valid indexes.</exception> 
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetNewFieldValue(System.Int32,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Sets the EntityField on index fieldIndex to the new value value. Marks also the entityfields as dirty. Will refetch the complete entity's fields
            from the database if necessary (i.e. the entity is outofsync.).
            </summary>
            <param name="fieldIndex">Index of EntityField to set the new value of</param>
            <param name="value">Value to set</param>
            <param name="checkForRefetch">If set to true, it will check if this entity is out of sync and will refetch it first if it is. Use true in normal
            behavior, false for framework specific code.</param>
            <param name="fireChangeEvent">if set to true, the change event is fired if the value is set, if applicable. 
            If set to false, the caller is responsible for calling the change event mechanism, recommended is then: PostFieldValueSetAction()</param>
            <returns>true if the value is actually set, false otherwise.</returns>
            <remarks>This method is used by templates released first on 26-may-2005, hence the 'protected' modifier</remarks>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same IEntityField.DataType as the field.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified has a size that is larger than the maximum size defined for the related column in the database
            or the index passed in is not in the fields range of valid indexes.</exception> 
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SaveFields(System.String)">
            <summary>
            Saves the current set of fields under the name specified in an internal hashtable. All data inside the field objects is preserved.
            If there is already a set of fields saved under the name specified, that set of fields is overwritten.
            </summary>
            <param name="name">Name to store the fields under. Case sensitive</param>
            <remarks>Creates a deep copy of the fields object.</remarks>
            <exception cref="T:System.InvalidOperationException">when this method is called while the object is participating in a transaction.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.RollbackFields(System.String)">
            <summary>
            Replaces the current set of fields with the fields saved under the name specified. If no set of fields is found with the name specified
            an exception is thrown. Removes the entry after a succesful rollback.
            </summary>
            <param name="name">Name under which the fields are stored which have to replace the current set of fields. Case sensitive</param>
            <remarks>replaces the current set of fields with the set of fields saved under the name specified. The current set of fields, with all the
            data are lost after a succesful rollback.</remarks>
            <exception cref="T:System.ArgumentException">thrown when the name specified is not found.</exception>
            <exception cref="T:System.InvalidOperationException">when this method is called while the object is participating in a transaction.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.DiscardSavedFields">
            <summary>
            Removes all saved field sets from the internal hashtable, clearing up space. This method is also called when 
            an entity is saved.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CheckIfIsSubTypeOf(System.Int32)">
            <summary>Determines whether this entity is a subType of the entity represented by the passed in enum value, which represents a value in the EntityType enum</summary>
            <param name="typeOfEntity">Type of entity.</param>
            <returns>true if the passed in type is a supertype of this entity, otherwise false</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Refetch">
            <summary>
            Refetches the Entity from the persistent storage. Refetch is used to re-load an Entity which is marked "Out-of-sync", due to a save action. 
            Refetching an empty Entity has no effect.
            </summary>
            <returns>true if Refetch succeeded, false otherwise</returns>
            <exception cref="T:System.ApplicationException">When an exception is caught during the save process. The caught exception is set as the
            inner exception. Encapsulation of database-related exceptions is necessary since these exceptions do not have a common exception framework
            implemented.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.InsertEntity">
            <summary>
            Performs the insert action of a new Entity to the persistent storage.
            </summary>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.UpdateEntity">
            <summary>
            Performs the update action of an existing Entity to the persistent storage.
            </summary>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.UpdateEntity(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Performs the update action of an existing Entity to the persistent storage.
            </summary>
            <param name="updateRestriction">Predicate expression, meant for concurrency checks in an Update query</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.String)">
            <summary>
            Sets the internal parameter related to the fieldname passed to the instance relatedEntity. 
            </summary>
            <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.UnsetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.String)">
            <summary>
            Unsets the internal parameter related to the fieldname passed to the instance relatedEntity. Reverses the actions taken by SetRelatedEntity() 
            </summary>
            <param name="relatedEntity">Instance to unset as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetDependingRelatedEntities">
            <summary>
            Gets a collection of related entities referenced by this entity which depend on this entity (this entity is the PK side of their FK fields). These
            entities will have to be persisted after this entity during a recursive save.
            </summary>
            <returns>Collection with 0 or more IEntity objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetDependentRelatedEntities">
            <summary>
            Gets a collection of related entities referenced by this entity which this entity depends on (this entity is the FK side of their PK fields). These
            entities will have to be persisted before this entity during a recursive save.
            </summary>
            <returns>Collection with 0 or more IEntity objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetMemberEntityCollections">
            <summary>
            Gets an ArrayList of all entity collections stored as member variables in this entity. The contents of the ArrayList is
            used by the Save logic to perform recursive saves. Only 1:n related collections are returned.
            </summary>
            <returns>Collection with 0 or more IEntityCollection objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetRelatedEntityProperty(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Sets the related entity property to the entity specified. If the property is a collection, it will add the entity specified to that collection.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="entity">Entity to set as an related entity</param>
            <remarks>Used by prefetch path logic.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CreateDAOInstance">
            <summary>
            Creates the DAO instance for this type
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CreateEntityFactoryInstance">
            <summary>
            Creates the entity factory for this type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CheckIfCurrentFieldValueIsNull(System.Int32)">
            <summary>
            Checks if the current value of the field on the index specified is null / not defined. 
            </summary>
            <param name="fieldIndex">Index of the field.</param>
            <returns>true if the field's value isn't defined yet, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetInheritanceInfo">
            <summary>
            Gets the inheritance info for this entity, if applicable (it's then overriden) or null if not.
            </summary>
            <returns>InheritanceInfo object if this entity is in a hierarchy of type TargetPerEntity, or null otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.AddInternalsToContext">
            <summary>
            Adds the internals to context. No-op in base class, overriden in generated code.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.FlagAllFieldsAsChanged">
            <summary>
            A method which is overriden in the generated classes to call all OnFieldnameChanged methods to signal that the field has been changed
            to bound controls. This is required after a RollbackFields() call.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnFieldValidate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField)">
            <summary>
            Called when a field is about to be validated, first by the build in checks, then by the custom field validators.
            </summary>
            <param name="field">Field which is about to be validated</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnSave">
            <summary>
            Called right before the entity's save logic is started. This is right after all entities this entity depends on are saved succesfully.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnSaveComplete">
            <summary>
            Called after the entity's save routine is finished.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnDelete">
            <summary>
            Called right before the entity's Delete logic is started. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnDeleteComplete">
            <summary>
            Called after the entity's delete routine is finished.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnFetch">
            <summary>
            Called right before the entity's Fetch logic is started. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnFetchComplete">
            <summary>
            Called after the entity's Fetch routine is finished.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnFieldValidateComplete(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Boolean)">
            <summary>
            Called when a field's validation has been completed. The validation result is passed in as well.
            </summary>
            <param name="field">Field which is about to be validated</param>
            <param name="validationResult">Validation result</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnTransactionCommit">
            <summary>
            Called after the TransactionCommit routine has been finished.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnTransactionRollback">
            <summary>
            Called after the TransactionRollback routine has been finished.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnBeginEdit">
            <summary>
            Called after BeginEdit is succesfully called.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnEndEdit">
            <summary>
            Called after EndEdit is succesfully called.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnCancelEdit">
            <summary>
            Called after CancelEdit is succesfully called.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.PostFieldValueSetAction(System.Boolean)">
            <summary>
            Method to perform post-fieldvalue set actions, like flagging this object as changed. 
            This code was previously part of SetNewFieldValue, but the timing to fire the changed event was then not controllable.
            </summary>
            <param name="fieldValueSet">Field value set flag. If false, nothing happens in this method.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SyncFKFields(SD.LLBLGen.Pro.ORMSupportClasses.EntitySyncInfoSS)">
            <summary>
            Synchronizes the PK values of the dataSupplier with the related FK values of this entity.
            </summary>
            <param name="syncInfo">Sync info with the information which to synch with what.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.OnEntityAfterSave(System.Object,System.EventArgs)">
            <summary> Event handler which is called by a related entity after that entity is persisted.</summary>
            <param name="sender">IEntity instance</param>
            <param name="e"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetEntitySyncInformation(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Will retrieve all stored entity synchronization information for the passed in entity. If no information is
            stored, an empty hashtable is returned. All sync info is stored by fieldname
            </summary>
            <param name="relatedEntity">related entity to retrieve the sync info for</param>
            <returns>Hashtable with the sync info, stored per fieldname, set for this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.UnsetEntitySyncInformation(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Will unset (remove) the passed in information as Entity sync information. If there is no sync information stored for the related entity
            after this info has been removed, the complete hashentry is removed.
            </summary>
            <param name="fieldName">Name of field of this entity mapped onto passed in relation</param>
            <param name="relatedEntity">related entity set as value for field with name fieldName</param>
            <param name="relation">EntityRelation object which is the relation between this entity and the passed in relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetEntitySyncInformation(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Will set the passed in information as Entity sync information. If there is no sync information stored yet for the related entity
            then a new entry is created, otherwise it's info is added to the sync information of this entity, if it isn't already present.
            If there is already sync information for this field stored for another related entity, that information is removed.
            </summary>
            <param name="fieldName">Name of field of this entity mapped onto passed in relation</param>
            <param name="relatedEntity">related entity set as value for field with name fieldName</param>
            <param name="relation">EntityRelation object which is the relation between this entity and the passed in relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallOnFetchComplete">
            <summary>
            Calls the OnFetchComplete routine, which is a protected routine. This method is used by the DaoBase multi-entity fetch logic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallOnSave">
            <summary>
            Calls the OnSave routine, which is a protected routine. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallOnSaveComplete">
            <summary>
            Calls the OnSaveComplete routine, which is a protected routine. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallInsertEntity">
            <summary>
            Calls the insert entity.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallUpdateEntity">
            <summary>
            Calls the update entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.CallUpdateEntity(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Calls the update entity.
            </summary>
            <param name="updateRestriction">Update restriction.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetEntityDescription(System.Boolean)">
            <summary>
            Gets the entity description. This string is used in verbose trace messages.
            It will produce "EntityBase", if the passed in switch flag is false, to prevent performance loss due to
            reflection activity for trace results which will never be seen.
            </summary>
            <param name="switchFlag">switch flag. If this flag is false, "EntityBase" will be returned</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetEntityDescription(System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Gets the entity description. This string is used in verbose trace messages.
            It will produce "EntityBase", if verbose tracing is switched off for the GeneralSwitch, to prevent performance loss due to
            reflection activity for trace results which will never be seen.
            </summary>
            <param name="switchFlag">switch flag. If this flag is false, "EntityBase" will be returned</param>
            <param name="entity">the entity to get the description for</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetInheritanceHierarchyType">
            <summary>
            Gets the type of the inheritance hierarchy this entity is in.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.DetermineIfDependentInProgress(System.Collections.ArrayList)">
            <summary>
            Checks if an entity's ObjectID stored in the collection passed in is already in progress in the active transaction. If so, it
            will return true, otherwise false.
            </summary>
            <param name="dependentEntitiesToCheck">entities to check</param>
            <returns>true if an entity in the passed in collection is also in _participantsInProgress</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.DetermineIfDependentIsPostponed(System.Collections.ArrayList)">
            <summary>
            Checks if an entity's ObjectID stored in the collection passed in is postponed in the active transaction. If so, it
            will return true, otherwise false.
            </summary>
            <param name="dependentEntitiesToCheck">entities to check</param>
            <returns>true if an entity in the passed in collection is also in _postponedParticipantObjectIds</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.RemoveEntitiesAlreadyInTransaction(System.Collections.ArrayList)">
            <summary>
            Removes entities already in the transaction from the passed in list. This verify is done by comparing GUID
            values with the _containingTransaction.EntitiesInTransaction collection. 
            </summary>
            <param name="containedDirtyEntities">List of dirty entities which are possible targets to save. All entities
            already participating in this transaction are removed from this list, because this can cause circles in the recursion</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ValidateValue(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Object,System.Int32)">
            <summary>
            Validates the input variable if it is a valid value for the target table field related to the passed in EntityField fieldToValidate.
            </summary>
            <param name="fieldToValidate">EntityField which is the destination of the value to validate</param>
            <param name="value">Value to validate</param>
            <param name="fieldIndex">The index of ValueDestination in the EntityFields array.</param>
            <returns>true if the value is valid, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same IEntityField.DataType as ValueDestination field.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified has a size that is larger than the maximum size defined for the related column in the databas</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ValidateValueCustom(System.Int32,System.Object)">
            <summary>
            Method which will validate, using custom code supplied this class, the field with index fieldIndex if it should accept
            the specified value. This routine is only called when standard checks already succeeded, so value isn't null, and value does match the
            destination column definition of the EntityField related to fieldIndex.
            </summary>
            <param name="fieldIndex">Index of field to validate</param>
            <param name="value">value to validate</param>
            <returns>True if the validation succeeded, false otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.TransactionStart">
            <summary>
            Called when this Entity is added to a transaction object. This routine make sure all data currently inside the entity can be
            recovered when the transaction is rolled back.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.InitClass">
            <summary>
            Initializes the class' members
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Constructs the XML output from the object graph which has this object as the root. 
            </summary>
            <param name="writer">Writer to which the xml is written to</param>
            <remarks>Uses XmlFormatAspect.Compact | XmlFormatAspect.MLTextInCDataBlocks | XmlFormatAspect.DatesInXmlDataType.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetSchema">
            <summary>
            Produce the schema, always return null, as the XmlSerializer object otherwise can't handle our code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ReadXml(System.Xml.XmlReader)">
            <summary>
            Constructs an object graph with this object as the root from the xml contained by the passed in XmlReader object.
            </summary>
            <param name="reader">Reader with xml used to produce an object graph</param>
            <remarks>Uses XmlFormatAspect.Compact | XmlFormatAspect.MLTextInCDataBlocks | XmlFormatAspect.DatesInXmlDataType. Xml data should have been
            produced with WriteXml(writer) or a similar routine which is able to produce similar formatted XML</remarks>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.EntityContentsChanged">
            <summary>
            Event handler declaration for the event that is fired each time the one of values of this entity are changed.
            The event does not contain the value / field which is changed, it only signals subscribers the entity is changed
            and the subscriber should act accordingly, f.e. fire a ListChanged event.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.AfterSave">
            <summary>
            Event handler declaration for the event that is fired each time this entity is persisted. Related entities can subscribe to
            this event to start housekeeping actions, like syncing internal FK fields with the PK fields of this entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.HasPendingFkSyncs">
            <summary>
            Gets a value indicating whether this instance has pending fk syncs. A pending FK sync is a sync which hasn't been used yet. 
            If an entity has pending FK syncs, it has to be included into a save queue. 
            </summary>
            <value>
            	<see langword="true"/> if this instance has pending fk syncs; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.IsNewViaDataBinding">
            <summary>
            Gets / sets isAddedViaDataBinding. Databinding related.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ParentCollection">
            <summary>
            Gets / sets parentCollection. databinding related.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Validator">
            <summary>
            The validator object used to validate values for fields. This is a custom validator called after the build-in validations succeed.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Fields">
            <summary>
            The internal presentation of the data, which is an EntityFields object, which implements <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.IsNew">
            <summary>
            Marker for the entity object if the object is new and should be inserted when saved (true) or read from the
            database (false).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Transaction">
            <summary>
            The <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> this ITransactionalElement implementing object is participating in. Only valid if
            <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ParticipatesInTransaction"/> is true. If set to null, the ITransactionalElement is no longer participating
            in a transaction.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ParticipatesInTransaction">
            <summary>
            Flag to check if the ITransactionalElement implementing object is participating in a transaction or not.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.EntityFactoryToUse">
            <summary>
            The EntityFactory to use when creating entity objects during a GetMulti() call.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ObjectID">
            <summary>
            Gets / sets the unique Object ID which is created at runtime when the entity is instantiated. Can be used for external caches.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.IsDeserializing">
            <summary>
            Returns true if this entity instance is in the middle of a deserialization process, for example during a ReadXml() call.
            For internal use only. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.IsSerializing">
            <summary>
            Returns true if this entity instance is in the middle of a Serialization process, for example during a WriteXml() call.
            For internal use only. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ConcurrencyPredicateFactoryToUse">
            <summary>
            Gets / sets the IConcurrencyPredicateFactory to use for <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.GetConcurrencyPredicate(SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType)"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.EntityValidatorToUse">
            <summary>
            The validator object used to validate the complete entity. Call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.Validate"/> to use this validator.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.IsDirty">
            <summary>
            Marker for the entity object if the object is 'dirty' (changed, true) or not (false). Affects/reads .Fields.IsDirty.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.PrimaryKeyFields">
            <summary>
            List of IEntityField references which form the primary key. Reads/Affects .Fields.PrimaryKeyFields
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.ActiveContext">
            <summary>
            Gets / sets the active context this entity is in. Setting this property is not adding the entity to the context, it will make contained
            entities be added to the passed in context. If the entity is already in a context, setting this property has no effect. 
            Setting this property is done by framework code, use the Context's Add/Get methods to work with contexts and entities.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.LLBLGenProIsInHierarchyOfType">
            <summary>
            Gets the type of the hierarchy this entity is in. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.LLBLGenProIsSubType">
            <summary>
            Gets or sets a value indicating whether this entity is a subtype
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.LLBLGenProEntityTypeValue">
            <summary>
            Returns the EntityType enum value for this entity.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2">
            <summary>
            General Entity Base class, which is used to inherit the Entity classes from. Used in the Adapter template set.
            This entity does not have any persistence info on board.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2">
            <summary>
            Interface used for all Entity2 classes 
            Adapter specific
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.SetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.String)">
            <summary>
            Sets the internal parameter related to the fieldname passed to the instance relatedEntity. 
            </summary>
            <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.UnsetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.String)">
            <summary>
            Unsets the internal parameter related to the fieldname passed to the instance relatedEntity. Reverses the actions taken by SetRelatedEntity() 
            </summary>
            <param name="relatedEntity">Instance to unset as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.GetDependingRelatedEntities">
            <summary>
            Gets a collection of related entities referenced by this entity which depend on this entity (this entity is the PK side of their FK fields). These
            entities will have to be persisted after this entity during a recursive save.
            </summary>
            <returns>Collection with 0 or more IEntity2 objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.GetDependentRelatedEntities">
            <summary>
            Gets a collection of related entities referenced by this entity which this entity depends on (this entity is the FK side of their PK fields). These
            entities will have to be persisted before this entity during a recursive save.
            </summary>
            <returns>Collection with 0 or more IEntity2 objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.GetMemberEntityCollections">
            <summary>
            Gets an ArrayList of all entity collections stored as member variables in this entity. The contents of the ArrayList is
            used by the DataAccessAdapter to perform recursive saves. Only 1:n related collections are returned.
            </summary>
            <returns>Collection with 0 or more IEntityCollection2 objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.WriteXml(System.String@)">
            <summary>
            Converts the data inside inside this entity into XML, recursively. Uses the LLBLGenProEntityName for the rootnode name
            </summary>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.WriteXml(System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts the data inside inside this entity into XML, recursively. Uses the LLBLGenProEntityName for the rootnode name
            </summary>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.WriteXml(System.String,System.String@)">
            <summary>
            Converts the data inside inside this entity into XML, recursively.
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.WriteXml(System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts the data inside inside this entity into XML, recursively.
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.ReadXml(System.Xml.XmlNode)">
            <summary>
            Will fill the entity and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntity2.WriteXml() and the Xml has to be compatible with the structure of this entity.
            </summary>
            <param name="node">XmlNode with Xml data which should be read into this entity and its members. Node's root element is the root element
            of the entity's Xml data</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.ReadXml(System.String)">
            <summary>
            Will fill the entity and its containing members (recursively) with the data stored in the Xml string passed in. The string xmlData has to
            be filled with Xml in the format written by IEntity2.WriteXml() and the Xml has to be compatible with the structure of this entity.
            </summary>
            <param name="xmlData">string with Xml data which should be read into this entity and its members. This string has to be in the
            correct format and should be loadable into a new XmlDocument without problems</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.Fields">
            <summary>
            The internal presentation of the data, which is an EntityFields2 object, which implements <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2.LLBLGenProEntityName">
            <summary>
            Returns the full name for this entity, which is important for the DAO to find back persistence info for this entity.
            </summary>
            <example>CustomerEntity</example>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="name">The full name for this entity, which is important for the DAO to find back persistence info for this entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Private CTor for deserialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.FlagAsSaved">
            <summary>
            Method which will fire the AfterSave event to signal that this entity is persisted and refetched succesfully.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetHashCode">
            <summary>
            Overrides the GetHashCode routine. It will calculate a hashcode for this entity using the eXclusive OR of the 
            hashcodes of the primary key fields in this entity. That hashcode is returned. If no primary key fields are present,
            the hashcode of the base class is returned, which will not be unique.
            </summary>
            <returns>Hashcode for this entity object, based on its primary key field values</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String@)">
            <summary>
            Converts this entity to XML, recursively. Uses the LLBLGenProEntityName for the rootnode name
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity to XML, recursively. Uses the LLBLGenProEntityName for the rootnode name
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.String@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.WriteXml(System.String@)">
            <summary>
            Converts this entity to XML, recursively. Uses the LLBLGenProEntityName for the rootnode name
            </summary>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.WriteXml(System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity to XML, recursively. Uses the LLBLGenProEntityName for the rootnode name
            </summary>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.WriteXml(System.String,System.String@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="entityXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.WriteXml(System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity to XML, recursively. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.Entity2Xml(System.String,System.Xml.XmlDocument,System.Collections.Hashtable,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlNode@)">
            <summary>
            Produces the actual XML for this entity, recursively. Because it recurses through referenced entities, it keeps track of which objects are processed
            so cyclic references are not resulting in cyclic recursion and thus a crash. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="processedObjectIDs">Hashtable with ObjectIDs of all the objects already processed. If this entity's ObjectID is in the
            hashtable's key list, a ProcessedObjectReference tag is emitted and the routine simply returns. </param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="entityNode">The XmlNode representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ReadXml(System.String)">
            <summary>
            Will fill the entity and its containing members (recursively) with the data stored in the Xml string passed in. The string xmlData has to
            be filled with Xml in the format written by IEntity2.WriteXml() and the Xml has to be compatible with the structure of this entity.
            </summary>
            <param name="xmlData">string with Xml data which should be read into this entity and its members. This string has to be in the
            correct format and should be loadable into a new XmlDocument without problems</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ReadXml(System.Xml.XmlNode)">
            <summary>
            Will fill the entity and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntity2.WriteXml() and the Xml has to be compatible with the structure of this entity.
            </summary>
            <param name="node">XmlNode with Xml data which should be read into this entity and its members. Node's root element is the root element
            of the entity's Xml data</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.Xml2Entity(System.Xml.XmlNode,System.Collections.Hashtable,System.Collections.ArrayList)">
            <summary>
            Performs the actual conversion from Xml to entity data. 
            </summary>
            <param name="node">current node which points to an entity node.</param>
            <param name="processedObjectIDs">ObjectID's of all entities instantiated</param>
            <param name="nodeEntityReferences">Arraylist with all the references to entity objects we probably do not yet have instantiated. This list
            is traversed after the xml tree has been processed. (not done by this routine, but by the caller)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.FlagMeAsChanged">
            <summary>
            Routine which will flag all subscribers of the EntityContentsChanged event that this entity's contents is changed.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.RejectChanges">
            <summary>
            Will reject (and thus roll back) all changes made to the current set of the entity's EntityFields. It rolls back to the values they had before the
            edit cycle started.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.TransactionCommit">
            <summary>
            When the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> in which this IEntity2 participates is commited, this IEntity2 can succesfully finish actions performed by this
            IEntity2. This method is called by <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/>, you should not call it by yourself. When this IEntity2 doesn't participate in a
            transaction it finishes the actions itself, calling this method is not needed.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.TransactionRollback">
            <summary>
            When the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> in which this IEntity2 participates is rolled back, this IEntity2 has to roll back its internal variables.
            This method is called by <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/>, you should not call it by yourself. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.Equals(System.Object)">
            <summary>
            Compares passed in object with the given object. This is a compare of PK fields. These have to be the same in VALUES. 
            When the values are not the same, or the type is not the same as the current type, false is returned, true otherwise.
            When this doesn't have any PK fields, all fields are compared. null values are considered as the same value. 
            </summary>
            <param name="obj">IEntity2 implementing object of the same type as this which will be compared to the PK values of this. </param>
            <returns>True when the PK values of this are the same as the PK values of obj, or when this doesn't have any PK fields, all fields
            have the same value as obj's fields. False otherwise.</returns>
            <remarks>If this entity or the passed in entity is new, no values are compared, but the physical objects are compared (object.Equals()),
            because new entities can look the same, value wise due to identity fields which are all 0, however which are physical different entities 
            (object wise)</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable member. Does custom serialization so event handlers do not get serialized.
            </summary>
            <param name="info">See ISerializable</param>
            <param name="context">See ISerialilzable</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetConcurrencyPredicate(SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType)">
            <summary>
            Creates the requested predicate of the type specified. If no IConcurrencyPredicateFactory instance is stored in this entity instance, null
            is returned.
            </summary>
            <param name="predicateTypeToCreate">The type of predicate to create</param>
            <returns>A ready to use predicate to use in the query to execute, or null/Nothing if no IConcurrencyPredicateFactory instance is present, 
            in which case the predicate is ignored</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetCurrentFieldValue(System.Int32)">
            <summary>
            Gets the current value of the EntityField2 with the index fieldIndex.
            </summary>
            <param name="fieldIndex">Index of EntityField2 to get the current value of</param>
            <returns>The current value of the EntityField2 specified</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityOutOfSyncException">When the entity is out of sync and needs to be refetched first.</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityIsDeletedException">When the entity is marked as deleted.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">When fieldIndex is smaller than 0 or bigger than the amount of fields in the fields collection.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SetNewFieldValue(System.String,System.Object)">
            <summary>
            Sets the EntityField with the name fieldName to the new value value. Marks also the entityfields as dirty. Will refetch the complete entity's fields
            from the database if necessary (i.e. the entity is outofsync.).
            </summary>
            <param name="fieldName">Name of EntityField to set the new value of</param>
            <param name="value">Value to set</param>
            <returns>true if the value is actually set, false otherwise.</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same IEntityField.DataType as the field.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The value specified has a size that is larger than the maximum size defined for the related column in the databas</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SetNewFieldValue(System.Int32,System.Object)">
            <summary>
            Sets the EntityField2 on index fieldIndex to the new value value. Marks also the entityfields2 as dirty. 
            </summary>
            <param name="fieldIndex">Index of EntityField2 to set the new value of</param>
            <param name="value">Value to set</param>
            <returns>true if the value is actually set, false otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When fieldIndex is smaller than 0 or bigger than the amount of fields in the fields collection.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SetNewFieldValue(System.Int32,System.Object,System.Boolean)">
            <summary>
            Sets the EntityField2 on index fieldIndex to the new value value. Marks also the entityfields2 as dirty. 
            </summary>
            <param name="fieldIndex">Index of EntityField2 to set the new value of</param>
            <param name="value">Value to set</param>
            <param name="fireChangeEvent">if set to true, the change event is fired if the value is set, if applicable. 
            If set to false, the caller is responsible for calling the change event mechanism, recommended is then: PostFieldValueSetAction()</param>
            <returns>true if the value is actually set, false otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">When fieldIndex is smaller than 0 or bigger than the amount of fields in the fields collection.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.Validate">
            <summary>
            Validates the entity by calling a set IEntityValidator implementing object's Validate() method. If no IEntityValidator object is set
            true is returned.
            </summary>
            <returns>The result of IEntityValidator.Validate(this).</returns>
            <remarks>Called by save logic.</remarks>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityValidationException">If validation fails</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SaveFields(System.String)">
            <summary>
            Saves the current set of fields under the name specified in an internal hashtable. All data inside the field objects is preserved.
            If there is already a set of fields saved under the name specified, that set of fields is overwritten.
            </summary>
            <param name="name">Name to store the fields under. Case sensitive</param>
            <remarks>Creates a deep copy of the fields object.</remarks>
            <exception cref="T:System.InvalidOperationException">when this method is called while the object is participating in a transaction.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CheckIfIsSubTypeOf(System.Int32)">
            <summary>Determines whether this entity is a subType of the entity represented by the passed in enum value, which represents a value in the EntityType enum</summary>
            <param name="typeOfEntity">Type of entity.</param>
            <returns>true if the passed in type is a supertype of this entity, otherwise false</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.RollbackFields(System.String)">
            <summary>
            Replaces the current set of fields with the fields saved under the name specified. If no set of fields is found with the name specified
            an exception is thrown. Removes the entry after a succesful rollback.
            </summary>
            <param name="name">Name under which the fields are stored which have to replace the current set of fields. Case sensitive</param>
            <remarks>replaces the current set of fields with the set of fields saved under the name specified. The current set of fields, with all the
            data are lost after a succesful rollback.</remarks>
            <exception cref="T:System.ArgumentException">thrown when the name specified is not found.</exception>
            <exception cref="T:System.InvalidOperationException">when this method is called while the object is participating in a transaction.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.DiscardSavedFields">
            <summary>
            Removes all saved field sets from the internal hashtable, clearing up space. This method is also called when 
            an entity is saved.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.String)">
            <summary>
            Sets the internal parameter related to the fieldname passed to the instance relatedEntity. 
            </summary>
            <param name="relatedEntity">Instance to set as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.UnsetRelatedEntity(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.String)">
            <summary>
            Unsets the internal parameter related to the fieldname passed to the instance relatedEntity. Reverses the actions taken by SetRelatedEntity() 
            </summary>
            <param name="relatedEntity">Instance to unset as the related entity of type entityType</param>
            <param name="fieldName">Name of field mapped onto the relation which resolves in the instance relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetDependingRelatedEntities">
            <summary>
            Gets a collection of related entities referenced by this entity which depend on this entity (this entity is the PK side of their FK fields). These
            entities will have to be persisted after this entity during a recursive save.
            </summary>
            <returns>Collection with 0 or more IEntity2 objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetDependentRelatedEntities">
            <summary>
            Gets a collection of related entities referenced by this entity which this entity depends on (this entity is the FK side of their PK fields). These
            entities will have to be persisted before this entity during a recursive save.
            </summary>
            <returns>Collection with 0 or more IEntity2 objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetMemberEntityCollections">
            <summary>
            Gets an ArrayList of all entity collections stored as member variables in this entity. The contents of the ArrayList is
            used by the DataAccessAdapter to perform recursive saves. Only 1:n related collections are returned.
            </summary>
            <returns>Collection with 0 or more IEntityCollection2 objects, referenced by this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SetRelatedEntityProperty(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Sets the related entity property to the entity specified. If the property is a collection, it will add the entity specified to that collection.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="entity">Entity to set as an related entity</param>
            <remarks>Used by prefetch path logic.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetInheritanceInfo">
            <summary>
            Gets the inheritance info for this entity, if applicable (it's then overriden) or null if not.
            </summary>
            <returns>InheritanceInfo object if this entity is in a hierarchy of type TargetPerEntity, or null otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CreateEntityFactory">
            <summary>
            Creates the factory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CheckIfCurrentFieldValueIsNull(System.Int32)">
            <summary>
            Checks if the current value of the field on the index specified is null / not defined. 
            </summary>
            <param name="fieldIndex">Index of the field.</param>
            <returns>true if the field's value isn't defined yet, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.AddInternalsToContext">
            <summary>
            Adds the internals to context. No-op in base class, overriden in generated code.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.FlagAllFieldsAsChanged">
            <summary>
            A method which is overriden in the generated classes to call all OnFieldnameChanged methods to signal that the field has been changed
            to bound controls. This is required after a RollbackFields() call.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnFieldValidate(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2)">
            <summary>
            Called when a field is about to be validated, first by the build in checks, then by the custom field validators.
            </summary>
            <param name="field">Field which is about to be validated</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnFieldValidateComplete(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,System.Boolean)">
            <summary>
            Called when a field's validation has been completed. The validation result is passed in as well.
            </summary>
            <param name="field">Field which is about to be validated</param>
            <param name="validationResult">Validation result</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnBeginEdit">
            <summary>
            Called after BeginEdit is succesfully called.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnEndEdit">
            <summary>
            Called after EndEdit is succesfully called.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnCancelEdit">
            <summary>
            Called after CancelEdit is succesfully called.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnTransactionCommit">
            <summary>
            Called after the TransactionCommit routine has been finished.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnTransactionRollback">
            <summary>
            Called after the TransactionRollback routine has been finished.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.PostFieldValueSetAction(System.Boolean)">
            <summary>
            Method to perform post-fieldvalue set actions, like flagging this object as changed. 
            This code was previously part of SetNewFieldValue, but the timing to fire the changed event was then not controllable.
            </summary>
            <param name="fieldValueSet">Field value set flag. If false, nothing happens in this method.</param>
            <remarks>Call this method from an override of SetNewFieldValue after that routine has been called with 'false' for FireChangeEvent</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.OnEntityAfterSave(System.Object,System.EventArgs)">
            <summary> Event handler which is called by a related entity after that entity is persisted.</summary>
            <param name="sender">IEntity2 instance</param>
            <param name="e"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SyncFKFields(SD.LLBLGen.Pro.ORMSupportClasses.EntitySyncInfo)">
            <summary>
            Synchronizes the PK values of the dataSupplier with the related FK values of this entity.
            </summary>
            <param name="syncInfo">Sync info with the information which to synch with what.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetEntitySyncInformation(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Will retrieve all stored entity synchronization information for the passed in entity. If no information is
            stored, an empty hashtable is returned. All sync info is stored by fieldname
            </summary>
            <param name="relatedEntity">related entity to retrieve the sync info for</param>
            <returns>Hashtable with the sync info, stored per fieldname, set for this entity</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.UnsetEntitySyncInformation(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Will unset (remove) the passed in information as Entity sync information. If there is no sync information stored for the related entity
            after this info has been removed, the complete hashentry is removed.
            </summary>
            <param name="fieldName">Name of field of this entity mapped onto passed in relation</param>
            <param name="relatedEntity">related entity set as value for field with name fieldName</param>
            <param name="relation">EntityRelation object which is the relation between this entity and the passed in relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SetName(System.String)">
            <summary>
            Sets the LLBLGenPro entity name for this entity.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.SetEntitySyncInformation(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Will set the passed in information as Entity sync information. If there is no sync information stored yet for the related entity
            then a new entry is created, otherwise it's info is added to the sync information of this entity, if it isn't already present.
            If there is already sync information for this field stored for another related entity, that information is removed.
            </summary>
            <param name="fieldName">Name of field of this entity mapped onto passed in relation</param>
            <param name="relatedEntity">related entity set as value for field with name fieldName</param>
            <param name="relation">EntityRelation object which is the relation between this entity and the passed in relatedEntity</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetInheritanceHierarchyType">
            <summary>
            Gets the type of the inheritance hierarchy this entity is in.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetIsSubType">
            <summary>
            Gets the flag to signal if this entity is a subtype or not.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetEntityDescription(System.Boolean)">
            <summary>
            Gets the entity description. This string is used in verbose trace messages.
            It will produce "EntityBase2", if the passed in switch flag is false, to prevent performance loss due to
            reflection activity for trace results which will never be seen.
            </summary>
            <param name="switchFlag">switch flag. If this flag is false, "EntityBase2" will be returned</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetEntityDescription(System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Gets the entity description. This string is used in verbose trace messages.
            It will produce "EntityBase2", if verbose tracing is switched off for the GeneralSwitch, to prevent performance loss due to
            reflection activity for trace results which will never be seen.
            </summary>
            <param name="switchFlag">switch flag. If this flag is false, "EntityBase2" will be returned</param>
            <param name="entity">the entity to get the description for</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.InitClass(System.String)">
            <summary>
            Initializes the class' internals
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ValidateValue(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,System.Object,System.Int32)">
            <summary>
            Validates the input variable if it is a valid value for the target table field related to the passed in EntityField2 fieldToValidate.
            If value is null/nothing, true is returned.
            </summary>
            <param name="fieldToValidate">EntityField2 which is the destination of the value to validate</param>
            <param name="value">Value to validate</param>
            <param name="fieldIndex">The index of ValueDestination in the EntityFields2 array.</param>
            <returns>true if the value is valid, false otherwise</returns>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same IEntityField2.DataType as ValueDestination field.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ValidateValueCustom(System.Int32,System.Object)">
            <summary>
            Method which will validate, using custom code supplied this class, the field with index fieldIndex if it should accept
            the specified value. This routine is only called when standard checks already succeeded, so value isn't null, and value does match the
            destination column definition of the EntityField2 related to fieldIndex.
            </summary>
            <param name="fieldIndex">Index of field to validate</param>
            <param name="value">value to validate</param>
            <returns>True if the validation succeeded, false otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.TransactionStart">
            <summary>
            Called when this Entity2 is added to a transaction object. This routine make sure all data currently inside the entity can be
            recovered when the transaction is rolled back.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.EndEdit">
            <summary>
            IEditableObject method. Used by databinding.
            A succesful edit has been performed. All new values have to be moved to the current value slots.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.CancelEdit">
            <summary>
            IEditableObject method. Used by databinding.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.BeginEdit">
            <summary>
            IEditableObject method. Used by databinding.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Constructs the XML output from the object graph which has this object as the root. 
            </summary>
            <param name="writer">Writer to which the xml is written to</param>
            <remarks>Uses XmlFormatAspect.Compact | XmlFormatAspect.MLTextInCDataBlocks | XmlFormatAspect.DatesInXmlDataType.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetSchema">
            <summary>
            Produce the schema, always return null, as the XmlSerializer object otherwise can't handle our code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ReadXml(System.Xml.XmlReader)">
            <summary>
            Constructs an object graph with this object as the root from the xml contained by the passed in XmlReader object.
            </summary>
            <param name="reader">Reader with xml used to produce an object graph</param>
            <remarks>Uses XmlFormatAspect.Compact | XmlFormatAspect.MLTextInCDataBlocks | XmlFormatAspect.DatesInXmlDataType. Xml data should have been
            produced with WriteXml(writer) or a similar routine which is able to produce similar formatted XML</remarks>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.EntityContentsChanged">
            <summary>
            Event handler declaration for the event that is fired each time the one of values of this entity are changed.
            The event does not contain the value / field which is changed, it only signals subscribers the entity is changed
            and the subscriber should act accordingly, f.e. fire a ListChanged event.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.AfterSave">
            <summary>
            Event handler declaration for the event that is fired each time this entity is persisted. Related entities can subscribe to
            this event to start housekeeping actions, like syncing internal FK fields with the PK fields of this entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.HasPendingFkSyncs">
            <summary>
            Gets a value indicating whether this instance has pending fk syncs. A pending FK sync is a sync which hasn't been used yet. 
            If an entity has pending FK syncs, it has to be included into a save queue. 
            </summary>
            <value>
            	<see langword="true"/> if this instance has pending fk syncs; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.LLBLGenProEntityName">
            <summary>
            Returns the full name for this entity, which is important for the DAO to find back persistence info for this entity.
            </summary>
            <example>CustomerEntity</example>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.IsNewViaDataBinding">
            <summary>
            Gets / sets isAddedViaDataBinding. Databinding related.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ParentCollection">
            <summary>
            Gets / sets parentCollection. databinding related.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.Validator">
            <summary>
            The validator object used to validate values for fields. This is a custom validator called after the build-in validations succeed.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.Fields">
            <summary>
            The internal presentation of the data, which is an EntityFields object, which implements <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.IsNew">
            <summary>
            Marker for the entity object if the object is new and should be inserted when saved (true) or read from the
            database (false).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.Transaction">
            <summary>
            The <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> this ITransactionalElement implementing object is participating in. Only valid if
            <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ParticipatesInTransaction"/> is true. If set to null, the ITransactionalElement is no longer participating
            in a transaction.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ParticipatesInTransaction">
            <summary>
            Flag to check if the ITransactionalElement implementing object is participating in a transaction or not.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ObjectID">
            <summary>
            Gets / sets the unique Object ID which is created at runtime when the entity is instantiated. Can be used for external caches.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.IsDeserializing">
            <summary>
            Returns true if this entity instance is in the middle of a deserialization process, for example during a ReadXml() call.
            For internal use only. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ConcurrencyPredicateFactoryToUse">
            <summary>
            Gets / sets the IConcurrencyPredicateFactory to use for <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.GetConcurrencyPredicate(SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType)"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.EntityValidatorToUse">
            <summary>
            The validator object used to validate the complete entity. Call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.Validate"/> to use this validator.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.IsDirty">
            <summary>
            Marker for the entity object if the object is 'dirty' (changed, true) or not (false). Affects/reads .Fields.IsDirty.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.PrimaryKeyFields">
            <summary>
            List of IEntityField2 references which form the primary key. Reads/Affects .Fields.PrimaryKeyFields
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.ActiveContext">
            <summary>
            Gets / sets the active context this entity is in. Setting this property is not adding the entity to the context, it will make contained
            entities be added to the passed in context. If the entity is already in a context, setting this property has no effect. 
            Setting this property is done by framework code, use the Context's Add/Get methods to work with contexts and entities.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.LLBLGenProIsInHierarchyOfType">
            <summary>
            Gets the type of the hierarchy this entity is in. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.LLBLGenProIsSubType">
            <summary>
            Gets or sets a value indicating whether this entity is a subtype
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase2.LLBLGenProEntityTypeValue">
            <summary>
            Returns the EntityType enum value for this entity.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase">
            <summary>
            Implementation of the entity collection base class.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection">
            <summary>
            Interface for the EntityCollection type. The collection defines typed basic collection behavior. 
            Selfservicing specific
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Adds an IEntity object to the list.
            </summary>
            <param name="entityToAdd">Entity to add</param>
            <returns>Index in list</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.Insert(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Inserts an IEntity on position Index
            </summary>
            <param name="index">Index where to insert the Object Entity</param>
            <param name="entityToAdd">Entity to insert</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.Remove(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Remove given IEntity from the list.
            </summary>
            <param name="entityToRemove">Entity object to remove from list.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.Contains(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Returns true if the list contains the given IEntity Object
            </summary>
            <param name="entityToFind">Entity object to check.</param>
            <returns>true if Entity exists in list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.IndexOf(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Returns index in the list of given IEntity object.
            </summary>
            <param name="entityToFind">Entity Object to check</param>
            <returns>index in list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.CopyTo(SD.LLBLGen.Pro.ORMSupportClasses.IEntity[],System.Int32)">
            <summary>
            copy the complete list of IEntity objects to an array of IEntity objects.
            </summary>
            <param name="destination">Array of IEntity Objects wherein the contents of the list will be copied.</param>
            <param name="index">Start index to copy from</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.SetContainingEntityInfo(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.String)">
            <summary>
            Sets the entity information of the entity object containing this collection. Call this method only from
            entity classes which contain IEntityCollection members, like 'Customer' which contains 'Orders' entity collection.
            </summary>
            <param name="containingEntity">The entity containing this entity collection as a member variable</param>
            <param name="fieldName">The field the containing entity has mapped onto the relation which delivers the entities contained
            in this collection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.SaveMulti">
            <summary>
            Saves all new/dirty Entities in the IEntityCollection in the persistent storage. If this IEntityCollection is added
            to a transaction, the save processes will be done in that transaction, if the entity isn't already added to another transaction.
            If the entity is already in another transaction, it will use that transaction. If no transaction is present, the saves are done in a
            new Transaction (which is created in an inherited method.). Will not recursively save entities inside the collection.
            </summary>
            <returns>Amount of entities inserted</returns>
            <remarks>All exceptions will be bubbled upwards so transaction code can anticipate on exceptions.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.SaveMulti(System.Boolean)">
            <summary>
            Saves all new/dirty Entities in the IEntityCollection in the persistent storage. If this IEntityCollection is added
            to a transaction, the save processes will be done in that transaction, if the entity isn't already added to another transaction.
            If the entity is already in another transaction, it will use that transaction. If no transaction is present, the saves are done in a
            new Transaction (which is created in an inherited method.)
            </summary>
            <param name="recurse">If true, will recursively save the entities inside the collection</param>
            <returns>Amount of entities inserted</returns>
            <remarks>All exceptions will be bubbled upwards so transaction code can anticipate on exceptions.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.DeleteMulti">
            <summary>
            Deletes all Entities in the IEntityCollection from the persistent storage. If this IEntityCollection is added
            to a transaction, the delete processes will be done in that transaction, if the entity isn't already added to another transaction.
            If the entity is already in another transaction, it will use that transaction. If no transaction is present, the deletes are done in a
            new Transaction (which is created in an inherited method.)
            Deleted entities are marked deleted and are removed from the collection.
            </summary>
            <returns>Amount of entities deleted</returns>
            <remarks>All exceptions will be bubbled upwards so transaction code can anticipate on exceptions.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.WriteXml(System.String@)">
            <summary>
            Converts this entity collection to XML, recursively. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.WriteXml(System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.WriteXml(System.String,System.String@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.WriteXml(System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.ReadXml(System.Xml.XmlNode)">
            <summary>
            Will fill the entity collection and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntityCollection.WriteXml() and the Xml has to be compatible with the structure of this entity collection.
            </summary>
            <param name="node">XmlNode with Xml data which should be read into this entity and its members. Node's root element is the root element
            of the entity collection's Xml data</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.ReadXml(System.String)">
            <summary>
            Will fill the entity collection and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntityCollection.WriteXml() and the Xml has to be compatible with the structure of this entity collection.
            </summary>
            <param name="xmlData">string with Xml data which should be read into this entity collection and its members. This string has to be in the
            correct format and should be loadable into a new XmlDocument without problems</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.Sort(System.Int32,System.ComponentModel.ListSortDirection)">
            <summary>
            Applies sorting like IBindingList.ApplySort, on the field with the index fieldIndex and with the direction specified.
            </summary>
            <param name="fieldIndex">Field to sort on</param>
            <param name="direction">the sort direction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.Sort(System.Int32,System.ComponentModel.ListSortDirection,System.Collections.IComparer)">
            <summary>
            Sorts the collection.
            </summary>
            <param name="fieldIndex">Field to sort on</param>
            <param name="direction">the sort direction</param>
            <param name="comparerToUse">The comparer to use. If null, it will use the default comparer.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.Sort(System.String,System.ComponentModel.ListSortDirection,System.Collections.IComparer)">
            <summary>
            Sorts the collection.
            </summary>
            <param name="propertyName">property to sort on</param>
            <param name="direction">the sort direction</param>
            <param name="comparerToUse">The comparer to use. If null, it will use the default comparer.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,System.Int32)">
            <summary>
            Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in
            the predicate or predicate expression definition, using the passed in relations to construct the total query.
            </summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.BeforeRemove">
            <summary>
            Event which is fired if Remove or RemoveAt(index) is called and the remove is not yet executed.
            'sender' is the object that will be removed from the list.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.MaxNumberOfItemsToReturn">
            <summary>
            The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.SortClauses">
            <summary>
            The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.ContainsDirtyContents">
            <summary>
            Returns true if this collection contains dirty objects. If this collection contains dirty objects, an 
            already filled collection should not be refreshed until a save is performed. This property is calculated in real time
            and can be time consuming when the collection contains a lot of objects. Use this property only in cases when the value
            of this property is used to do a refetch or not.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.EntityFactoryToUse">
            <summary>
            The EntityFactory to use when creating entity objects during a GetMulti() call or other logic which requires the creation of new entities.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.ValidatorToUse">
            <summary>
            Gets / sets the validator object to use when creating entity objects using the entity factory. Ignored when null.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.SuppressClearInGetMulti">
            <summary>
            Surpresses the removal of all contents of the collection in a GetMulti*() call. Used by code in related entities to prevent the removal
            of objects when collection properties are accessed.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.Count">
            <summary>
            The amount of IEntity elements in this entity collection
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.ActiveContext">
            <summary>
            Gets / sets the active context this entity collection is in. Setting this property is not adding the entity collection to the context, 
            it will make contained entities be added to the passed in context. If the entity collection is already in a context, setting this property has no effect. 
            Setting this property is done by framework code, use the Context's Add/Get methods to work with contexts and entity collections.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.EntityValidatorToUse">
            <summary>
            Gets / sets the IEntityValidator instance to use when creating entity objects during a GetMulti() call or when AddNew is called.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection.ConcurrencyPredicateFactoryToUse">
            <summary>
            Gets / sets the IConcurrencyPredicateFactory instance to use when creating entity objects during a GetMulti() call or when AddNew is called.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.InDesignMode">
            <summary>
            Static bool which is used by lazy loading code in entities to determine if the code is called from somewhere in design mode.
            This boolean is set by IComponent.Site if site is not null. It is after that never reset, as that would not make sense: instance code
            can't be in design mode and not in design mode at the same time.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPropertyDescriptorFactory,System.Type)">
            <summary>
            CTor
            </summary>
            <param name="propertyDescriptorFactoryToUse">PropertyDescriptor factory to use in GetItemProperties method. Complex databinding related.</param>
            <param name="typeOfDirectInheritor">Type of direct inheriting class. Used in GetItemProperties method. Complex databinding related.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPropertyDescriptorFactory,System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory)">
            <summary>
            CTor
            </summary>
            <param name="propertyDescriptorFactoryToUse">PropertyDescriptor factory to use in GetItemProperties method. Complex databinding related.</param>
            <param name="typeOfDirectInheritor">Type of direct inheriting class. Used in GetItemProperties method. Complex databinding related.</param>
            <param name="entityFactoryToUse">The EntityFactory to use when creating entity objects during a GetMulti() call. </param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPropertyDescriptorFactory,System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory,SD.LLBLGen.Pro.ORMSupportClasses.IValidator)">
            <summary>
            CTor
            </summary>
            <param name="propertyDescriptorFactoryToUse">PropertyDescriptor factory to use in GetItemProperties method. Complex databinding related.</param>
            <param name="typeOfDirectInheritor">Type of direct inheriting class. Used in GetItemProperties method. Complex databinding related.</param>
            <param name="entityFactoryToUse">The EntityFactory to use when creating entity objects during a GetMulti() call. </param>
            <param name="validatorToUse">The validator object to use when creating entity objects during a GetMulti() call.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Private CTor for deserialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.SetContainingEntityInfo(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.String)">
            <summary>
            Sets the entity information of the entity object containing this collection. Call this method only from
            entity classes which contain EntityCollection members, like 'Customer' which contains 'Orders' entity collection.
            </summary>
            <param name="containingEntity">The entity containing this entity collection as a member variable</param>
            <param name="fieldName">The field the related entity has mapped onto the relation which delivers the entities contained
            in this collection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.ToXml">
            <summary>
            Converts the Entities inside this entitycollection into an entity node with inner nodes for each field, which is stored in a generic collection node.
            </summary>
            <returns>XmlNode containing the EntityFields in xml format</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.TransactionCommit">
            <summary>
            When the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> in which this IEntity participates is commited, this IEntity can succesfully finish actions performed by this
            IEntity. This method is called by <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/>, you should not call it by yourself. When this IEntity doesn't participate in a
            transaction it finishes the actions itself, calling this method is not needed.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.TransactionRollback">
            <summary>
            When the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> in which this IEntity participates is rolled back, this IEntity has to roll back its internal variables.
            This method is called by <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/>, you should not call it by yourself. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.SaveMulti">
            <summary>
            Saves all new/dirty Entities in the IEntityCollection in the persistent storage. If this IEntityCollection is added
            to a transaction, the save processes will be done in that transaction, if the entity isn't already added to another transaction.
            If the entity is already in another transaction, it will use that transaction. If no transaction is present, the saves are done in a
            new Transaction (which is created in an inherited method.). Will not recursively save entities inside the collection.
            </summary>
            <returns>Amount of entities inserted</returns>
            <remarks>All exceptions will be bubbled upwards so transaction code can anticipate on exceptions.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.SaveMulti(System.Boolean)">
            <summary>
            Saves all new/dirty Entities in the IEntityCollection in the persistent storage. If this IEntityCollection is added
            to a transaction, the save processes will be done in that transaction, if the entity isn't already added to another transaction.
            If the entity is already in another transaction, it will use that transaction. If no transaction is present, the saves are done in a
            new Transaction (which is created in an inherited method.)
            </summary>
            <param name="recurse">If true, will recursively save the entities inside the collection</param>
            <returns>Amount of entities inserted</returns>
            <remarks>All exceptions will be bubbled upwards so transaction code can anticipate on exceptions.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.DeleteMulti">
            <summary>
            Deletes all Entities in the IEntityCollection from the persistent storage. If this IEntityCollection is added
            to a transaction, the delete processes will be done in that transaction, if the entity isn't already added to another transaction.
            If the entity is already in another transaction, it will use that transaction. If no transaction is present, the deletes are done in a
            new Transaction (which is created in an inherited method.)
            Deleted entities are marked deleted and are removed from the collection.
            </summary>
            <returns>Amount of entities deleted</returns>
            <remarks>All exceptions will be bubbled upwards so transaction code can anticipate on exceptions.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Adds an IEntity object to the list. Only new entities are added.
            </summary>
            <param name="entityToAdd">Entity to add</param>
            <returns>Index in list</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.FastAdd(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Adds an IEntity object to the list. This version doesn't check for presence of teh passed in entity.
            </summary>
            <param name="entityToAdd">Entity to add</param>
            <returns>Index in list</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.Insert(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Inserts an IEntity on position Index. Only entities which aren't present in the collection are added.
            </summary>
            <param name="index">Index where to insert the Entity</param>
            <param name="entityToAdd">Entity to insert</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.Remove(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Remove given IEntity from the list.
            </summary>
            <param name="entityToRemove">Entity object to remove from list.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.RemoveAt(System.Int32)">
            <summary>
            Removes the IEntity instance at the index given.
            </summary>
            <param name="index">Index in list to remove the element.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.Contains(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Returns true if the list contains the given IEntity Object
            </summary>
            <param name="entityToFind">Entity object to check.</param>
            <returns>true if Entity exists in list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.OnClear">
            <summary>
            Performs a clear of the internals and its internal objects.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.OnClearComplete">
            <summary>
            Performs signaling of a list change, unless _listOperationInProgress is set to true
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.GetEntityCollectionDescription(System.Boolean)">
            <summary>
            Gets the entity collection description. This string is used in verbose trace messages.
            It will produce "EntityCollectionBase", if the passed in switch flag is false, to prevent performance loss due to
            reflection activity for trace results which will never be seen.
            </summary>
            <param name="switchFlag">switch flag. If this flag is false, "EntityCollectionBase" will be returned</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.IndexOf(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Returns index in the list of given IEntity object.
            </summary>
            <param name="entityToFind">Entity Object to check</param>
            <returns>index in list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.CopyTo(SD.LLBLGen.Pro.ORMSupportClasses.IEntity[],System.Int32)">
            <summary>
            copy the complete list of IEntity objects to an array of IEntity objects.
            </summary>
            <param name="destination">Array of IEntity Objects wherein the contents of the list will be copied.</param>
            <param name="index">Start index to copy from</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve. When set to null all entities will be retrieved (no filtering is being performed)</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve. When set to null all entities will be retrieved (no filtering is being performed)</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve. When set to null all entities will be retrieved (no filtering is being performed)</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve. When set to null all entities will be retrieved (no filtering is being performed)</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Int32,System.Int32)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.GetMulti(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath,System.Int32,System.Int32)">
            <summary> Retrieves in this Collection object all Entity objects which match with the specified filter, formulated in the predicate or predicate expression definition, using the passed in relations to construct the total query.</summary>
            <param name="selectFilter">A predicate or predicate expression which should be used as filter for the entities to retrieve.</param>
            <param name="maxNumberOfItemsToReturn"> The maximum number of items to return with this retrieval query.</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When not specified, no sorting is applied.</param>
            <param name="relations">The set of relations to walk to construct the total query.</param>
            <param name="prefetchPathToUse">the PrefetchPath which defines the graph of objects to fetch.</param>
            <param name="pageNumber">The page number to retrieve.</param>
            <param name="pageSize">The page size of the page to retrieve.</param>
            <returns>true if succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.GetDbCount">
            <summary> Gets the amount of Entity objects in the database.</summary>
            <returns>the amount of objects found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary> Gets the amount of Entity objects in the database, when taking into account the filter specified.</summary>
            <param name="filter">the filter to apply</param>
            <returns>the amount of objects found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.GetDbCount(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary> Gets the amount of Entity objects in the database, when taking into account the filter specified and the relations specified.</summary>
            <param name="filter">the filter to apply</param>
            <param name="relations">The relations to walk</param>
            <returns>the amount of objects found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            ITypedList.GetItemProperties implementation. Necessary for Complex databinding. 
            </summary>
            <param name="listAccessors"></param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            ITypedList member
            </summary>
            <param name="listAccessors"></param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable member. 
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.Sort(System.Int32,System.ComponentModel.ListSortDirection)">
            <summary>
            Applies sorting like IBindingList.ApplySort, on the field with the index fieldIndex and with the direction specified.
            </summary>
            <param name="fieldIndex">Field to sort on</param>
            <param name="direction">the sort direction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.Sort(System.Int32,System.ComponentModel.ListSortDirection,System.Collections.IComparer)">
            <summary>
            Sorts the collection.
            </summary>
            <param name="fieldIndex">Field to sort on</param>
            <param name="direction">the sort direction</param>
            <param name="comparerToUse">The comparer to use. If null, it will use the default comparer.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.Sort(System.String,System.ComponentModel.ListSortDirection,System.Collections.IComparer)">
            <summary>
            Sorts the collection.
            </summary>
            <param name="propertyName">property to sort on</param>
            <param name="direction">the sort direction</param>
            <param name="comparerToUse">The comparer to use. If null, it will use the default comparer.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.Sort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection,System.Collections.IComparer)">
            <summary>
            Sorts the collection.
            </summary>
            <param name="descriptor">descriptor for property to sort on</param>
            <param name="direction">the sort direction</param>
            <param name="comparerToUse">The comparer to use. If null, it will use the default comparer.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            IBindingList member. 
            </summary>
            <exception cref="T:System.NotSupportedException">thrown when called. Not supported.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            IBindingList member. Sorts on the given property
            </summary>
            <exception cref="T:System.NotSupportedException">thrown when called and SupportsSorting is set to false.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            IBindingList member. 
            </summary>
            <remarks>Does a linear search through all the loaded entities in this collection.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.RemoveSort">
            <summary>
            IBindingList member. 
            </summary>
            <exception cref="T:System.NotSupportedException">thrown when called and SupportsSorting is set to false.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.AddNew">
            <summary>
            IBindingList member. Will add a new entity to the list, will set its parent collection property so CancelEdit will remove
            it from the list again, and will set its flag that it is added by databinding. 
            </summary>
            <remarks>Do not call this method from your own code. This is a databinding ONLY method.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            IBindingList member. 
            </summary>
            <exception cref="T:System.NotSupportedException">thrown when called. Not supported.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.ToXml(System.String)">
            <summary>
            Converts the Entities inside this entitycollection into an entity node with inner nodes for each field, which is stored in a generic collection node.
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entitycollection.</param>
            <returns>a complete xml representation for this entitycollection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String@)">
            <summary>
            Converts this entity collection to XML, recursively. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.String@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.WriteXml(System.String@)">
            <summary>
            Converts this entity collection to XML, recursively. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.WriteXml(System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.WriteXml(System.String,System.String@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.WriteXml(System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.EntityCollection2Xml(System.String,System.Xml.XmlDocument,System.Collections.Hashtable,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlNode@)">
            <summary>
            Produces the actual XML for this entity collection, recursively. Because it recurses through contained entities, 
            it keeps track of which objects are processed so cyclic references are not resulting in cyclic recursion and thus a crash. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="processedObjectIDs">Hashtable with ObjectIDs of all the objects already processed. If an entity's ObjectID is in the
            hashtable's key list, a ProcessedObjectReference tag is emitted and the entity will not recurse further. </param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.ReadXml(System.String)">
            <summary>
            Will fill the entity collection and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntityCollection2.WriteXml() and the Xml has to be compatible with the structure of this entity collection.
            </summary>
            <param name="xmlData">string with Xml data which should be read into this entity collection and its members. This string has to be in the
            correct format and should be loadable into a new XmlDocument without problems</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.ReadXml(System.Xml.XmlNode)">
            <summary>
            Will fill the entity collection and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntityCollection2.WriteXml() and the Xml has to be compatible with the structure of this entity collection.
            </summary>
            <param name="node">XmlNode with Xml data which should be read into this entity and its members. Node's root element is the root element
            of the entity collection's Xml data</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.CreateDAOInstance">
            <summary>Creats a new DAO instance so code which is in the base class can still use the proper DAO object.</summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.AddContainedEntitiesToContext">
            <summary>
            Adds the contained entities to the active set context.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.Xml2EntityCollection(System.Xml.XmlNode,System.Collections.Hashtable,System.Collections.ArrayList)">
            <summary>
            Performs the actual conversion from Xml to entity collection data. 
            </summary>
            <param name="node">current node which points to an entity collection node.</param>
            <param name="processedObjectIDs">ObjectID's of all entities instantiated</param>
            <param name="nodeEntityReferences">Arraylist with all the references to entity objects we probably do not yet have instantiated. This list
            is traversed after the xml tree has been processed. (not done by this routine, but by the caller)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.OnListChanged(System.Int32,System.ComponentModel.ListChangedType)">
            <summary>
            Called when the List is changed and the event should be raised.
            </summary>
            <param name="index">Index of object causing the list change</param>
            <param name="typeOfChange">The type of change to reflect to subscribers</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.EntityInListOnEntityContentsChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the EntityContentsChanged event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IPropertyDescriptorFactory,System.Type,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory,SD.LLBLGen.Pro.ORMSupportClasses.IValidator)">
            <summary>
            Inits the class
            </summary>
            <param name="propertyDescriptorFactoryToUse">PropertyDescriptor factory to use in GetItemProperties method. Complex databinding related.</param>
            <param name="typeOfDirectInheritor">Type of direct inheriting class. Used in GetItemProperties method. Complex databinding related.</param>
            <param name="entityFactoryToUse">The EntityFactory to use when creating entity objects during a GetMulti() call. </param>
            <param name="validatorToUse">The validator object to use when new entities are created.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.GetList">
            <summary>
            Gets the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Constructs the XML output from the object graph which has this object as the root. 
            </summary>
            <param name="writer">Writer to which the xml is written to</param>
            <remarks>Uses XmlFormatAspect.Compact | XmlFormatAspect.MLTextInCDataBlocks | XmlFormatAspect.DatesInXmlDataType.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.GetSchema">
            <summary>
            Produce the schema, always return null, as the XmlSerializer object otherwise can't handle our code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.ReadXml(System.Xml.XmlReader)">
            <summary>
            Constructs an object graph with this object as the root from the xml contained by the passed in XmlReader object.
            </summary>
            <param name="reader">Reader with xml used to produce an object graph</param>
            <remarks>Uses XmlFormatAspect.Compact | XmlFormatAspect.MLTextInCDataBlocks | XmlFormatAspect.DatesInXmlDataType. Xml data should have been
            produced with WriteXml(writer) or a similar routine which is able to produce similar formatted XML</remarks>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.ListChanged">
            <summary>
            Event which is used in complex databinding.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.BeforeRemove">
            <summary>
            Event which is fired if Remove or RemoveAt(index) is called and the remove is not yet executed.
            'sender' is the object that will be removed from the list.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.Disposed">
            <summary>
            Disposed event. Not used in this implementation.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.Site">
            <summary>
            Gets or sets the site.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.ContainsListCollection">
            <summary>
            Gets a value indicating whether [contains list collection].
            </summary>
            <value>
            	<c>true</c> if [contains list collection]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.Transaction">
            <summary>
            The <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction"/> this ITransactionalElement implementing object is participating in. Only valid if
            <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.ParticipatesInTransaction"/> is true. If set to null, the ITransactionalElement is no longer participating
            in a transaction.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.ParticipatesInTransaction">
            <summary>
            Flag to check if the ITransactionalElement implementing object is participating in a transaction or not.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.AllowNew">
            <summary>
            IBindingList property. Default: true
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.SortProperty">
            <summary>
            IBindingList property. Default: null.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.SupportsSorting">
            <summary>
            IBindingList property. Default: false
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.IsSorted">
            <summary>
            IBindingList property. Default: false
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.AllowRemove">
            <summary>
            IBindingList property. Default: false
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.SupportsSearching">
            <summary>
            IBindingList property. Default: true
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.SortDirection">
            <summary>
            IBindingList property. Default: Ascending.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.AllowEdit">
            <summary>
            IBindingList property. Default: true
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.SupportsChangeNotification">
            <summary>
            IBindingList property. Default: supported
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.Items">
            <summary>
            Items contained by this collection. This is the SORTED collection (if sorted). Remove sorting first to get the original list.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.MaxNumberOfItemsToReturn">
            <summary>
            The maximum number of items to return with this retrieval query. 
            If the used Dynamic Query Engine supports it, 'TOP' is used to limit the amount of rows to return. 
            When set to 0, no limitations are specified.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.SortClauses">
            <summary>
            The order by specifications for the sorting of the resultset when fetching it from the persistent storage.
            When not specified, no sorting is applied.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.ContainsDirtyContents">
            <summary>
            Returns true if this collection contains dirty objects. If this collection contains dirty objects, an 
            already filled collection should not be refreshed until a save is performed. This property is calculated in real time
            and can be time consuming when the collection contains a lot of objects. Use this property only in cases when the value
            of this property is used to do a refetch or not.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.EntityFactoryToUse">
            <summary>
            The EntityFactory to use when creating entity objects during a GetMulti() call.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.ValidatorToUse">
            <summary>
            Gets / sets the validator object to use when creating entity objects during a GetMulti() call or when AddNew is called
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.EntityValidatorToUse">
            <summary>
            Gets / sets the IEntityValidator instance to use when creating entity objects during a GetMulti() call or when AddNew is called.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.ConcurrencyPredicateFactoryToUse">
            <summary>
            Gets / sets the IConcurrencyPredicateFactory instance to use when creating entity objects during a GetMulti() call or when AddNew is called.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.DeserializationInProgress">
            <summary>
            sets the internal flag to say that this collection is being deserialized.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.DoNotPerformAddIfPresent">
            <summary>
            When set to true, an entity passed to Add() will be tested if it's already present. If so, the index is returned and the
            object is not added again. If set to false (default: true) this check is not performed. Setting this property to true can slow down fetch logic.
            GetMulti fetch logic sets this property to false during a multi-entity fetch.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.SuppressClearInGetMulti">
            <summary>
            Surpresses the removal of all contents of the collection in a GetMulti*() call. Used by code in related entities to prevent the removal
            of objects when collection properties are accessed.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.ActiveContext">
            <summary>
            Gets / sets the active context this entity collection is in. Setting this property is not adding the entity collection to the context, 
            it will make contained entities be added to the passed in context. If the entity collection is already in a context, setting this property has no effect. 
            Setting this property is done by framework code, use the Context's Add/Get methods to work with contexts and entity collections.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase.CachedPkHashes">
            <summary>
            Gets / sets the CachedPkHashes. This is a hashtable with the PK hashes for the entities in this collection. This is set during a 
            prefetch path fetch, to cache already calculated PK side hashes.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2">
            <summary>
            Implementation of the entity collection base class.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2">
            <summary>
            Interface for the EntityCollection2 type. The collection defines typed basic collection behavior. 
            Adapter specific
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Adds an IEntity2 object to the list.
            </summary>
            <param name="entityToAdd">Entity2 to add</param>
            <returns>Index in list</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.Insert(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Inserts an IEntity2 on position Index
            </summary>
            <param name="index">Index where to insert the Object Entity</param>
            <param name="entityToAdd">Entity2 to insert</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.Remove(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Remove given IEntity2 instance from the list.
            </summary>
            <param name="entityToRemove">Entity2 object to remove from list.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.Contains(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Returns true if the list contains the given IEntity2 Object
            </summary>
            <param name="entityToFind">Entity2 object to check.</param>
            <returns>true if Entity2 exists in list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.IndexOf(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Returns index in the list of given IEntity2 object.
            </summary>
            <param name="entityToFind">Entity2 Object to check</param>
            <returns>index in list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.CopyTo(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2[],System.Int32)">
            <summary>
            copy the complete list of IEntity2 objects to an array of IEntity objects.
            </summary>
            <param name="destination">Array of IEntity2 Objects wherein the contents of the list will be copied.</param>
            <param name="index">Start index to copy from</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.GetPropertyDescriptors(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Type)">
            <summary>
            Constructs the actual property descriptor collection.
            </summary>
            <param name="entityToCheck">entity instance which properties should be included in the collection</param>
            <param name="typeOfEntity">full type of the entity</param>
            <returns>filled in property descriptor collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.SetContainingEntityInfo(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.String)">
            <summary>
            Sets the entity information of the entity object containing this collection. Call this method only from
            entity classes which contain EntityCollection members, like 'Customer' which contains 'Orders' entity collection.
            </summary>
            <param name="containingEntity">The entity containing this entity collection as a member variable</param>
            <param name="fieldName">The field the containing entity has mapped onto the relation which delivers the entities contained
            in this collection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.WriteXml(System.String@)">
            <summary>
            Converts this entity collection to XML, recursively. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.WriteXml(System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.WriteXml(System.String,System.String@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.WriteXml(System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.ReadXml(System.Xml.XmlNode)">
            <summary>
            Will fill the entity collection and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntityCollection2.WriteXml() and the Xml has to be compatible with the structure of this entity collection.
            </summary>
            <param name="node">XmlNode with Xml data which should be read into this entity and its members. Node's root element is the root element
            of the entity collection's Xml data</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.ReadXml(System.String)">
            <summary>
            Will fill the entity collection and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntityCollection2.WriteXml() and the Xml has to be compatible with the structure of this entity collection.
            </summary>
            <param name="xmlData">string with Xml data which should be read into this entity collection and its members. This string has to be in the
            correct format and should be loadable into a new XmlDocument without problems</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.Sort(System.Int32,System.ComponentModel.ListSortDirection)">
            <summary>
            Applies sorting like IBindingList.ApplySort, on the field with the index fieldIndex and with the direction specified.
            </summary>
            <param name="fieldIndex">Field to sort on</param>
            <param name="direction">the sort direction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.Sort(System.Int32,System.ComponentModel.ListSortDirection,System.Collections.IComparer)">
            <summary>
            Sorts the collection.
            </summary>
            <param name="fieldIndex">Field to sort on</param>
            <param name="direction">the sort direction</param>
            <param name="comparerToUse">The comparer to use. If null, it will use the default comparer.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.Sort(System.String,System.ComponentModel.ListSortDirection,System.Collections.IComparer)">
            <summary>
            Sorts the collection.
            </summary>
            <param name="propertyName">property to sort on</param>
            <param name="direction">the sort direction</param>
            <param name="comparerToUse">The comparer to use. If null, it will use the default comparer.</param>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.BeforeRemove">
            <summary>
            Event which is fired if Remove or RemoveAt(index) is called and the remove is not yet executed.
            'sender' is the object that will be removed from the list.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.ContainsDirtyContents">
            <summary>
            Returns true if this collection contains dirty objects. If this collection contains dirty objects, an 
            already filled collection should not be refreshed until a save is performed. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.EntityFactoryToUse">
            <summary>
            The EntityFactory2 to use when creating entity objects when bound to a control and AddNew is enabled.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.ValidatorToUse">
            <summary>
            Gets / sets the validator object to use when creating entity objects using the entity factory. Ignored when null.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.Item(System.Int32)">
            <summary>
            Simple indexer. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.Count">
            <summary>
            The amount of IEntity2 elements in this entity collection
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.IsReadOnly">
            <summary>
            Get / set the readonly flag for this collection. If set to true, it will affect IBindingList parameters as well.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.DirtyEntities">
            <summary>
            Returns a readonly collection of entities which are flagged as dirty. 
            This collection is determined on the fly, you can use this collection to remove dirty entities from this entity collection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.DoNotPerformAddIfPresent">
            <summary>
            When set to true, an entity passed to Add() or Insert() will be tested if it's already present. If so, the index is returned and the
            object is not added again. If set to false (default: true) this check is not performed. Setting this property to true can slow down fetch logic.
            DataAccessAdapter's fetch logic sets this property to false during a multi-entity fetch.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.ActiveContext">
            <summary>
            Gets / sets the active context this entity collection is in. Setting this property is not adding the entity collection to the context, 
            it will make contained entities be added to the passed in context. If the entity collection is already in a context, setting this property has no effect. 
            Setting this property is done by framework code, use the Context's Add/Get methods to work with contexts and entity collections.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.EntityValidatorToUse">
            <summary>
            Gets / sets the IEntityValidator instance to use when creating entity objects during an entity collection fetch
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2.ConcurrencyPredicateFactoryToUse">
            <summary>
            Gets / sets the IConcurrencyPredicateFactory instance to use when creating entity objects during an entity collection fetch
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.InDesignMode">
            <summary>
            Used by EntityCollectionBase2 to determine if a collection should allow AddNew();
            This boolean is set by IComponent.Site if site is not null. It is after that never reset, as that would not make sense: instance code
            can't be in design mode and not in design mode at the same time.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.#ctor">
            <summary>
            CTor
            </summary>
            <remarks>En</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            CTor
            </summary>
            <param name="entityFactoryToUse">The entity factory object to use when this collection has to construct new objects.
            This is the case when the collection is bound to a grid-like control for example.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IValidator)">
            <summary>
            CTor
            </summary>
            <param name="entityFactoryToUse">The entity factory object to use when this collection has to construct new objects.
            This is the case when the collection is bound to a grid-like control for example.</param>
            <param name="validatorToUse">The validator object to use for new entities constructed using the entity factory. Ignored when null</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Private CTor for deserialization
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the range of objects passed in. Objects have to be IEntity2 implementing objects
            </summary>
            <param name="c">Collection to add</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.AddRange(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Adds the range of objects passed in. Objects have to be IEntity2 implementing objects
            </summary>
            <param name="c">Collection to add</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.SetContainingEntityInfo(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.String)">
            <summary>
            Sets the entity information of the entity object containing this collection. Call this method only from
            entity classes which contain EntityCollection members, like 'Customer' which contains 'Orders' entity collection.
            </summary>
            <param name="containingEntity">The entity containing this entity collection as a member variable</param>
            <param name="fieldName">The field the related entity has mapped onto the relation which delivers the entities contained
            in this collection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Adds an IEntity2 object to the list. Only new entities are added.
            </summary>
            <param name="entityToAdd">Entity2 to add</param>
            <returns>Index in list</returns>
            <exception cref="T:System.InvalidOperationException">If this collection is marked as ReadOnly</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.Insert(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Inserts an IEntity2 on position Index. Only new entities are added.
            </summary>
            <param name="index">Index where to insert the Entity2</param>
            <param name="entityToAdd">Entity2 to insert</param>
            <exception cref="T:System.InvalidOperationException">If this collection is marked as ReadOnly</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.Remove(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Remove given IEntity2 from the list.
            </summary>
            <param name="entityToRemove">Entity2 object to remove from list.</param>
            <exception cref="T:System.InvalidOperationException">If this collection is marked as ReadOnly</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.RemoveAt(System.Int32)">
            <summary>
            Removes the IEntity2 instance at the index given.
            </summary>
            <param name="index">Index in list to remove the element</param>
            <exception cref="T:System.InvalidOperationException">If this collection is marked as ReadOnly</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.Contains(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Returns true if the list contains the given IEntity2 Object
            </summary>
            <param name="entityToFind">Entity2 object to check.</param>
            <returns>true if Entity2 exists in list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.IndexOf(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Returns index in the list of given IEntity2 object.
            </summary>
            <param name="entityToFind">Entity2 Object to check</param>
            <returns>index in list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.OnClear">
            <summary>
            Performs a clear of the internals and its internal objects.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.OnClearComplete">
            <summary>
            Performs signaling of a list change, unless _listOperationInProgress is set to true
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.CopyTo(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2[],System.Int32)">
            <summary>
            copy the complete list of IEntity2 objects to an array of IEntity2 objects.
            </summary>
            <param name="destination">Array of IEntity2 Objects wherein the contents of the list will be copied.</param>
            <param name="index">Start index to copy from</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            ITypedList.GetItemProperties implementation. Necessary for Complex databinding. 
            </summary>
            <param name="listAccessors">Data to determine which property descriptor set to create</param>
            <returns>collection of property descriptors which will be used to create property related objects, like columns in a bound grid.</returns>
            <remarks>This is the version which will simply create property descriptors using the instance at index 0 or if there is no
            entity at index 0, using a temp one using the entity factory object. If no entity factory is present, an empty list
            is returned. Calling this version of the method should only be done when listAccessors is null or empty. In other
            cases, the <i>derived class</i> should use the listAccessors[length-1] PropertyDescriptor, check its TypeContainedAttribute
            attribute and read the type included in there to construct the property descriptors. In that situation, do not call
            <i>this</i> method version.</remarks>
            <exception cref="T:System.InvalidOperationException">When listAccessors is not empty. In that situation a derived class
            should use an instance of the type found in the TypeContainedAttribute attribute to construct the properties.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.GetListName(System.ComponentModel.PropertyDescriptor[])">
            <summary>
            ITypedList member
            </summary>
            <param name="listAccessors"></param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable member. 
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.Sort(System.Int32,System.ComponentModel.ListSortDirection)">
            <summary>
            Applies sorting like IBindingList.ApplySort, on the field with the index fieldIndex and with the direction specified.
            </summary>
            <param name="fieldIndex">Field to sort on</param>
            <param name="direction">the sort direction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.Sort(System.Int32,System.ComponentModel.ListSortDirection,System.Collections.IComparer)">
            <summary>
            Sorts the collection.
            </summary>
            <param name="fieldIndex">Field to sort on</param>
            <param name="direction">the sort direction</param>
            <param name="comparerToUse">The comparer to use. If null, it will use the default comparer.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.Sort(System.String,System.ComponentModel.ListSortDirection,System.Collections.IComparer)">
            <summary>
            Sorts the collection.
            </summary>
            <param name="propertyName">property to sort on</param>
            <param name="direction">the sort direction</param>
            <param name="comparerToUse">The comparer to use. If null, it will use the default comparer.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.Sort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection,System.Collections.IComparer)">
            <summary>
            Sorts the collection.
            </summary>
            <param name="descriptor">descriptor for property to sort on</param>
            <param name="direction">the sort direction</param>
            <param name="comparerToUse">The comparer to use. If null, it will use the default comparer.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.GetPropertyDescriptors(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Type)">
            <summary>
            Constructs the actual property descriptor collection.
            </summary>
            <param name="entityToCheck">entity instance which properties should be included in the collection</param>
            <param name="typeOfEntity">full type of the entity</param>
            <returns>filled in property descriptor collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.GetPropertyDescriptors(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Type,System.Boolean)">
            <summary>
            Constructs the actual property descriptor collection. Skips collection properties when the flag skipCollections is true.
            This is the case when the collection is in design mode and the path between bound collection and requested collection is 2 long, so
            another level would cause a loop (in m:n related entities) and will make vs.net hang.
            </summary>
            <param name="entityToCheck">entity instance which properties should be included in the collection</param>
            <param name="typeOfEntity">full type of the entity</param>
            <param name="skipCollections">true when the properties are for an entity in a collection at level 1 in a listAccessors path</param>
            <returns>filled in property descriptor collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            IBindingList member. 
            </summary>
            <exception cref="T:System.NotSupportedException">thrown when called. Not supported.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            IBindingList member. Sorts on the given property
            </summary>
            <exception cref="T:System.NotSupportedException">thrown when called and SupportsSorting is set to false.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            IBindingList member. 
            </summary>
            <remarks>Does a linear search through all the loaded entities in this collection.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.RemoveSort">
            <summary>
            IBindingList member. 
            </summary>
            <exception cref="T:System.NotSupportedException">thrown when called and SupportsSorting is set to false.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.AddNew">
            <summary>
            IBindingList member. Will add a new entity to the list, will set its parent collection property so CancelEdit will remove
            it from the list again, and will set its flag that it is added by databinding. 
            </summary>
            <remarks>Do not call this method from your own code. This is a databinding ONLY method.</remarks>
            <exception cref="T:System.InvalidOperationException">If this collection is set to ReadOnly</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            IBindingList member. 
            </summary>
            <exception cref="T:System.NotSupportedException">thrown when called. Not supported.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String@)">
            <summary>
            Converts this entity collection to XML, recursively. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.String@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.WriteXml(System.String@)">
            <summary>
            Converts this entity collection to XML, recursively. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.WriteXml(System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. Uses "EntityCollection" for the rootnode name
            </summary>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.WriteXml(System.String,System.String@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="entityCollectionXml">The complete outer XML as string, representing this complete entity object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.WriteXml(System.String,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this entity collection to XML. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.EntityCollection2Xml(System.String,System.Xml.XmlDocument,System.Collections.Hashtable,SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlNode@)">
            <summary>
            Produces the actual XML for this entity collection, recursively. Because it recurses through contained entities, 
            it keeps track of which objects are processed so cyclic references are not resulting in cyclic recursion and thus a crash. 
            </summary>
            <param name="rootNodeName">name of root element to use when building a complete XML representation of this entity collection.</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will create. This document is required
            to create the new node object</param>
            <param name="processedObjectIDs">Hashtable with ObjectIDs of all the objects already processed. If an entity's ObjectID is in the
            hashtable's key list, a ProcessedObjectReference tag is emitted and the entity will not recurse further. </param>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="entityCollectionNode">The XmlNode representing this complete entitycollection object, including containing data.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.ReadXml(System.String)">
            <summary>
            Will fill the entity collection and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntityCollection2.WriteXml() and the Xml has to be compatible with the structure of this entity collection.
            </summary>
            <param name="xmlData">string with Xml data which should be read into this entity collection and its members. This string has to be in the
            correct format and should be loadable into a new XmlDocument without problems</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.ReadXml(System.Xml.XmlNode)">
            <summary>
            Will fill the entity collection and its containing members (recursively) with the data stored in the XmlNode passed in. The XmlNode has to
            be filled with Xml in the format written by IEntityCollection2.WriteXml() and the Xml has to be compatible with the structure of this entity collection.
            </summary>
            <param name="node">XmlNode with Xml data which should be read into this entity and its members. Node's root element is the root element
            of the entity collection's Xml data</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.Xml2EntityCollection(System.Xml.XmlNode,System.Collections.Hashtable,System.Collections.ArrayList)">
            <summary>
            Performs the actual conversion from Xml to entity collection data. 
            </summary>
            <param name="node">current node which points to an entity collection node.</param>
            <param name="processedObjectIDs">ObjectID's of all entities instantiated</param>
            <param name="nodeEntityReferences">Arraylist with all the references to entity objects we probably do not yet have instantiated. This list
            is traversed after the xml tree has been processed. (not done by this routine, but by the caller)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.AddContainedEntitiesToContext">
            <summary>
            Adds the contained entities to the active set context.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.GetEntityCollectionDescription(System.Boolean)">
            <summary>
            Gets the entity collection description. This string is used in verbose trace messages.
            It will produce "EntityCollectionBase2", if the passed in switch flag is false, to prevent performance loss due to
            reflection activity for trace results which will never be seen.
            </summary>
            <param name="switchFlag">switch flag. If this flag is false, "EntityCollectionBase2" will be returned</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.OnListChanged(System.Int32,System.ComponentModel.ListChangedType)">
            <summary>
            Called when the List is changed and the event should be raised.
            </summary>
            <param name="index">Index of object causing the list change</param>
            <param name="typeOfChange">The type of change to reflect to subscribers</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.EntityInListOnEntityContentsChanged(System.Object,System.EventArgs)">
            <summary>
            Event handler for the EntityContentsChanged event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,SD.LLBLGen.Pro.ORMSupportClasses.IValidator)">
            <summary>
            Inits the class
            </summary>
            <param name="entityFactoryToUse">The EntityFactory2 to use when creating entity objects when a bound control is adding a new entity. </param>
            <param name="validatorToUse">The validator object to use when new entities are created using the entity factory. Ignored when null</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.GetList">
            <summary>
            Gets the list.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Constructs the XML output from the object graph which has this object as the root. 
            </summary>
            <param name="writer">Writer to which the xml is written to</param>
            <remarks>Uses XmlFormatAspect.Compact | XmlFormatAspect.MLTextInCDataBlocks | XmlFormatAspect.DatesInXmlDataType.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.GetSchema">
            <summary>
            Produce the schema, always return null, as the XmlSerializer object otherwise can't handle our code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.ReadXml(System.Xml.XmlReader)">
            <summary>
            Constructs an object graph with this object as the root from the xml contained by the passed in XmlReader object.
            </summary>
            <param name="reader">Reader with xml used to produce an object graph</param>
            <remarks>Uses XmlFormatAspect.Compact | XmlFormatAspect.MLTextInCDataBlocks | XmlFormatAspect.DatesInXmlDataType. Xml data should have been
            produced with WriteXml(writer) or a similar routine which is able to produce similar formatted XML</remarks>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.ListChanged">
            <summary>
            Event which is used in complex databinding.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.BeforeRemove">
            <summary>
            Event which is fired if Remove or RemoveAt(index) is called and the remove is not yet executed.
            'sender' is the object that will be removed from the list.
            </summary>
        </member>
        <member name="E:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.Disposed">
            <summary>
            Disposed event. Not used in this implementation.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.Site">
            <summary>
            Gets or sets the site.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.ContainsListCollection">
            <summary>
            Gets a value indicating whether [contains list collection].
            </summary>
            <value>
            	<c>true</c> if [contains list collection]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.AllowNew">
            <summary>
            IBindingList property. Default: true
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.SortProperty">
            <summary>
            IBindingList property. Default: null.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.SupportsSorting">
            <summary>
            IBindingList property. Default: false
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.IsSorted">
            <summary>
            IBindingList property. Default: false
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.AllowRemove">
            <summary>
            IBindingList property. Default: false
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.SupportsSearching">
            <summary>
            IBindingList property. Default: true
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.SortDirection">
            <summary>
            IBindingList property. Default: Ascending.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.AllowEdit">
            <summary>
            IBindingList property. Default: true
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.SupportsChangeNotification">
            <summary>
            IBindingList property. Default: supported
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.Items">
            <summary>
            Items contained by this collection. This is the SORTED collection (if sorted). Remove sorting first to get the original list.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.DirtyEntities">
            <summary>
            Returns a readonly collection of entities which are flagged as dirty. 
            This collection is determined on the fly, you can use this collection to remove dirty entities from this entity collection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.ContainsDirtyContents">
            <summary>
            Returns true if this collection contains dirty objects. If this collection contains dirty objects, an 
            already filled collection should not be refreshed until a save is performed. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.EntityFactoryToUse">
            <summary>
            The EntityFactory2 to use when creating entity objects when bound to a grid and AddNew is enabled.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.ValidatorToUse">
            <summary>
            Gets / sets the validator object to use when creating entity objects during an entity collection fetch
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.EntityValidatorToUse">
            <summary>
            Gets / sets the IEntityValidator instance to use when creating entity objects during an entity collection fetch
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.ConcurrencyPredicateFactoryToUse">
            <summary>
            Gets / sets the IConcurrencyPredicateFactory instance to use when creating entity objects during an entity collection fetch
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.Item(System.Int32)">
            <summary>
            Simple indexer. 
            </summary>
            <exception cref="T:System.InvalidOperationException">When a value is Set and the collection is marked ReadOnly</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.Count">
            <summary>
            The amount of IEntity2 elements in this entity collection
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.IsReadOnly">
            <summary>
            Get / set the readonly flag for this collection. If set to true, it will affect IBindingList parameters as well.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.DeserializationInProgress">
            <summary>
            sets the internal flag to say that this collection is being deserialized.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.DoNotPerformAddIfPresent">
            <summary>
            When set to true, an entity passed to Add() or Insert() will be tested if it's already present. If so, the index is returned and the
            object is not added again. If set to false (default: true) this check is not performed. Setting this property to true can slow down fetch logic.
            DataAccessAdapter's fetch logic sets this property to false during a multi-entity fetch.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.EntityFactoryName">
            <summary>
            Gets the name of the entity factory.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.ActiveContext">
            <summary>
            Gets / sets the active context this entity collection is in. Setting this property is not adding the entity collection to the context, 
            it will make contained entities be added to the passed in context. If the entity collection is already in a context, setting this property has no effect. 
            Setting this property is done by framework code, use the Context's Add/Get methods to work with contexts and entity collections.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionBase2.CachedPkHashes">
            <summary>
            Gets / sets the CachedPkHashes. This is a hashtable with the PK hashes for the entities in this collection. This is set during a 
            prefetch path fetch, to cache already calculated PK side hashes.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityCollectionForFetch">
            <summary>
            Container for entity fetch in DataAccessAdapter. This entity collection is an IEntityCollection2 implementation, just to use
            with the fetch logic to have a collection to store entities in, without the need for ITypedList implementations.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactorySelector">
            <summary>
            EntityFactorySelector form.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactorySelector.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactorySelector.SetFactoriesComboBox(System.Collections.ArrayList)">
            <summary>
            Sets the factories combo box.
            </summary>
            <param name="factories">ArrayList with names of the factories found</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactorySelector.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactorySelector.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactorySelector.CancelClicked">
            <summary>
            Gets cancelClicked
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFactorySelector.SelectedFactory">
            <summary>
            Gets the selected factory.
            </summary>
            <value></value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityField">
            <summary>
            Generic class which is used for the columns in the EntityFields collection, which forms the data store of
            any Entity class generated by LLBLGen Pro. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField">
            <summary>
            Interface for the EntityField type. An EntityField is the unit which is used to hold the value for a given property of an entity.
            SelfServicing specific.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore">
            <summary>
            Interface definition which defines the core IEntityField set. Is implemented by other interfaces like IEntityField and IEntityField2.
            Generic.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.AcceptChange">
            <summary>
            Accepts <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.CurrentValue"/> as the current value, discarding a saved original value.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.RejectChange">
            <summary>
            Rejects the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.CurrentValue"/>, the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.CurrentValue"/> will be discarded rolled back to the stored original value
            and <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.IsChanged"/> will report false.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.ForcedCurrentValueWrite(System.Object)">
            <summary>
            Overwrites the current value with the value passed. This bypasses value checking and field properties like readonly. 
            Used by internal code only. Do not call this from your code.
            </summary>
            <param name="value">Value to store as the current value</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.ForcedCurrentValueWrite(System.Object,System.Object)">
            <summary>
            Overwrites the current value with the value passed. This bypasses value checking and field properties like readonly. 
            Used by internal code only. Do not call this from your code.
            </summary>
            <param name="value">Value to store as the current value</param>
            <param name="dbValue">the value read from the database.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.GetHashCode">
            <summary>
            Overrides the GetHashCode() method. It will return the hashcode of the value of the field as the hashcode. 
            </summary>
            <returns>hashcode of the value of the field.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.GetDiscriminatorColumnFlag">
            <summary>
            Gets the discriminator column flag.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.Name">
            <summary>
            The name of the field. Name cannot be of zero length nor can they consist of solely spaces. Leading and trailing spaces are trimmed.
            </summary>
            <exception cref="T:System.ArgumentException">The value specified for Name is invalid.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.Alias">
            <summary>
            The alias to use for this field. Only used when this field object is part of a typed list. 
            Adapter: returns the alias set in the designer
            SelfServicing: returns Name
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.CurrentValue">
            <summary>
            Gets the current value for this field and sets the new value for this field, by overwriting current value. The value in 
            currentValue is discarded, versioning control has to save the original value of currentValue before this property is called. 
            </summary>
            <remarks>
            Calling this property directly will not trigger versioning control,
            thus calling this property directly is not recommended. Call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetNewFieldValue(System.String,System.Object)"/> instead.
            Type of the new value has to be the same as <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.DataType"/>, which is set in the
            constructor. If this field is set to readonly, an exception is raised. 
            </remarks>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMFieldIsReadonlyException">The field is set to readonly and can't be changed.</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.DataType"/> as this field.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.DbValue">
            <summary>
            Gets the value read from the database for this field. Use this field in optimistic concurrency predicates.
            Set by ForcedCurrentValueWrite(object, value) by the object fetcher logic.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.DataType">
            <summary>
            The <see cref="T:System.Type"/> of the values of this field.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.IsPrimaryKey">
            <summary>
            If set to true, in the constructor, this field will end up in the PrimaryKey field list of the containing IEntityFields object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.IsChanged">
            <summary>
            If the value of this field is changed, this property is set to true. Set when <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.CurrentValue"/> receives a valid value. Set to 
            false when <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.AcceptChange"/> is called succesfully.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.IsNullable">
            <summary>
            Will be true if this field can be set to NULL in the database, false otherwise. The Field Validation logic in an entity will use this
            flag to check if the field indeed can be set to NULL or not. Set by constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.IsNull">
            <summary>
            If the original value in the column for this entityfield is DBNull (NULL), this parameter should be set to true, otherwise to false.
            In BL Logic, it's impractical to work with NULL values, so these are converted to handable values. The developer can still determine if
            the original value was DBNull by checking this field. Using NULL values is not recommended. 
            If <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceColumnIsNullable"/> is false, IsNull is undefined.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.FieldIndex">
            <summary>
            Gets the field index related to this IEntityField, so the field can be used to retrieve the field index.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.ContainingObjectName">
            <summary>
            Name of the containing object this field belongs to (entity or typed view). This name is required to retrieve persistence information in Adapter
            Set via constructor. This name is also used by EntityRelation to determine alias - table connection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.ObjectAlias">
            <summary>
            Alias for the object containing the field this entity field is mapped on. Used in typed list selection lists.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.AggregateFunctionToApply">
            <summary>
            The aggregate function to apply on this field in a select query. Ignored in INSERT/UPDATE/DELETE queries. 
            Designed to be used in TypedList/TypedView classes.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.ExpressionToApply">
            <summary>
            The expression to apply to this field in a select list, update statement or predicate. 
            Expression is applied before AggregateFunctionToApply.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.IsForeignKey">
            <summary>
            If set to true, in the constructor, this field is part of a foreign key. This field is not used in LLBLGen Pro's code, however
            can be useful in user code.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.IsReadOnly">
            <summary>
            If set to true, in the constructor, no changes can be made to this field. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore.LinkedSuperTypeField">
            <summary>
            Gets / sets linkedSuperTypeField. Fields of PK/UC's are linked with eachother in a target-per-entity hierarchy. This is managed in
            the EntityFields(2) object.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo">
            <summary>
            Interface which holds the generic information for entity field persistence of an entity field. Instances of this interface
            are passed to logic with an instance of the IEntityFieldCore interface. SelfServicing implements both interfaces in one interface: IEntityField.
            Generic
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceCatalogName">
            <summary>
            The name of the catalog the SourceSchemaName is located in. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceSchemaName">
            <summary>
            The name of the schema which holds <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceObjectName"/>. Schema is used to generate SQL on the fly. 
            A common schema name in SqlServer is f.e. 'dbo'.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceObjectName">
            <summary>
            The name of the source object which holds <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceColumnName"/>. Can be a view or a table (or synonym of those). 
            Used to generate SQL on the fly.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceColumnName">
            <summary>
            The name of the corresponding column in a view or table for an entityfield. This name is used to map a column in a resultset onto the entity field.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceColumnMaxLength">
            <summary>
            The maximum length of the value of the entityfield (string/binary data). Is ignored for entityfields which hold non-string and non-binary values.
            ColumnMaxLength
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceColumnDbType">
            <summary>
            The type of the Column mapped onto the EntityField. The value stored here is the integer representation of the enum value of the type, f.e.
            SqlDbType.Int or OracleType.Int16
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceColumnIsNullable">
            <summary>
            Flag if the Column mapped onto the entityfield is nullable or not. 
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceColumnScale">
            <summary>
            The scale of the Column mapped onto the entityfield.
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.SourceColumnPrecision">
            <summary>
            The precision of the Column mapped onto the entityfield.
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.IsIdentity">
            <summary>
            If set to true, the Dynamic Query Engine (DQE) will assume the field is an Identity field and will act accordingly (i.e.: as the target database
            handles Identity fields: SqlServer will generate a new value itself, Oracle wants to have a sequence input.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.IdentityValueSequenceName">
            <summary>
            If <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.IsIdentity"/> is set to true, this property has to be set to the name of the sequence which supplies the value for the EntityField's
            corresponding table field. On SqlServer this is @@IDENTITY or SCOPE_IDENTITY() and only used when the row is succesfully inserted, however on Oracle
            this value is used to specify a new value and to retrieve the new value. Is undefined when <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.IsIdentity"/> is set to false.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.TypeConverterToUse">
            <summary>
            Gets the type converter to use. Only set through constructor and when a conversion is required from the .NET type returned by the 
            ADO.NET provider and the defined .NET type for this field.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo.ActualDotNetType">
            <summary>
            The .NET type of the field in the DB. This value is used to convert a currentvalue back to this type using TypeConverterToUse. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField.SetObjectAlias(System.String)">
            <summary>
            Sets the entity field's ObjectAlias property to the specified value
            </summary>
            <param name="objectAlias">value to set</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField.SetAggregateFunction(SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Sets the EntityField's AggregateFunctionToApply property
            </summary>
            <param name="functionToToApply">Function to apply.</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField.SetExpression(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Sets the Entity Field's ExpressionToToApply property
            </summary>
            <param name="expressionToToApply">Expression to to apply.</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField.ToXml">
            <summary>
            Converts this EntityField to an XmlNode. 
            </summary>
            <returns>This EntityField in XmlNode format</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this EntityField2 to an XmlNode. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will return. This document is required
            to create the new node object</param>
            <param name="entityFieldNode">The output parameter which will represent this EntityField2 as XmlNode</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.#ctor">
            <summary>
            CTor. Necessary for serialization. Do not use this CTor in code.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.#ctor(System.String,System.Type,System.String,System.Boolean,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Byte,System.Byte,System.Boolean,System.Boolean,System.String,System.Boolean,System.ComponentModel.TypeConverter,System.Type,System.Int32)">
            <summary>
            CTor
            </summary>
            <param name="name">The name of the field. Used in XML output. </param>
            <param name="dataType">The <see cref="T:System.Type"/> of the values of this field.</param>
            <param name="containingObjectName">Name of entity containing this field, example: CustomerEntity</param>
            <param name="isReadOnly">If set to true, no changes can be made to this field.</param>
            <param name="sourceSchemaName">The name of the schema which holds SourceObjectName. Schema is used to generate SQL on the fly. A common schema name in SqlServer is f.e. 'dbo'.</param>
            <param name="sourceObjectName">The name of the source object which holds SourceColumnName. Can be a view or a table. Used to generate SQL on the fly.</param>
            <param name="sourceColumnName">The name of the corresponding column in a view or table for this entityfield. This name is used to map a column in a resultset onto the entity field.</param>
            <param name="isSourceColumnNullable">Flag if the Column mapped onto the entityfield is nullable or not. </param>
            <param name="sourceColumnDbType">The type of the Column mapped onto the EntityField. The value stored here is the integer representation of the enum value of the type, f.e.
            SqlDbType.Int or OracleType.Int16</param>
            <param name="sourceColumnMaxLength">The maximum length of the value of this entityfield (string/binary data). Is ignored for 
            entityfields which hold non-string and non-binary values.</param>
            <param name="sourceColumnScale">The scale of the Column mapped onto the entityfield.</param>
            <param name="sourceColumnPrecision">The precision of the Column mapped onto the entityfield.</param>
            <param name="isPrimaryKey">If set to true, this field will end up in the PrimaryKey field list of the containing IEntityFields object.</param>
            <param name="isIdentity">If set to true, the Dynamic Query Engine (DQE) will assume the field is an Identity field and will act accordingly (i.e.: as the target database
            handles Identity fields: SqlServer will generate a new value itself, Oracle wants to have a sequence input.</param>
            <param name="identityValueSequenceName">If isIdentity is set to true, this property has to be set to the name of the sequence which supplies the value for the EntityField's
            corresponding table field. On SqlServer this is @@IDENTITY or SCOPE_IDENTITY() and only used when the row is succesfully inserted, however on Oracle
            f.e. this value is used to specify a new value and to retrieve the new value. Is undefined when isIdentity is set to false.</param>
            <param name="isForeignKey">If set to true, this field is a part of a foreign key.</param>
            <param name="typeConverterToUse">Type converter set when a conversion is required from the .NET type returned by the ADO.NET provider and the defined .NET type for this field.</param>
            <param name="actualDotNetType">The .NET type of the field in the DB. This value is used to convert a currentvalue back to this type using TypeConverterToUse. </param>
            <param name="fieldIndex">the field index related to this IEntityField, so the field can be used to retrieve the field index.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.#ctor(System.String,System.Type,System.String,System.Boolean,System.Object,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Byte,System.Byte,System.Boolean,System.Boolean,System.String,System.Boolean,System.ComponentModel.TypeConverter,System.Type,System.Int32)">
            <summary>
            CTor
            </summary>
            <param name="name">The name of the field. Used in XML output. </param>
            <param name="dataType">The <see cref="T:System.Type"/> of the values of this field.</param>
            <param name="containingObjectName">Name of entity containing this field, example: CustomerEntity</param>
            <param name="isReadOnly">If set to true, no changes can be made to this field.</param>
            <param name="currentValue">The current value for this field.</param>
            <param name="sourceSchemaName">The name of the schema which holds SourceObjectName. Schema is used to generate SQL on the fly. A common schema name in SqlServer is f.e. 'dbo'.</param>
            <param name="sourceObjectName">The name of the source object which holds SourceColumnName. Can be a view or a table. Used to generate SQL on the fly.</param>
            <param name="sourceColumnName">The name of the corresponding column in a view or table for this entityfield. This name is used to map a column in a resultset onto the entity field.</param>
            <param name="isSourceColumnNullable">Flag if the Column mapped onto the entityfield is nullable or not. </param>
            <param name="sourceColumnDbType">The type of the Column mapped onto the EntityField. The value stored here is the integer representation of the enum value of the type, f.e.
            SqlDbType.Int or OracleType.Int16</param>
            <param name="sourceColumnMaxLength">The maximum length of the value of this entityfield (string/binary data). Is ignored for entityfields which hold non-string and non-binary values.ColumnMaxLength</param>
            <param name="sourceColumnScale">The scale of the Column mapped onto the entityfield.</param>
            <param name="sourceColumnPrecision">The precision of the Column mapped onto the entityfield.</param>
            <param name="isPrimaryKey">If set to true, this field will end up in the PrimaryKey field list of the containing IEntityFields object.</param>
            <param name="isIdentity">If set to true, the Dynamic Query Engine (DQE) will assume the field is an Identity field and will act accordingly (i.e.: as the target database
            handles Identity fields: SqlServer will generate a new value itself, Oracle wants to have a sequence input.</param>
            <param name="identityValueSequenceName">If isIdentity is set to true, this property has to be set to the name of the sequence which supplies the value for the EntityField's
            corresponding table field. On SqlServer this is @@IDENTITY or SCOPE_IDENTITY() and only used when the row is succesfully inserted, however on Oracle
            f.e. this value is used to specify a new value and to retrieve the new value. Is undefined when isIdentity is set to false.</param>
            <param name="isForeignKey">If set to true, this field is a part of a foreign key.</param>
            <param name="typeConverterToUse">Type converter set when a conversion is required from the .NET type returned by the ADO.NET provider and the defined .NET type for this field.</param>
            <param name="actualDotNetType">The .NET type of the field in the DB. This value is used to convert a currentvalue back to this type using TypeConverterToUse. </param>
            <param name="fieldIndex">the field index related to this IEntityField, so the field can be used to retrieve the field index.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.#ctor(System.String,System.Type,System.String,System.Boolean,System.Object,System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Byte,System.Byte,System.Boolean,System.Boolean,System.String,System.Boolean,System.ComponentModel.TypeConverter,System.Type,System.Int32)">
            <summary>
            CTor
            </summary>
            <param name="name">The name of the field. Used in XML output. </param>
            <param name="dataType">The <see cref="T:System.Type"/> of the values of this field.</param>
            <param name="containingObjectName">Name of entity containing this field, example: CustomerEntity</param>
            <param name="isReadOnly">If set to true, no changes can be made to this field.</param>
            <param name="currentValue">The current value for this field.</param>
            <param name="sourceCatalogName">The name of the catalog the sourceSchemaName is located in.</param>
            <param name="sourceSchemaName">The name of the schema which holds SourceObjectName. Schema is used to generate SQL on the fly. A common schema name in SqlServer is f.e. 'dbo'.</param>
            <param name="sourceObjectName">The name of the source object which holds SourceColumnName. Can be a view or a table. Used to generate SQL on the fly.</param>
            <param name="sourceColumnName">The name of the corresponding column in a view or table for this entityfield. This name is used to map a column in a resultset onto the entity field.</param>
            <param name="isSourceColumnNullable">Flag if the Column mapped onto the entityfield is nullable or not. </param>
            <param name="sourceColumnDbType">The type of the Column mapped onto the EntityField. The value stored here is the integer representation of the enum value of the type, f.e.
            SqlDbType.Int or OracleType.Int16</param>
            <param name="sourceColumnMaxLength">The maximum length of the value of this entityfield (string/binary data). Is ignored for entityfields which hold non-string and non-binary values.ColumnMaxLength</param>
            <param name="sourceColumnScale">The scale of the Column mapped onto the entityfield.</param>
            <param name="sourceColumnPrecision">The precision of the Column mapped onto the entityfield.</param>
            <param name="isPrimaryKey">If set to true, this field will end up in the PrimaryKey field list of the containing IEntityFields object.</param>
            <param name="isIdentity">If set to true, the Dynamic Query Engine (DQE) will assume the field is an Identity field and will act accordingly (i.e.: as the target database
            handles Identity fields: SqlServer will generate a new value itself, Oracle wants to have a sequence input.</param>
            <param name="identityValueSequenceName">If isIdentity is set to true, this property has to be set to the name of the sequence which supplies the value for the EntityField's
            corresponding table field. On SqlServer this is @@IDENTITY or SCOPE_IDENTITY() and only used when the row is succesfully inserted, however on Oracle
            f.e. this value is used to specify a new value and to retrieve the new value. Is undefined when isIdentity is set to false.</param>
            <param name="isForeignKey">If set to true, this field is a part of a foreign key.</param>
            <param name="typeConverterToUse">Type converter set when a conversion is required from the .NET type returned by the ADO.NET provider and the defined .NET type for this field.</param>
            <param name="actualDotNetType">The .NET type of the field in the DB. This value is used to convert a currentvalue back to this type using TypeConverterToUse. </param>
            <param name="fieldIndex">the field index related to this IEntityField, so the field can be used to retrieve the field index.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.CompareTo(System.Object)">
            <summary>
            Compares the given entityfield instance with this instance using a value compare with <b>case sensitive</b> comparer logic.
            this is done by comparing the name, the source schema, object and column name. If there is any mismatch, the
            comparisson is stopped and the result of the mismatching compare is returned.
            </summary>
            <param name="fieldToCompare">The EntityField to compare with the current value.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the comparands. See <see cref="M:System.IComparable.CompareTo(System.Object)"/>.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.GetHashCode">
            <summary>
            Overrides the GetHashCode() method. It will return the hashcode of the value of the field as the hashcode. 
            </summary>
            <returns>hashcode of the value of the field.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.ToXml">
            <summary>
            Converts this EntityField to an XmlNode. 
            </summary>
            <returns>This EntityField in XmlNode format</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this EntityField to an XmlNode. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will return. This document is required
            to create the new node object</param>
            <param name="entityFieldNode">The output parameter which will represent this EntityField as XmlNode</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.AcceptChange">
            <summary>
            Accepts the value of the current value as the final current value. Original value is discarded
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.RejectChange">
            <summary>
            Rejects the value of the current value and resets current value with the original value, and <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.IsChanged"/> will report false.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.InitClass(System.String,System.Type,System.Boolean,System.Object,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Byte,System.Byte,System.Boolean,System.Boolean,System.String,System.Int32,System.String,System.String,System.Boolean,System.ComponentModel.TypeConverter,System.Type)">
            <summary>
            Initializes the class' member variables. for parameter descriptions, see the constructor(s).
            </summary>
            <param name="name">Name.</param>
            <param name="dataType">Type of the data.</param>
            <param name="isReadOnly"><see langword="true"/> if [is read only]; otherwise, <see langword="false"/>.</param>
            <param name="currentValue">Current value.</param>
            <param name="sourceSchemaName">Name of the source schema.</param>
            <param name="sourceObjectName">Name of the source object.</param>
            <param name="sourceColumnName">Name of the source column.</param>
            <param name="isSourceColumnNullable"><see langword="true"/> if [is source column nullable]; otherwise, <see langword="false"/>.</param>
            <param name="sourceColumnDbType">Type of the source column db.</param>
            <param name="sourceColumnMaxLength">Length of the source column max.</param>
            <param name="sourceColumnScale">Source column scale.</param>
            <param name="sourceColumnPrecision">Source column precision.</param>
            <param name="isPrimaryKey"><see langword="true"/> if [is primary key]; otherwise, <see langword="false"/>.</param>
            <param name="isIdentity"><see langword="true"/> if [is identity]; otherwise, <see langword="false"/>.</param>
            <param name="identityValueSequenceName">Name of the identity value sequence.</param>
            <param name="fieldIndex">Index of the field.</param>
            <param name="sourceCatalogName">Name of the source catalog.</param>
            <param name="containingObjectName">Name of the containing object.</param>
            <param name="isForeignKey"><see langword="true"/> if [is foreign key]; otherwise, <see langword="false"/>.</param>
            <param name="typeConverterToUse">Type converter to use.</param>
            <param name="actualDotNetType">Type of the actual dot net.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.Clone">
            <summary>
            Creates a deep copy of this IEntityField object
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.ForcedCurrentValueWrite(System.Object)">
            <summary>
            Overwrites the current value with the value passed. This bypasses value checking and field properties like readonly. 
            Used by internal code only. Do not call this from your code.
            </summary>
            <param name="value">Value to store as the current value</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.ForcedCurrentValueWrite(System.Object,System.Object)">
            <summary>
            Overwrites the current value with the value passed. This bypasses value checking and field properties like readonly. 
            Used by internal code only. Do not call this from your code.
            </summary>
            <param name="value">Value to store as the current value</param>
            <param name="dbValue">the value read from the database.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.ForcedCurrentValueWriteFromSubType(System.Object)">
            <summary>
            Forceds the current value write, with a call from a sub type. It will only propagate this call up to supertype linked field, (if any)
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.ForcedCurrentValueWriteFromSuperType(System.Object)">
            <summary>
            Forceds the current value write, with a call from the supertype. It will only propagate this call down to subtype linked field, (if any)
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SetDbValue(System.Object)">
            <summary>
            Sets the DbValue property with the value passed in. 
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.ForcedChangedWrite(System.Boolean)">
            <summary>
            Forces a set of the IsChanged flag for this field. 
            </summary>
            <param name="isChangedValue">new value for IsChanged.</param>
            <remarks>Do not call this method from your code. This is an internal method</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.ForcedTypeWrite(System.Type)">
            <summary>
            Overwrites DataType with the value specified without checking for type compatibility or readonly flags.
            </summary>
            <remarks>Do not call this method from your code. This is an internal method</remarks>
            <param name="dataType">Value to store as DataType</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SetContainingObjectName(System.String)">
            <summary>
            Sets the name of the containing object.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.EndEdit">
            <summary>
            IEditableObject method. Used by databinding.
            The field is kept marked changed, in effect, this method is empty.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.CancelEdit">
            <summary>
            IEditableObject method. Used by databinding.
            The currentvalue is reset by the original value.
            The field is marked unchanged.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.BeginEdit">
            <summary>
            IEditableObject method. Used by databinding.
            Original value is overwritten by currentValue, currentValue keeps its value.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.PropagateChangeToLinkedFields">
            <summary>
            Propagates the change to linked fields.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SetDiscriminatorColumnFlag(System.Boolean)">
            <summary>
            Sets the discriminator column flag.
            </summary>
            <param name="value"><see langword="true"/> if [value]; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.GetDiscriminatorColumnFlag">
            <summary>
            Gets the discriminator column flag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            	<see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SetObjectAlias(System.String)">
            <summary>
            Sets the entity field's ObjectAlias property to the specified value
            </summary>
            <param name="objectAlias">value to set</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SetAggregateFunction(SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Sets the EntityField's AggregateFunctionToApply property
            </summary>
            <param name="functionToToApply">Function to apply.</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SetExpression(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Sets the Entity Field's ExpressionToToApply property
            </summary>
            <param name="expressionToToApply">Expression to to apply.</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.PropagateForcedCurrentValueWriteToSuperType(System.Object)">
            <summary>
            Propagates the value to the linked fields from supertype
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.PropagateForcedCurrentValueWriteToSubTypes(System.Object)">
            <summary>
            Propagates the value to the linked fields from subtypes
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareExpressionPredicate to represent leftOperand == rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand != rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate which is negated</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '&gt;' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &gt; rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_GreaterThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '&gt;=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &gt;= rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_LessThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '&lt;' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &lt; rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_LessThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '&lt;=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &lt;= rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object[])">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareRangePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="values">the values to compare with.</param>
            <returns>A FieldCompareRangePredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object[])">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareRangePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="values">the values to compare with.</param>
            <returns>A FieldCompareRangePredicate which is negated</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Collections.ArrayList)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareRangePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="values">the values to compare with.</param>
            <returns>A FieldCompareRangePredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Collections.ArrayList)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareRangePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="values">the values to compare with.</param>
            <returns>A FieldCompareRangePredicate which is negated</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareValue/Null predicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with. If value is null, a FieldCompareNullPredicate will be created instead.</param>
            <returns>A FieldCompareNullPredicate or FieldCompareValuePredicate with the operator ComparisonOperator.Equal</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareValue/Null predicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with. If value is null, a FieldCompareNullPredicate will be created instead.</param>
            <returns>A FieldCompareNullPredicate or FieldCompareValuePredicate with the operator ComparisonOperator.NotEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object)">
            <summary>
            Operator overload for the '&gt;' operator to produce a FieldCompareValuePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with.</param>
            <returns>A FieldCompareValuePredicate with the operator ComparisonOperator.GreaterThan</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_GreaterThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object)">
            <summary>
            Operator overload for the '&gt;=' operator to produce a FieldCompareValuePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with.</param>
            <returns>A FieldCompareValuePredicate with the operator ComparisonOperator.GreaterEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_LessThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object)">
            <summary>
            Operator overload for the '&lt;' operator to produce a FieldCompareValuePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with.</param>
            <returns>A FieldCompareValuePredicate with the operator ComparisonOperator.LesserThan</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_LessThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object)">
            <summary>
            Operator overload for the '&lt;=' operator to produce a FieldCompareValuePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with.</param>
            <returns>A FieldCompareValuePredicate with the operator ComparisonOperator.LessEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.Equal</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.NotEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '&gt;' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.GreaterThan</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_GreaterThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '&gt;=' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.GreaterEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_LessThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '&lt;' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.LesserThan</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_LessThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '&lt;=' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.LessEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Modulus(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.String)">
            <summary>
            Operator overload for the '%' operator to produce a FieldLikePredicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="pattern">Pattern.</param>
            <returns>
            A FieldLikePredicate 
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents field + value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents field + value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents field + expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents field + value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents field + field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field + value</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Addition(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents value + field
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value + field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents expression + field
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents field * value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents field * value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents field * expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field * expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents field * field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field * field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Multiply(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents value * field
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value * field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents expression * field
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents field - value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents field - value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents field - expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field - expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents field - field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field - field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Subtraction(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents value - field
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value - field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents expression - field
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,System.Object)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents field / value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents field / value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents field / expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field / expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents field / field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field / field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Division(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents value / field
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value / field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.EntityField)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents expression / field
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.op_BitwiseOr(SD.LLBLGen.Pro.ORMSupportClasses.EntityField,SD.LLBLGen.Pro.ORMSupportClasses.SortOperator)">
            <summary>
            Operator overload for the '|' operator to concatenate sortoperators to a field
            </summary>
            <param name="field">Field.</param>
            <param name="operatorToUse">Operator to use.</param>
            <returns>new SortClause object</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.ActualDotNetType">
            <summary>
            The .NET type of the field in the DB. This value is used to convert a currentvalue back to this type using TypeConverterToUse. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.LinkedSuperTypeField">
            <summary>
            Gets / sets linkedSuperTypeField. Fields of PK/UC's are linked with eachother in a target-per-entity hierarchy. This is managed in
            the EntityFields object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.LinkedSubTypeFields">
            <summary>
            Gets linkedSubTypeFields
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceCatalogName">
            <summary>
            The name of the catalog the SourceSchemaName is located in. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceSchemaName">
            <summary>
            The name of the schema which holds <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceObjectName"/>. Schema is used to generate SQL on the fly. 
            A common schema name in SqlServer is f.e. 'dbo'.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceObjectName">
            <summary>
            The name of the source object which holds <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceColumnName"/>. Can be a view or a table. Used to generate SQL on the fly.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceColumnName">
            <summary>
            The name of the corresponding column in a view or table for this entityfield. This name is used to map a column in a resultset onto the entity field.
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceColumnMaxLength">
            <summary>
            The maximum length of the value of this entityfield (string/binary data). Is ignored for entityfields which hold non-string and non-binary values.
            ColumnMaxLength
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceColumnDbType">
            <summary>
            The type of the Column mapped onto the EntityField. The value stored here is the integer representation of the enum value of the type, f.e.
            SqlDbType.Int or OracleType.Int16
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceColumnIsNullable">
            <summary>
            Flag if the Column mapped onto the entityfield is nullable or not. 
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceColumnScale">
            <summary>
            The scale of the Column mapped onto the entityfield.
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.SourceColumnPrecision">
            <summary>
            The precision of the Column mapped onto the entityfield.
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.Name">
            <summary>
            The name of the field. Used in XML output. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.Alias">
            <summary>
            The alias to use for this field. Only used when this field object is part of a typed list. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.OriginalValue">
            <summary>
            The original value for this field when the field is changed and the change has not been accepted yet.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.CurrentValue">
            <summary>
            Gets the current value for this field and sets the new value for this field, by overwriting current value. The value in 
            currentValue is discarded, versioning control has to save the original value of currentValue before this property is called. 
            </summary>
            <remarks>
            Calling this property directly will not trigger versioning control,
            thus calling this property directly is not recommended. Call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetNewFieldValue(System.String,System.Object)"/> instead.
            Type of the new value has to be the same as <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.DataType"/>, which is set in the
            constructor. If this field is set to readonly, an exception is raised. 
            </remarks>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMFieldIsReadonlyException">The field is set to readonly and can't be changed.</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.DataType"/> as this field.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.DataType">
            <summary>
            The <see cref="T:System.Type"/> of the values of this field.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.IsReadOnly">
            <summary>
            If set to true, in the constructor, no changes can be made to this field. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.IsPrimaryKey">
            <summary>
            If set to true, in the constructor, this field will end up in the PrimaryKey field list of the containing IEntityFields object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.IsChanged">
            <summary>
            If the value of this field is changed, this property is set to true. Set when <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.CurrentValue"/> receives a valid value. Set to 
            false when <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.AcceptChange"/> is called succesfully.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.IsNullable">
            <summary>
            Will be true if this field can be set to NULL in the database, false otherwise. The Field Validation logic in an entity will use this
            flag to check if the field indeed can be set to NULL or not.
            For selfservicing entities, this flag returns the same value as SourceColumnIsNullable.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.IsNull">
            <summary>
            If the original value in the column for this entityfield is DBNull (NULL), this parameter should be set to true, otherwise to false.
            In BL Logic, it's impractical to work with NULL values, so these are converted to workable values. The developer can still determine if
            the original value was DBNull by checking this field. Using NULL values is not recommended. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.IsIdentity">
            <summary>
            If set to true, the Dynamic Query Engine (DQE) will assume the field is an Identity field and will act accordingly (i.e.: as the target database
            handles Identity fields: SqlServer will generate a new value itself, Oracle wants to have a sequence input.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.IdentityValueSequenceName">
            <summary>
            If <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.IsIdentity"/> is set to true, this property has to be set to the name of the sequence which supplies the value for the EntityField's
            corresponding table field. On SqlServer this is @@IDENTITY or SCOPE_IDENTITY() and only used when the row is succesfully inserted, however on Oracle
            f.e. this value is used to specify a new value and to retrieve the new value. Is undefined when <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.IsIdentity"/> is set to false.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.FieldIndex">
            <summary>
            Gets the field index related to this IEntityField, so the field can be used to retrieve the field index.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.DbValue">
            <summary>
            Gets the value read from the database for this field. Use this field in optimistic concurrency predicates.
            Set by ForcedCurrentValueWrite(object, value) by the object fetcher logic.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.ContainingObjectName">
            <summary>
            Name of the containing object this field belongs to (entity or typed view). This name is required to retrieve persistence information in Adapter
            Set via constructor. This name is also used by EntityRelation to determine alias - table connection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.ObjectAlias">
            <summary>
            Alias for the object containing the field this entity field is mapped on. Used in typed list selection lists.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.AggregateFunctionToApply">
            <summary>
            The aggregate function to apply on this field in a select query. Ignored in INSERT/UPDATE/DELETE queries. 
            Designed to be used in TypedList/TypedView classes.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.ExpressionToApply">
            <summary>
            The expression to apply to this field in a select list, update statement or predicate. 
            Expression is applied before AggregateFunctionToApply.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.IsForeignKey">
            <summary>
            If set to true, in the constructor, this field is part of a foreign key. This field is not used in LLBLGen Pro's code, however
            can be useful in user code.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField.TypeConverterToUse">
            <summary>
            Gets the type converter to use. Only set through constructor and when a conversion is required from the .NET type returned by the 
            ADO.NET provider and the defined .NET type for this field.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2">
            <summary>
            Generic class which is used for the columns in the EntityFields collection, which forms the data store of
            any Entity class generated by LLBLGen Pro. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2">
            <summary>
            Interface for the EntityField2 type. An EntityField2 is the unit which is used to hold the value for a given property of an entity.
            Adapter specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2.SetObjectAlias(System.String)">
            <summary>
            Sets the entity field's ObjectAlias property to the specified value
            </summary>
            <param name="objectAlias">value to set</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2.SetAggregateFunction(SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Sets the EntityField's AggregateFunctionToApply property
            </summary>
            <param name="functionToToApply">Function to apply.</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2.SetExpression(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Sets the Entity Field's ExpressionToToApply property
            </summary>
            <param name="expressionToToApply">Expression to to apply.</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this EntityField2 to an XmlNode. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will return. This document is required
            to create the new node object</param>
            <param name="entityFieldNode">The output parameter which will represent this EntityField2 as XmlNode</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2.MaxLength">
            <summary>
            The maximum length of the value of the entityfield (string/binary data). Is ignored for entityfields which hold non-string and non-binary values.
            Value initially set for this field is the length of the database column this field is mapped on.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2.Scale">
            <summary>
            The scale of the value for this field. 
            Value initially set for this field is the scale of the database column this field is mapped on.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2.Precision">
            <summary>
            The precision of the value for this field.
            Value initially set for this field is the precision of the database column this field is mapped on.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.#ctor">
            <summary>
            CTor. Necessary for serialization. Do not use this CTor in code.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.#ctor(System.String,System.String,System.Type,System.Boolean,System.Int32,System.Int32,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            CTor
            </summary>
            <param name="name">The name of the field. Used in XML output. </param>
            <param name="containingObjectName">Name of containing object this field belongs to.</param>
            <param name="dataType">The <see cref="T:System.Type"/> of the values of this field.</param>
            <param name="isPrimaryKey">If set to true, this field will end up in the PrimaryKey field list of the containing IEntityFields object.
            handles Identity fields: SqlServer will generate a new value itself, Oracle wants to have a sequence input.</param>
            <param name="fieldIndex">the field index related to this IEntityField, so the field can be used to retrieve the field index.</param>
            <param name="maxLength">The maximum length of the value of the entityfield (string/binary data). Is ignored for entityfields which hold 
            non-string and non-binary values.</param>
            <param name="scale">The scale of the value for this field.</param>
            <param name="precision">The precision of the value for this field.</param>
            <param name="isForeignKey">If set to true, this field is a part of a foreign key.</param>
            <param name="isReadOnly">If set to true, the value of the field can't be set through regular code</param>
            <param name="isNullable">If set to true, the field is seen as a nullable field and the database field this field is mapped on can accept NULL values</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.#ctor(System.String,System.String,System.Type,System.Object,System.Boolean,System.Int32,System.Int32,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            CTor
            </summary>
            <param name="name">The name of the field. Used in XML output. </param>
            <param name="containingObjectName">Name of containing object this field belongs to.</param>
            <param name="dataType">The <see cref="T:System.Type"/> of the values of this field.</param>
            <param name="currentValue">The current value for this field.</param>
            <param name="isPrimaryKey">If set to true, this field will end up in the PrimaryKey field list of the containing IEntityFields object.</param>
            <param name="fieldIndex">the field index related to this IEntityField, so the field can be used to retrieve the field index.</param>
            <param name="maxLength">The maximum length of the value of the entityfield (string/binary data). Is ignored for entityfields which hold 
            non-string and non-binary values.</param>
            <param name="scale">The scale of the value for this field.</param>
            <param name="precision">The precision of the value for this field.</param>
            <param name="isForeignKey">If set to true, this field is a part of a foreign key.</param>
            <param name="isReadOnly">If set to true, the value of the field can't be set through regular code</param>
            <param name="isNullable">If set to true, the field is seen as a nullable field and the database field this field is mapped on can accept NULL values</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.CompareTo(System.Object)">
            <summary>
            Compares the given entityfield instance with this instance using a value compare with <b>case sensitive</b> comparer logic.
            this is done by comparing the name, the source schema, object and column name. If there is any mismatch, the
            comparisson is stopped and the result of the mismatching compare is returned.
            </summary>
            <param name="fieldToCompare">The EntityField to compare with the current value.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the comparands. See <see cref="M:System.IComparable.CompareTo(System.Object)"/>.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.GetHashCode">
            <summary>
            Overrides the GetHashCode() method. It will return the hashcode of the value of the field as the hashcode. 
            </summary>
            <remarks>byte[] typed fields will have all the bytes in their array added together with per byte it's multiplied with the index+1</remarks>
            <returns>hashcode of the value of the field.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode@)">
            <summary>
            Converts this EntityField2 to an XmlNode. 
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the node this method will return. This document is required
            to create the new node object</param>
            <param name="entityFieldNode">The output parameter which will represent this EntityField2 as XmlNode</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.AcceptChange">
            <summary>
            Accepts the value of the current value as the final current value. Original value is discarded
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.RejectChange">
            <summary>
            Rejects the value of the current value and resets current value with the original value, and <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.IsChanged"/> will report false.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.InitClass(System.String,System.String,System.Type,System.Object,System.Boolean,System.Int32,System.Int32,System.Byte,System.Byte,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes the class' member variables. for parameter descriptions, see the constructor(s).
            </summary>
            <param name="name"></param>
            <param name="containingObjectName"></param>
            <param name="dataType"></param>
            <param name="currentValue"></param>
            <param name="isPrimaryKey"></param>
            <param name="fieldIndex"></param>
            <param name="maxLength"></param>
            <param name="scale"></param>
            <param name="precision"></param>
            <param name="isForeignKey"></param>
            <param name="isReadOnly"></param>
            <param name="isNullable"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.Clone">
            <summary>
            Creates a deep copy of this IEntityField2 object
            </summary>
            <returns>A deep copy of this object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.ForcedCurrentValueWrite(System.Object)">
            <summary>
            Overwrites the current value with the value passed. This bypasses value checking and field properties. 
            Used by internal code only. Do not call this from your code.
            </summary>
            <param name="value">Value to store as the current value</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.ForcedCurrentValueWrite(System.Object,System.Object)">
            <summary>
            Overwrites the current value with the value passed. This bypasses value checking and field properties like readonly. 
            Used by internal code only. Do not call this from your code.
            </summary>
            <param name="value">Value to store as the current value</param>
            <param name="dbValue">the value read from the database.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.SetDbValue(System.Object)">
            <summary>
            Sets the DbValue property with the value passed in. 
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.ForcedTypeWrite(System.Type)">
            <summary>
            Overwrites DataType with the value specified without checking for type compatibility or readonly flags.
            </summary>
            <remarks>Do not call this method from your code. This is an internal method</remarks>
            <param name="dataType">Value to store as DataType</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.ForcedChangedWrite(System.Boolean)">
            <summary>
            Forces a set of the IsChanged flag for this field. 
            </summary>
            <param name="isChangedValue">new value for IsChanged.</param>
            <remarks>Do not call this method from your code. This is an internal method</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.ForcedIsNullWrite(System.Boolean)">
            <summary>
            Forcess a set of the IsNull flag
            </summary>
            <param name="isNull"><see langword="true"/> if [is null]; otherwise, <see langword="false"/>.</param>
            <remarks>Do not call this method from your code. This is an internal method</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.SetContainingObjectName(System.String)">
            <summary>
            Sets the name of the containing object.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.EndEdit">
            <summary>
            IEditableObject method. Used by databinding.
            The field is kept marked changed, in effect, this method is empty.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.CancelEdit">
            <summary>
            IEditableObject method. Used by databinding.
            The currentvalue is reset by the original value.
            The field is marked unchanged.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.BeginEdit">
            <summary>
            IEditableObject method. Used by databinding.
            Original value is overwritten by currentValue, currentValue keeps its value.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.ForcedCurrentValueWriteFromSubType(System.Object)">
            <summary>
            Forceds the current value write, with a call from a sub type. It will only propagate this call up to supertype linked field, (if any)
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.ForcedCurrentValueWriteFromSuperType(System.Object)">
            <summary>
            Forceds the current value write, with a call from the supertype. It will only propagate this call down to subtype linked field, (if any)
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.PropagateChangeToLinkedFields">
            <summary>
            Propagates the change to linked fields.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.SetDiscriminatorColumnFlag(System.Boolean)">
            <summary>
            Sets the discriminator column flag.
            </summary>
            <param name="value"><see langword="true"/> if [value]; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.GetDiscriminatorColumnFlag">
            <summary>
            Gets the discriminator column flag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            	<see langword="true"/> if the specified <see cref="T:System.Object"/> is equal to the
            current <see cref="T:System.Object"/>; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.SetObjectAlias(System.String)">
            <summary>
            Sets the entity field's ObjectAlias property to the specified value
            </summary>
            <param name="objectAlias">value to set</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.SetAggregateFunction(SD.LLBLGen.Pro.ORMSupportClasses.AggregateFunction)">
            <summary>
            Sets the EntityField's AggregateFunctionToApply property
            </summary>
            <param name="functionToToApply">Function to apply.</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.SetExpression(SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            Sets the Entity Field's ExpressionToToApply property
            </summary>
            <param name="expressionToToApply">Expression to to apply.</param>
            <returns>The entity field object the method was called on, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.PropagateForcedCurrentValueWriteToSuperType(System.Object)">
            <summary>
            Propagates the value to the linked fields from supertype
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.PropagateForcedCurrentValueWriteToSubTypes(System.Object)">
            <summary>
            Propagates the value to the linked fields from subtypes
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareExpressionPredicate to represent leftOperand == rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand != rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate which is negated</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '&gt;' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &gt; rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_GreaterThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '&gt;=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &gt;= rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_LessThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '&lt;' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &lt; rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_LessThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '&lt;=' operator to produce a FieldCompareExpressionPredicate to represent leftOperand &lt;= rigthOperand
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>A FieldCompareExpressionPredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object[])">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareRangePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="values">the values to compare with.</param>
            <returns>A FieldCompareRangePredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object[])">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareRangePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="values">the values to compare with.</param>
            <returns>A FieldCompareRangePredicate which is negated</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Collections.ArrayList)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareRangePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="values">the values to compare with.</param>
            <returns>A FieldCompareRangePredicate</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Collections.ArrayList)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareRangePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="values">the values to compare with.</param>
            <returns>A FieldCompareRangePredicate which is negated</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareValue/Null predicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with. If value is null, a FieldCompareNullPredicate will be created instead.</param>
            <returns>A FieldCompareNullPredicate or FieldCompareValuePredicate with the operator ComparisonOperator.Equal</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareValue/Null predicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with. If value is null, a FieldCompareNullPredicate will be created instead.</param>
            <returns>A FieldCompareNullPredicate or FieldCompareValuePredicate with the operator ComparisonOperator.NotEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object)">
            <summary>
            Operator overload for the '&gt;' operator to produce a FieldCompareValuePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with.</param>
            <returns>A FieldCompareValuePredicate with the operator ComparisonOperator.GreaterThan</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_GreaterThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object)">
            <summary>
            Operator overload for the '&gt;=' operator to produce a FieldCompareValuePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with.</param>
            <returns>A FieldCompareValuePredicate with the operator ComparisonOperator.GreaterEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_LessThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object)">
            <summary>
            Operator overload for the '&lt;' operator to produce a FieldCompareValuePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with.</param>
            <returns>A FieldCompareValuePredicate with the operator ComparisonOperator.LesserThan</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_LessThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object)">
            <summary>
            Operator overload for the '&lt;=' operator to produce a FieldCompareValuePredicate. 
            </summary>
            <param name="field">Field to compare</param>
            <param name="value">the value to compare with.</param>
            <returns>A FieldCompareValuePredicate with the operator ComparisonOperator.LessEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Equality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '==' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.Equal</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Inequality(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '!=' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.NotEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_GreaterThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '&gt;' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.GreaterThan</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_GreaterThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '&gt;=' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.GreaterEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_LessThan(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '&lt;' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.LesserThan</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_LessThanOrEqual(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '&lt;=' operator to produce a FieldCompareExpression predicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="toCompareWith">To compare with.</param>
            <returns>A FieldCompareExpressionPredicate with operator ComparisonOperator.LessEqual</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Modulus(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.String)">
            <summary>
            Operator overload for the '%' operator to produce a FieldLikePredicate.
            </summary>
            <param name="field">Field to compare</param>
            <param name="pattern">Pattern.</param>
            <returns>
            A FieldLikePredicate 
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents field + value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents field + value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents field + expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents field + value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents field + field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field + value</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Addition(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents value + field
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value + field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents expression + field
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents field * value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents field * value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents field * expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field * expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents field * field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field * field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Multiply(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents value * field
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value * field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents expression * field
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents field - value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents field - value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents field - expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field - expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents field - field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field - field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Subtraction(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents value - field
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value - field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents expression - field
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,System.Object)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents field / value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents field / value
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents field / expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field / expression</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents field / field2
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand</param>
            <returns>Expression object which represents field / field2</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Division(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents value / field
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value / field
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.EntityField2)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents expression / field
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.op_BitwiseOr(SD.LLBLGen.Pro.ORMSupportClasses.EntityField2,SD.LLBLGen.Pro.ORMSupportClasses.SortOperator)">
            <summary>
            Operator overload for the '|' operator to concatenate sortoperators to a field
            </summary>
            <param name="field">Field.</param>
            <param name="operatorToUse">Operator to use.</param>
            <returns>new SortClause object</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.LinkedSuperTypeField">
            <summary>
            Gets / sets linkedSuperTypeField. Fields of PK/UC's are linked with eachother in a target-per-entity hierarchy. This is managed in
            the EntityFields object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.LinkedSubTypeFields">
            <summary>
            Gets linkedSubTypeFields
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.MaxLength">
            <summary>
            The maximum length of the value of the entityfield (string/binary data). Is ignored for entityfields which hold non-string and non-binary values.
            Value initially set for this field is the length of the database column this field is mapped on.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.Scale">
            <summary>
            The scale of the value for this field. 
            Value initially set for this field is the scale of the database column this field is mapped on.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.Precision">
            <summary>
            The precision of the value for this field.
            Value initially set for this field is the precision of the database column this field is mapped on.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.Name">
            <summary>
            The name of the field. Used in XML output. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.Alias">
            <summary>
            The alias to use for this field. Only used when this field object is part of a typed list. 
            Adapter: returns the alias set in the designer
            SelfServicing: returns Name
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.OriginalValue">
            <summary>
            The original value for this field when the field is changed and the change has not been accepted yet.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.CurrentValue">
            <summary>
            Gets the current value for this field and sets the new value for this field, by overwriting current value. The value in 
            currentValue is discarded, versioning control has to save the original value of currentValue before this property is called. 
            </summary>
            <remarks>
            Calling this property directly will not trigger versioning control,
            thus calling this property directly is not recommended. Call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityBase.SetNewFieldValue(System.String,System.Object)"/> instead.
            Type of the new value has to be the same as <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.DataType"/>, which is set in the
            constructor. If this field is set to readonly, an exception is raised. 
            </remarks>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMFieldIsReadonlyException">The field is set to readonly and not part of the PK.</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">The value specified is not of the same <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.DataType"/> as this field.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.DataType">
            <summary>
            The <see cref="T:System.Type"/> of the values of this field.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.IsPrimaryKey">
            <summary>
            If set to true, in the constructor, this field will end up in the PrimaryKey field list of the containing IEntityFields object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.IsReadOnly">
            <summary>
            If set to true, in the constructor, no changes can be made to this field. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.IsChanged">
            <summary>
            If the value of this field is changed, this property is set to true. Set when <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.CurrentValue"/> receives a valid value. Set to 
            false when <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.AcceptChange"/> is called succesfully.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.IsNull">
            <summary>
            If the original value in the column for this entityfield is DBNull (NULL), this parameter should be set to true, otherwise to false.
            In BL Logic, it's impractical to work with NULL values, so these are converted to workable values. The developer can still determine if
            the original value was DBNull by checking this field. Using NULL values is not recommended. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.FieldIndex">
            <summary>
            Gets the field index related to this IEntityField, so the field can be used to retrieve the field index.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.ContainingObjectName">
            <summary>
            Name of the containing object this field belongs to (entity or typed view). This name is required to retrieve persistence information in Adapter
            Set via constructor. This name is also used by EntityRelation to determine alias - table connection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.DbValue">
            <summary>
            Gets the value read from the database for this field. Use this field in optimistic concurrency predicates.
            Set by ForcedCurrentValueWrite(object, value) by the object fetcher logic.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.ObjectAlias">
            <summary>
            Alias for the object containing the field this entity field is mapped on. Used in typed list selection lists.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.AggregateFunctionToApply">
            <summary>
            The aggregate function to apply on this field in a select query. Ignored in INSERT/UPDATE/DELETE queries. 
            Designed to be used in TypedList/TypedView classes.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.ExpressionToApply">
            <summary>
            The expression to apply to this field in a select list, update statement or predicate. 
            Expression is applied before AggregateFunctionToApply.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.IsForeignKey">
            <summary>
            If set to true, in the constructor, this field is part of a foreign key. This field is not used in LLBLGen Pro's code, however
            can be useful in user code.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityField2.IsNullable">
            <summary>
            Will be true if this field can be set to NULL in the database, false otherwise. The Field Validation logic in an entity will use this
            flag to check if the field indeed can be set to NULL or not. Set by constructor.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields">
            <summary>
            Class which forms the EntityFields2 type. An EntityFields type is a collection of IEntityField objects which forms the total amount of fields 
            for a given entity.
            SelfServicing specific
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields">
            <summary>
            Interface for the EntityFields type. An EntityFields type is a collection of IEntityField objects which forms the total amount of fields for a given entity.
            SelfServicing specific
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.AcceptChanges">
            <summary>
            All changes to all <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField"/> objects in this collection are applied. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.RejectChanges">
            <summary>
            Per field, the last change made is rejected.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.GetHashCode">
            <summary>
            Overrides the GetHashCode routine. It will calculate a hashcode for this set of entity fields using the eXclusive OR of the 
            hashcodes of the primary key fields in this set of entity fields. That hashcode is returned. If no primary key fields are present,
            the hashcode of the base class is returned, which will not be unique.
            </summary>
            <returns>Hashcode for this entity object, based on its primary key field values</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.GetAsPersistenceInfoArray">
            <summary>
            Returns the complete list of IEntityField objects as an array of IFieldPersistenceInfo objects. IEntityField objects implement
            IFieldPersistenceInfo.
            </summary>
            <returns>Array of IFieldPersistenceInfo objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.GetAsEntityFieldCoreArray">
            <summary>
            Returns the complete list of IEntityField objects as an array of IEntityFieldCore objects. IEntityField objects implement
            IEntityFieldCore
            </summary>
            <returns>Array of IEntityFieldCore objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            Converts this EntityFields object to a set of XmlNodes with all the fields as individual nodes.
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the nodes this method will create. This document is required
            to create the new nodes for the fields</param>
            <param name="parentNode">the node the fields will have to be added to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.ReadXml(System.Xml.XmlNode)">
            <summary>
            Reads the fields which are childnodes of the passed in fieldsElement into this object
            </summary>
            <param name="fieldsElement"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.LinkFields(System.Int32,System.Int32)">
            <summary>
            Links the specified fields with eachother so setting one to a different value will automatically set the other one as well.
            This is required in target-per-entity entities which have multiple times the same PK field in their field list.
            </summary>
            <param name="superTypeFieldIndex">index of field in the supertype</param>
            <param name="subTypeFieldIndex">index of field in the subtype</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.Count">
            <summary>
            The amount of IEntityFields allocated in the EntityFields object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.IsDirty">
            <summary>
            Gets the flag if the contents of the EntityFields object is 'dirty', which means that one or more fields are changed. 
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.AcceptChanges"/> and <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.RejectChanges"/> reset this flag.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.Item(System.Int32)">
            <summary>
            Gets / sets the EntityField on the specified Index. 
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">When the index specified is not found in the internal datastorage.</exception>
            <exception cref="T:System.ArgumentNullException">When the passed in <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField"/> is null</exception>
            <exception cref="T:System.ArgumentException">When the passed in <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField"/> is already added. Fields have to be unique.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.Item(System.String)">
            <summary>
            Gets the EntityField with the specified name.
            </summary>
            <exception cref="T:System.ArgumentException">When the specified name is the empty string or contains only spaces</exception>
            <remarks>This property is read-only. If you want to set a value, use the int indexer</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.PrimaryKeyFields">
            <summary>
            List of IEntityField references which form the primary key
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.State">
            <summary>
            The state of the EntityFields object, the heart and soul of every EntityObject.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields.IsChangedInThisEditCycle">
            <summary>
            Flag to signal if the entity fields have changed during an edit cycle which is controlled outside this IEntityFields object. If set to
            true, EndEdit will succeed, otherwise EndEdit will ignore any changes, since these are made in a previous edit cycle which is already
            ended.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.#ctor(System.Int32)">
            <summary>
            CTor
            </summary>
            <param name="amount">The initial amount of fields in this EntityFields collection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.#ctor(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider)">
            <summary>
            CTor
            </summary>
            <param name="amount">The initial amount of fields in this EntityFields collection</param>
            <param name="inheritanceInfoProviderToUse">Inheritance info provider to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[])">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields"/> class.
            </summary>
            <param name="fields">Fields to initialize this object with.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields"/> class.
            </summary>
            <param name="fields">Fields to initialize this object with.</param>
            <param name="inheritanceInfoProviderToUse">Inheritance info provider to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.Expand(System.Int32)">
            <summary>
            Expands this entity fields object by appending numberOfCells new cells to this object. 
            </summary>
            <param name="numberOfNewCells">number of cells to append to this fieldsobject</param>
            <remarks>Use with care. Empty cells can cause the DQE's to produce undefined results. Use this routine to append fields to a
            Typed list in code for example. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.Contract">
            <summary>
            Contracts the list of fields so all empty slots at the end of the list of fields are removed. Doesn't perform a contract operation if the
            fields object is empty
            </summary>
            <returns>the new size of the fields object, or if the fields object is completely empty, the full size</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.GetEnumerator">
            <summary>
            Gets the enumerator for this object.
            </summary>
            <returns>an IEnumerator to use in for each loops over this fields collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.GetHashCode">
            <summary>
            Overrides the GetHashCode routine. It will calculate a hashcode for this set of entity fields using the eXclusive OR of the 
            hashcodes of the primary key fields in this set of entity fields. That hashcode is returned. If no primary key fields are present,
            the hashcode of the base class is returned, which will not be unique.
            </summary>
            <returns>Hashcode for this entity object, based on its primary key field values</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.Equals(System.Object)">
            <summary>
            Compares passed in object with the given object. This is a compare of PK fields. These have to be the same in VALUES. 
            When the values are not the same, or the type is not the same as the current type, false is returned, true otherwise.
            When this doesn't have any PK fields, all fields are compared. null values are considered as the same value. 
            </summary>
            <param name="obj">IEntityFields implementing object of the same type as this which will be compared to the PK values of this. </param>
            <returns>True when the PK values of this are the same as the PK values of obj, or when this doesn't have any PK fields, all fields
            have the same value as obj's fields. False otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.LinkFields(System.Int32,System.Int32)">
            <summary>
            Links the specified fields with eachother so setting one to a different value will automatically set the other one as well.
            This is required in target-per-entity entities which have multiple times the same PK field in their field list.
            </summary>
            <param name="superTypeFieldIndex">index of field in the supertype</param>
            <param name="subTypeFieldIndex">index of field in the subtype</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            Converts this EntityFields object to a set of XmlNodes with all the fields as individual nodes.
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the nodes this method will create. This document is required
            to create the new nodes for the fields</param>
            <param name="parentNode">the node the fields will have to be added to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.ReadXml(System.Xml.XmlNode)">
            <summary>
            Reads the fields which are childnodes of the passed in fieldsElement into this object
            </summary>
            <param name="fieldsElement"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.GetAsPersistenceInfoArray">
            <summary>
            Returns the complete list of IEntityField objects as an array of IFieldPersistenceInfo objects. IEntityField objects implement
            IFieldPersistenceInfo.
            </summary>
            <returns>Array of IFieldPersistenceInfo objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.GetAsEntityFieldCoreArray">
            <summary>
            Returns the complete list of IEntityField objects as an array of IEntityFieldCore objects. IEntityField objects implement
            IEntityFieldCore
            </summary>
            <returns>Array of IEntityFieldCore objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.AcceptChanges">
            <summary>
            All changes to all <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField"/> objects in this collection are accepted. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.RejectChanges">
            <summary>
            Per field, the last change made is rejected.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.Clone">
            <summary>
            Clones this instance and its contents using a deep copy.
            </summary>
            <returns>an exact, deep copy of this EntityFields object and its contents.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.SetupCloning">
            <summary>
            Prepares this object to be filled with objects. It is called after the MemberwiseClone call and resets all references
            to objects and creates new objects or sets them to null. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.GetEntityNamesOfFields">
            <summary>
            Gets the entity names of fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.EndEdit">
            <summary>
            IEditableObject method. Used by databinding.
            A succesful edit has been performed. All new values have to be moved to the current value slots.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.CancelEdit">
            <summary>
            IEditableObject method. Used by databinding.
            Doesn't reset isDirty. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.BeginEdit">
            <summary>
            IEditableObject method. Used by databinding.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.CorrectAliasForOverload(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField)">
            <summary>
            Corrects the field's alias for overload. If the field passed in has the same alias as another field in the pack, check if the field
            is contained by another entity.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.InheritanceInfoProviderToUse">
            <summary>
            Gets the inheritance info provider to use.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.Count">
            <summary>
            The amount of IEntityFields allocated in the EntityFields object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.IsDirty">
            <summary>
            Gets the flag if the contents of the EntityFields object is 'dirty', which means that one or more fields are changed. 
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.AcceptChanges"/> and <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.RejectChanges"/> reset this flag.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.PrimaryKeyFields">
            <summary>
            List of IEntityField references which form the primary key
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.Item(System.Int32)">
            <summary>
            Gets / sets the EntityField on the specified Index. 
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">When the index specified is not found in the internal datastorage.</exception>
            <exception cref="T:System.ArgumentNullException">When the passed in <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField"/> is null</exception>
            <exception cref="T:System.ArgumentException">When the passed in <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField"/> is already added. Fields have to be unique.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.Item(System.String)">
            <summary>
            Gets the EntityField with the specified name.
            </summary>
            <exception cref="T:System.ArgumentException">When the specified name is the empty string or contains only spaces or is not found.</exception>
            <remarks>This property is read-only. If you want to set a value, use the int indexer</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.State">
            <summary>
            The state of the EntityFields object, the heart and soul of every EntityObject.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields.IsChangedInThisEditCycle">
            <summary>
            Flag to signal if the entity fields have changed during an edit cycle which is controlled outside this IEntityFields object. If set to
            true, EndEdit will succeed, otherwise EndEdit will ignore any changes, since these are made in a previous edit cycle which is already
            ended.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2">
            <summary>
            Class which forms the EntityFields2 type. An EntityFields2 type is a collection of IEntityField2 objects which forms the total amount of 
            fields for a given entity.
            Adapter specific
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2">
            <summary>
            Interface for the EntityFields2 type. An EntityFields2 type is a collection of IEntityField2 objects which forms the total amount of 
            fields for a given entity.
            Adapter specific
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.AcceptChanges">
            <summary>
            All changes to all <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField"/> objects in this collection are applied. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.RejectChanges">
            <summary>
            Per field, the last change made is rejected.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.GetHashCode">
            <summary>
            Overrides the GetHashCode routine. It will calculate a hashcode for this set of entity fields using the eXclusive OR of the 
            hashcodes of the primary key fields in this set of entity fields. That hashcode is returned. If no primary key fields are present,
            the hashcode of the base class is returned, which will not be unique.
            </summary>
            <returns>Hashcode for this entity object, based on its primary key field values</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.GetAsEntityFieldCoreArray">
            <summary>
            Returns the complete list of IEntityField objects as an array of IEntityFieldCore objects. IEntityField objects implement
            IEntityFieldCore
            </summary>
            <returns>Array of IEntityFieldCore objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            Converts this EntityFields2 object to a set of XmlNodes with all the fields as individual nodes.
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the nodes this method will create. This document is required
            to create the new nodes for the fields</param>
            <param name="parentNode">the node the fields will have to be added to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.ReadXml(System.Xml.XmlNode)">
            <summary>
            Reads the fields which are childnodes of the passed in fieldsElement into this object
            </summary>
            <param name="fieldsElement"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.LinkFields(System.Int32,System.Int32)">
            <summary>
            Links the specified fields with eachother so setting one to a different value will automatically set the other one as well.
            This is required in target-per-entity entities which have multiple times the same PK field in their field list.
            </summary>
            <param name="superTypeFieldIndex">index of field in the supertype</param>
            <param name="subTypeFieldIndex">index of field in the subtype</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.Count">
            <summary>
            The amount of IEntityFields2 allocated in the EntityFields object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.IsDirty">
            <summary>
            Gets / sets the flag if the contents of the EntityFields2 object is 'dirty', which means that one or more fields are changed. 
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.AcceptChanges"/> and <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.RejectChanges"/> reset this flag.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.Item(System.Int32)">
            <summary>
            Gets / sets the EntityField2 on the specified Index. 
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">When the index specified is not found in the internal datastorage.</exception>
            <exception cref="T:System.ArgumentNullException">When the passed in <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2"/> is null</exception>
            <exception cref="T:System.ArgumentException">When the passed in <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2"/> is already added. Fields have to be unique.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.Item(System.String)">
            <summary>
            Gets the EntityField with the specified name.
            </summary>
            <exception cref="T:System.ArgumentException">When the specified name is the empty string or contains only spaces</exception>
            <remarks>This property is read-only. If you want to set a value, use the int indexer</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.PrimaryKeyFields">
            <summary>
            List of IEntityField2 references which form the 'primary key', or uniquely identifying set of values for this set of fields, thus for the entity
            holding these fields.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.State">
            <summary>
            The state of the EntityFields object, the heart and soul of every EntityObject.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2.IsChangedInThisEditCycle">
            <summary>
            Flag to signal if the entity fields have changed during an edit cycle which is controlled outside this IEntityFields2 object. If set to
            true, EndEdit will succeed, otherwise EndEdit will ignore any changes, since these are made in a previous edit cycle which is already
            ended.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.#ctor(System.Int32)">
            <summary>
            CTor
            </summary>
            <param name="amount">The initial amount of fields in this EntityFields collection</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.#ctor(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider)">
            <summary>
            CTor
            </summary>
            <param name="amount">The initial amount of fields in this EntityFields collection</param>
            <param name="inheritanceInfoProviderToUse">Inheritance info provider to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[])">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2"/> class.
            </summary>
            <param name="fields">Fields to initialize this object with.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2"/> class.
            </summary>
            <param name="fields">Fields to initialize this object with.</param>
            <param name="inheritanceInfoProviderToUse">Inheritance info provider to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.Expand(System.Int32)">
            <summary>
            Expands this entity fields object by appending numberOfCells new cells to this object. 
            </summary>
            <param name="numberOfNewCells">number of cells to append to this fieldsobject</param>
            <remarks>Use with care. Empty cells can cause the DQE's to produce undefined results. Use this routine to append fields to a
            Typed list in code for example. </remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.Contract">
            <summary>
            Contracts the list of fields so all empty slots at the end of the list of fields are removed. Doesn't perform a contract operation if the
            fields object is empty
            </summary>
            <returns>the new size of the fields object, or if the fields object is completely empty, the full size</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.GetEnumerator">
            <summary>
            Gets the enumerator for this object.
            </summary>
            <returns>an IEnumerator to use in for each loops over this fields collection</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.GetHashCode">
            <summary>
            Overrides the GetHashCode routine. It will calculate a hashcode for this set of entity fields using the eXclusive OR of the 
            hashcodes of the primary key fields in this set of entity fields. That hashcode is returned. If no primary key fields are present,
            the hashcode of the base class is returned, which will not be unique.
            </summary>
            <returns>Hashcode for this entity object, based on its primary key field values</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.LinkFields(System.Int32,System.Int32)">
            <summary>
            Links the specified fields with eachother so setting one to a different value will automatically set the other one as well.
            This is required in target-per-entity entities which have multiple times the same PK field in their field list.
            </summary>
            <param name="superTypeFieldIndex">index of field in the supertype</param>
            <param name="subTypeFieldIndex">index of field in the subtype</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.WriteXml(SD.LLBLGen.Pro.ORMSupportClasses.XmlFormatAspect,System.Xml.XmlDocument,System.Xml.XmlNode)">
            <summary>
            Converts this EntityFields2 object to a set of XmlNodes with all the fields as individual nodes.
            </summary>
            <param name="aspects">The aspect flags to control the format of the XML produced</param>
            <param name="parentDocument">the XmlDocument which will contain the nodes this method will create. This document is required
            to create the new nodes for the fields</param>
            <param name="parentNode">the node the fields will have to be added to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.ReadXml(System.Xml.XmlNode)">
            <summary>
            Reads the fields which are childnodes of the passed in fieldsElement into this object
            </summary>
            <param name="fieldsElement"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.Equals(System.Object)">
            <summary>
            Compares passed in object with the given object. This is a compare of PK fields. These have to be the same in VALUES. 
            When the values are not the same, or the type is not the same as the current type, false is returned, true otherwise.
            When this doesn't have any PK fields, all fields are compared. null values are considered as the same value. 
            </summary>
            <param name="obj">IEntityFields2 implementing object of the same type as this which will be compared to the PK values of this. </param>
            <returns>True when the PK values of this are the same as the PK values of obj, or when this doesn't have any PK fields, all fields
            have the same value as obj's fields. False otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.GetAsEntityFieldCoreArray">
            <summary>
            copy the complete list of IEntityField objects to an array of IEntityFieldCore objects. IEntityField objects implement
            IEntityFieldCore
            </summary>
            <returns>Array of IEntityFieldCore objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.AcceptChanges">
            <summary>
            All changes to all <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2"/> objects in this collection are accepted. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.RejectChanges">
            <summary>
            Per field, the last change made is rejected.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.Clone">
            <summary>
            Clones this instance and its contents using a deep copy.
            </summary>
            <returns>an exact, deep copy of this EntityFields2 object and its contents.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.SetupCloning">
            <summary>
            Prepares this object to be filled with objects. It is called after the MemberwiseClone call and resets all references
            to objects and creates new objects or sets them to null. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.GetEntityNamesOfFields">
            <summary>
            Gets the entity names of fields.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.GetFieldsDataArray">
            <summary>
            Gets this object's fields field data in a 2 column array: first column currentvalue second column dbvalue
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.GetFieldsTrackingFlagsArray">
            <summary>
            Gets this object's fields change tracking flags and other flags: it's a bitarray, single dimension with 2 bits per row: 
            first bit IsChanged, second bit: IsNull
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.EndEdit">
            <summary>
            IEditableObject method. Used by databinding.
            A succesful edit has been performed. All new values have to be moved to the current value slots.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.CancelEdit">
            <summary>
            IEditableObject method. Used by databinding.
            Doesn't reset isDirty. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.BeginEdit">
            <summary>
            IEditableObject method. Used by databinding.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.CorrectAliasForOverload(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2)">
            <summary>
            Corrects the field's alias for overload. If the field passed in has the same alias as another field in the pack, check if the field
            is contained by another entity.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.InheritanceInfoProviderToUse">
            <summary>
            Gets the inheritance info provider to use.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.Count">
            <summary>
            The amount of IEntityFields2 allocated in the EntityFields2 object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.IsDirty">
            <summary>
            Gets/sets the flag if the contents of the EntityFields2 object is 'dirty', which means that one or more fields are changed. 
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.AcceptChanges"/> and <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.RejectChanges"/> reset this flag.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.PrimaryKeyFields">
            <summary>
            List of IEntityField2 references which form the primary key
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.Item(System.Int32)">
            <summary>
            Gets / sets the EntityField2 on the specified Index. 
            </summary>
            <exception cref="T:System.IndexOutOfRangeException">When the index specified is not found in the internal datastorage.</exception>
            <exception cref="T:System.ArgumentNullException">When the passed in <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2"/> is null</exception>
            <exception cref="T:System.ArgumentException">When the passed in <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2"/> is already added. Fields have to be unique.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.Item(System.String)">
            <summary>
            Gets the EntityField2 with the specified name.
            </summary>
            <exception cref="T:System.ArgumentException">When the specified name is the empty string or contains only spaces</exception>
            <remarks>This property is read-only. If you want to set a value, use the int indexer</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.State">
            <summary>
            The state of the EntityFields2 object, the heart and soul of every EntityObject.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityFields2.IsChangedInThisEditCycle">
            <summary>
            Flag to signal if the entity fields have changed during an edit cycle which is controlled outside this IEntityFields2 object. If set to
            true, EndEdit will succeed, otherwise EndEdit will ignore any changes, since these are made in a previous edit cycle which is already
            ended.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor">
            <summary>
            Summary description for EntityPropertyDescriptor.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Type)">
            <summary>
            CTor
            </summary>
            <param name="field">Field which is exposed as a property and which has to be described in a PropertyDescriptor</param>
            <param name="typeOfBindedObject">The type of object this property is a property of</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            See PropertyDescriptor class.
            </summary>
            <param name="component"></param>
            <returns>always false (not supported)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.GetValue(System.Object)">
            <summary>
            See PropertyDescriptor class.
            </summary>
            <param name="component"></param>
            <returns>current value of associated IEntityField</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            See PropertyDescriptor class.
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            See PropertyDescriptor class.
            </summary>
            <param name="component"></param>
            <returns>always false (not supported)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.ComponentType">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.DisplayName">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.IsBrowsable">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.IsReadOnly">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.Name">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor.PropertyType">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2">
            <summary>
            EntityPropertyDescriptor2 implementation for adding property descriptors for entity fields in a complex databinding scenario.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,System.Type,System.Boolean)">
            <summary>
            CTor
            </summary>
            <param name="field">Field which is exposed as a property and which has to be described in a PropertyDescriptor</param>
            <param name="typeOfBindedObject">The type of object this property is a property of</param>
            <param name="isReadOnly">True if the field is an identity field/primary key field and the entity itself is not new</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.CanResetValue(System.Object)">
            <summary>
            See PropertyDescriptor class.
            </summary>
            <param name="component"></param>
            <returns>always false (not supported)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.GetValue(System.Object)">
            <summary>
            See PropertyDescriptor class.
            </summary>
            <param name="component"></param>
            <returns>current value of associated IEntityField</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.SetValue(System.Object,System.Object)">
            <summary>
            See PropertyDescriptor class.
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.ShouldSerializeValue(System.Object)">
            <summary>
            See PropertyDescriptor class.
            </summary>
            <param name="component"></param>
            <returns>always false (not supported)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.ResetValue(System.Object)">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.ComponentType">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.DisplayName">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.IsBrowsable">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.IsReadOnly">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.Name">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityPropertyDescriptor2.PropertyType">
            <summary>
            See PropertyDescriptor class.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation">
            <summary>
            Generic implementation of the IEntityRelation interface, which is used for relations between IEntity* instances.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation">
            <summary>
            Interface used for relations between IEntity* instances. 
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.AddEntityFieldPair(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField)">
            <summary>
            Adds a new pair of EntityField instances to the relation. Primary Key fields and Foreign Key Fields have to be added
            in pairs. Used by SelfServicing template set.
            </summary>
            <param name="primaryKeyField">The IEntityField instance which represents a field in the primary key in the relation</param>
            <param name="foreignKeyField">The IEntityField instance which represents the corresponding field in the foreign key in the relation</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.AddEntityFieldPair(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2)">
            <summary>
            Adds a new pair of EntityFieldCore instances to the relation, including persistence info. Primary Key fields and Foreign Key Fields have to be added
            in pairs. Used by Adapter template set.
            </summary>
            <param name="primaryKeyField">The IEntityField instance which represents a field in the primary key in the relation</param>
            <param name="foreignKeyField">The IEntityField instance which represents the corresponding field in the foreign key in the relation</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.GetAllFKFieldPersistenceInfoObjects">
            <summary>
            Returns in an arraylist all IFieldPersistenceInfo objects for the FK fields in this entityrelation
            </summary>
            <returns>ArrayList with the requested objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.GetAllPKFieldPersistenceInfoObjects">
            <summary>
            Returns in an arraylist all IFieldPersistenceInfo objects for the PK fields in this entityrelation
            </summary>
            <returns>ArrayList with the requested objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.GetPKFieldPersistenceInfo(System.Int32)">
            <summary>
            Gets the IFieldPersistenceInfo data for the PK field at index specified.
            </summary>
            <param name="index">index of the field in the list of PK fields.</param>
            <returns>IFieldPersistenceInfo object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.GetFKFieldPersistenceInfo(System.Int32)">
            <summary>
            Gets the IFieldPersistenceInfo data for the FK field at index specified.
            </summary>
            <param name="index">index of the field in the list of FK fields.</param>
            <returns>IFieldPersistenceInfo object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.SetPKFieldPersistenceInfo(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            Sets the IFieldPersistenceInfo data for the PK field at index specified.
            </summary>
            <param name="index">index of the field in the list of PK fields.</param>
            <param name="persistenceInfo">The persistence info for the entity field at position index.</param>
            <remarks>Used by DataAccessAdapter objects.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.SetFKFieldPersistenceInfo(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            Sets the IFieldPersistenceInfo data for the FK field at index specified.
            </summary>
            <param name="index">index of the field in the list of FK fields.</param>
            <param name="persistenceInfo">The persistence info for the entity field at position index.</param>
            <remarks>Used by DataAccessAdapter objects.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.GetPKEntityFieldCore(System.Int32)">
            <summary>
            Gets the IEntityFieldCode information about the PK field at index specified
            </summary>
            <param name="index">index of field in the list of PK fields</param>
            <returns>IEntityFieldCode object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.GetFKEntityFieldCore(System.Int32)">
            <summary>
            Gets the IEntityFieldCode information about the FK field at index specified
            </summary>
            <param name="index">index of field in the list of FK fields</param>
            <returns>IEntityFieldCode object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.GetAllPKEntityFieldCoreObjects">
            <summary>
            Returns in an arraylist all IEntityFieldCore objects for the PK fields in this entityrelation
            </summary>
            <returns>ArrayList with the requested objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.GetAllFKEntityFieldCoreObjects">
            <summary>
            Returns in an arraylist all IEntityFieldCore objects for the FK fields in this entityrelation
            </summary>
            <returns>ArrayList with the requested objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.SetAliases(System.String,System.String)">
            <summary>
            Sets the aliases for the start entity and the end entity formed by the fields stored in this entityrelation. The start entity and end entity
            are determined based on the type of the relation and the primary key / foreign key fields. Mainly used by RelationCollection.Add(). 
            </summary>
            <param name="aliasStartEntity">the alias for the start entity in the relation. Alias is case sensitive. An alias with solely spaces or
            an empty string is ignored.</param>
            <param name="aliasEndEntity">the alias for the end entity in the relation Alias is case sensitive. An alias with solely spaces or
            an empty string is ignored.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.CustomFilter">
            <summary>
            Custom filter for JOIN clauses which are added with AND to the ON clause resulting from this EntityRelation. By adding a
            predicate expression with fieldcomparevalue predicate objects for example, you can add extra filtering inside the JOIN.
            </summary>
            <remarks>If CustomFilterReplacesOnClause is set to true (default: false), the CustomFilter simply represents the ON clause.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.TypeOfRelation">
            <summary>
            The relation type the IEntityRelation instance represents.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.IsWeak">
            <summary>
            Flag to signal if this relation is a 'weak' relation or not. Weak relations are optional relations, which means when A and B have a 
            weak relation, not all instances of A have to have a related instance of B.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.AmountFields">
            <summary>
            Returns the amount of fields in the EntityRelation object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.StartEntityIsPkSide">
            <summary>
            Set to true if the start entity of the relation is the PK side of the relation. This is set in the generated code. 
            This property is true in 1:n relations and in 1:1 relations where the start entity is the PK side and the end entity is thus the
            FK side. Required for determining which alias belongs to which entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.CustomFilterReplacesOnClause">
            <summary>
            Flag to signal the join creator logic to use the CustomFilter specified as the ON clause, instead of appending the CustomFilter to the ON
            clause. Ignored if CustomFilter is null or empty. Default is false.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.InheritanceInfoPkSideEntity">
            <summary>
            Gets or sets the inheritance info for the pk side entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation.InheritanceInfoFkSideEntity">
            <summary>
            Gets or sets the inheritance info for the fk side entity.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.RelationType)">
            <summary>
            CTor
            </summary>
            <param name="typeOfRelation">The type of relation this instance represents</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.RelationType)">
            <summary>
            CTor
            </summary>
            <param name="primaryKeyField">The IEntityField instance which represents the primary key in the relation</param>
            <param name="foreignKeyField">The IEntityField instance which represents the foreign key in the relation</param>
            <param name="typeOfRelation">The type of relation this instance represents</param>
            <remarks>Selfservicing specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.RelationType)">
            <summary>
            CTor
            </summary>
            <param name="primaryKeyField">The IEntityField2 instance which represents the primary key in the relation</param>
            <param name="foreignKeyField">The IEntityField2 instance which represents the foreign key in the relation</param>
            <param name="typeOfRelation">The type of relation this instance represents</param>
            <remarks>Adapter specific</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.AddEntityFieldPair(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField)">
            <summary>
            Adds a new pair of EntityField instances to the relation. Primary Key fields and Foreign Key Fields have to be added
            in pairs. Used by SelfServicing template set.
            </summary>
            <param name="primaryKeyField">The IEntityField instance which represents a field in the primary key in the relation</param>
            <param name="foreignKeyField">The IEntityField instance which represents the corresponding field in the foreign key in the relation</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.AddEntityFieldPair(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2)">
            <summary>
            Adds a new pair of EntityField2 instances to the relation. Primary Key fields and Foreign Key Fields have to be added
            in pairs. Used by Adapter template set. Persistence info is set later by the Adapter object.
            </summary>
            <param name="primaryKeyField">The IEntityField2 instance which represents a field in the primary key in the relation</param>
            <param name="foreignKeyField">The IEntityField2 instance which represents the corresponding field in the foreign key in the relation</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.InitClass">
            <summary>
            Initializes the class' member variables.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.GetPKFieldPersistenceInfo(System.Int32)">
            <summary>
            Gets the IFieldPersistenceInfo data for the PK field at index specified.
            </summary>
            <param name="index">index of the field in the list of PK fields.</param>
            <returns>IFieldPersistenceInfo object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.GetUsedEntityTypeNamesAndAliases(SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable@)">
            <summary>
            Gets per alias specified in a relation all entity names covered by that alias. This means that if an entity in a relation is based on multiple entities
            (through inheritance) it will return all entity names the entity is based on, from the actual entity to the root of the hierarchy path and every
            entity name in between.
            </summary>
            <param name="entityNamesPerAlias">Entity names per alias multivaluehashtable: per alias (key) all entity names are stored in a uniquevaluelist.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.GetAllPKEntityFieldCoreObjects">
            <summary>
            Returns in an arraylist all IEntityFieldCore objects for the PK fields in this entityrelation
            </summary>
            <returns>ArrayList with the requested objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.GetAllFKEntityFieldCoreObjects">
            <summary>
            Returns in an arraylist all IEntityFieldCore objects for the FK fields in this entityrelation
            </summary>
            <returns>ArrayList with the requested objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.GetAllFKFieldPersistenceInfoObjects">
            <summary>
            Returns in an arraylist all IFieldPersistenceInfo objects for the FK fields in this entityrelation
            </summary>
            <returns>ArrayList with the requested objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.GetAllPKFieldPersistenceInfoObjects">
            <summary>
            Returns in an arraylist all IFieldPersistenceInfo objects for the PK fields in this entityrelation
            </summary>
            <returns>ArrayList with the requested objects</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.GetFKFieldPersistenceInfo(System.Int32)">
            <summary>
            Gets the IFieldPersistenceInfo data for the FK field at index specified.
            </summary>
            <param name="index">index of the field in the list of FK fields.</param>
            <returns>IFieldPersistenceInfo object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.GetPKEntityFieldCore(System.Int32)">
            <summary>
            Gets the IEntityFieldCode information about the PK field at index specified
            </summary>
            <param name="index">index of field in the list of PK fields</param>
            <returns>IEntityFieldCode object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.GetFKEntityFieldCore(System.Int32)">
            <summary>
            Gets the IEntityFieldCode information about the FK field at index specified
            </summary>
            <param name="index">index of field in the list of FK fields</param>
            <returns>IEntityFieldCode object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.SetPKFieldPersistenceInfo(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            Sets the IFieldPersistenceInfo data for the PK field at index specified.
            </summary>
            <param name="index">index of the field in the list of PK fields.</param>
            <param name="persistenceInfo">The persistence info for the entity field at position index.</param>
            <remarks>Used by DataAccessAdapter objects.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.SetFKFieldPersistenceInfo(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            Sets the IFieldPersistenceInfo data for the FK field at index specified.
            </summary>
            <param name="index">index of the field in the list of FK fields.</param>
            <param name="persistenceInfo">The persistence info for the entity field at position index.</param>
            <remarks>Used by DataAccessAdapter objects.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.SetAliases(System.String,System.String)">
            <summary>
            Sets the aliases for the start entity and the end entity formed by the fields stored in this entityrelation. The start entity and end entity
            are determined based on the type of the relation and the primary key / foreign key fields. Mainly used by RelationCollection.Add(). 
            </summary>
            <param name="aliasStartEntity">the alias for the start entity in the relation. Alias is case sensitive. An alias with solely spaces or
            an empty string is ignored.</param>
            <param name="aliasEndEntity">the alias for the end entity in the relation Alias is case sensitive. An alias with solely spaces or
            an empty string is ignored.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.DetermineIfIsWeak">
            <summary>
            Determines if this relation is a weak relation (true) or not (false). 1:m is always weak by definition. 1:1
            relations are weak when relation is seen from PK entity, otherwise always strong (when seen from FK entity).
            This can't be determined here, so 1:1 relations are always reported 'weak'. 
            </summary>
            <returns>true when this relation is weak, false otherwise. Returns false by default.</returns>
            <remarks>Sees 1:1 not as a strong relation per se. Earlier versions did so.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.DetermineAlias(System.Boolean)">
            <summary>
            Determines the alias for the side specified with the pkSide flag.
            </summary>
            <param name="pkSide">if true, the alias for teh PK side is determined, otherwise the FK side</param>
            <returns>the alias for the side requested</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.TypeOfRelation">
            <summary>
            The relation type the IEntityRelation instance represents.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.IsWeak">
            <summary>
            Flag to signal if this relation is a 'weak' relation or not. Weak relations are optional relations, which means when A and B have a 
            weak relation, not all instances of A have to have a related instance of B.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.AmountFields">
            <summary>
            Returns the amount of fields in the EntityRelation object.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.CustomFilterReplacesOnClause">
            <summary>
            Flag to signal the join creator logic to use the CustomFilter specified as the ON clause, instead of appending the CustomFilter to the ON
            clause. Ignored if CustomFilter is null or empty. Default is false.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.CustomFilter">
            <summary>
            Custom filter for JOIN clauses which are added with AND to the ON clause resulting from this EntityRelation. By adding a
            predicate expression with fieldcomparevalue predicate objects for example, you can add extra filtering inside the JOIN.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.HintForJoins">
            <summary>
            Hint value for the consideration of the jointype of this relation. 
            Default: JoinHint.None
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.AliasPKSide">
            <summary>
            Alias value for the entity which is on the PK side of the relation. Determined from the relation type and the pk/fk fields
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.AliasFKSide">
            <summary>
            Alias value for the entity which is on the FK side of the relation. Determined from the relation type and the pk/fk fields
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.StartEntityIsPkSide">
            <summary>
            Set to true if the start entity of the relation is the PK side of the relation. This is set in the generated code. 
            This property is true in 1:n relations and in 1:1 relations where the start entity is the PK side and the end entity is thus the
            FK side. Required for determining which alias belongs to which entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.AliasStartEntity">
            <summary>
            Gets the alias of the start entity.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.AliasEndEntity">
            <summary>
            Gets the alias of the end entity.
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.InheritanceInfoPkSideEntity">
            <summary>
            Gets or sets the inheritance info for the pk side entity.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntityRelation.InheritanceInfoFkSideEntity">
            <summary>
            Gets or sets the inheritance info for the fk side entity.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntitySyncInfo">
            <summary>
            General synchronization information class for related entities to an existing entity. 
            Used to keep track of which entity is set as a related entity using which relation and which field mapped on that
            relation so when the related entity is saved, it will be synced with the correct fields. The related
            entity is called a Data Suppling Entity.
            AdapterVersion
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntitySyncInfo.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntitySyncInfo.Used">
            <summary>
            Gets / sets used flag. Flag to signal if the sync info has been used for syncing already. If not, it can be used to 
            determine if the entity holding this sync info has to be saved or not.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntitySyncInfo.DataSupplyingEntity">
            <summary>
            Gets / sets Data Supplying Entity value. Used for synchronization between related entities when they have to be synchronized.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntitySyncInfo.Relation">
            <summary>
            Gets / sets the specific Entity Relation between two related entities (the entity holding this object and the entity specified in
            DataSupplyingEntity) for synchronization of values.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntitySyncInfoSS">
            <summary>
            General synchronization information class for related entities to an existing entity. 
            Used to keep track of which entity is set as a related entity using which relation and which field mapped on that
            relation so when the related entity is saved, it will be synced with the correct fields. The related
            entity is called a Data Suppling Entity.
            SelfServicing version
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntitySyncInfoSS.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntitySyncInfoSS.Used">
            <summary>
            Gets / sets used flag. Flag to signal if the sync info has been used for syncing already. If not, it can be used to 
            determine if the entity holding this sync info has to be saved or not.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntitySyncInfoSS.DataSupplyingEntity">
            <summary>
            Gets / sets Data Supplying Entity value. Used for synchronization between related entities when they have to be synchronized.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.EntitySyncInfoSS.Relation">
            <summary>
            Gets / sets the specific Entity Relation between two related entities (the entity holding this object and the entity specified in
            DataSupplyingEntity) for synchronization of values.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMException">
            <summary>
            Abstract base class for all ORM exceptions. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMException.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMException.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMInheritanceInfoException">
            <summary>
            General exception which is thrown when an error is determined in the inheritance info during query execution.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMInheritanceInfoException.#ctor">
            <summary>
            CTOr
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMInheritanceInfoException.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMInheritanceInfoException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryConstructionException">
            <summary>
            General exception which is thrown when an error occurs during the construction of the query to execute.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryConstructionException.#ctor">
            <summary>
            CTOr
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryConstructionException.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryConstructionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMRelationException">
            <summary>
            General exception class which is thrown when something is wrong with a relation or with the context
            the relation is used in (ToQueryText in RelationCollection for example)
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMRelationException.#ctor">
            <summary>
            CTOr
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMRelationException.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMRelationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMFieldIsReadonlyException">
            <summary>
            General exception class which is thrown when a user sets a field which is readonly.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMFieldIsReadonlyException.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="message">The message of the exception</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMFieldIsReadonlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMFieldIsNullException">
            <summary>
            General exception class which is thrown when a user tries to get a value from a field which is null.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMFieldIsNullException.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="message">The message of the exception</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMFieldIsNullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityOutOfSyncException">
            <summary>
            General exception class which is thrown when a user tries to get a value from a field of an entity which is
            marked as OutOfSync, and needs to be refetched.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityOutOfSyncException.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="message">The message of the exception</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityOutOfSyncException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityIsDeletedException">
            <summary>
            General exception class which is thrown when a user tries to get a value from a field of an entity which is
            marked as Deleted.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityIsDeletedException.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="message">The message of the exception</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityIsDeletedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">
            <summary>
            General exception class which is thrown when an exception was caught during a query execution.
            Contains the original exception as inner exception.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException.#ctor(System.String,System.String,System.Collections.IList,System.Exception)">
            <summary>
            ctor
            </summary>
            <param name="message">The message of the query</param>
            <param name="queryExecuted">The query string executed</param>
            <param name="parameters">the parameters collection of the command object executed</param>
            <param name="innerException">The actual exception caught</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization override
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException.QueryExecuted">
            <summary>
            Gets the query string (formatted) executed which caused the exception.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException.Parameters">
            <summary>
            Gets the parameters collection of the command object executed
            </summary>
            <remarks>Will be null when the class is instantiated by a deserialization process as parameters can't be serialized.</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException.InnerException">
            <summary>
            Returns the inner exception object of this exception
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException">
            <summary>
            General exception class which is thrown when a user sets a field to a value which 
            doesn't match the type of the field.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="message">The message of the exception</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMValueTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMConcurrencyException">
            <summary>
            General exception class which is thrown when there is a concurrency error during a save action.
            A concurrency error occurs if the Save action of an entity fails, i.e. when no rows are affected by the
            save.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMConcurrencyException.#ctor(System.String,System.Object)">
            <summary>
            CTor
            </summary>
            <param name="message">The message of the exception</param>
            <param name="entityWhichFailed">The entity object which save action failed.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMConcurrencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization override
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ORMConcurrencyException.EntityWhichFailed">
            <summary>
            Gets / sets entityWhichFailed
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityValidationException">
            <summary>
            General exception class which is thrown by IEntityValidator.Validate()
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityValidationException.#ctor(System.String,System.Object)">
            <summary>
            CTor
            </summary>
            <param name="message">The message of the exception</param>
            <param name="entityValidated">the entity object validated. Offered as object to share exception objects between adapter/selfservicing.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor for deserialization as the base class already implements ISerializable.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization override
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ORMEntityValidationException.EntityValidated">
            <summary>
            Gets EntityValidated
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.Expression">
            <summary>
            Expression class which defines field expressions which are
            applied to fields in a select list, in update queries or in field predicates.
            <br/>
            Valid expressions:
            <list type="ul">
            <item>Field</item>
            <item>Field ExOp Field</item>
            <item>Field ExOp Value</item>
            <item>Field ExOp Expression</item>
            <item>Value ExOp Field</item>
            <item>Value ExOp Expression</item>
            <item>Expression ExOp Field</item>
            <item>Expression ExOp Value</item>
            </list>
            Use one of the constructors to create the particular expression object.
            </summary>
            <remarks>Values are transformed into parameters. The type of the parameter is determined of the field in the expression.</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IExpression">
            <summary>
            General interface definition for the Expression class which defines field expressions which are
            applied to fields in a select list, in update queries or in field predicates.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IExpression.ToQueryText(System.Int32@)">
            <summary>
            Retrieves a ready to use text representation of the contained expression. 
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the expression and also in the expression(s) containing the expression.</param>
            <returns>The contained expression in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IExpression.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IExpression.ToQueryText(System.Int32@,System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained expression. 
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the expression and also in the expression(s) containing the expression.</param>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>The contained expression in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IExpression.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IExpression.Parameters">
            <summary>
            The list of parameters created when the Expression was translated to text usable in a query. Only valid after a succesful call to ToQueryText
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IExpression.DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters, 
            and conversion routines, and field names, including prefix/postfix characters. 
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IExpression.LeftOperand">
            <summary>
            Gets the left expression operand. Set by the constructor used.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IExpression.RightOperand">
            <summary>
            Gets the right expression operand. Set by the constructor used.
            Can be null
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IExpression.Operator">
            <summary>
            Gets the operator of the expression. Not valid (ExOp.None) if RightOperand is null. Set by the constructor used.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor">
            <summary>
            CTor
            </summary>
            <remarks>Empty constructor, do not use, use one of the constructor overloads to create an expression instance.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            CTor for (expression) operator (expression) expressions. 
            </summary>
            <param name="leftOperand">the left operand, which is an IExpression implementation</param>
            <param name="operatorToUse">operator to use in this expression</param>
            <param name="rightOperand">the right operand, which is an IExpression implementation</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            CTor for value operator (expression) expressions
            </summary>
            <param name="leftOperand">the left operand, which is a value</param>
            <param name="operatorToUse">operator to use in this expression</param>
            <param name="rightOperand">the right operand, which is an expression</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,System.Object)">
            <summary>
            CTor for (expression) operator value expressions. 
            </summary>
            <param name="leftOperand">the left operand, which is an IExpression implementation</param>
            <param name="operatorToUse">operator to use in this expression</param>
            <param name="rightOperand">the right operand, which is a value</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField)">
            <summary>
            CTor for single field expressions. 
            Selfservicing specific
            </summary>
            <param name="field">the only element in this expression</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField)">
            <summary>
            CTor for field operator field expressions. 
            Selfservicing specific
            </summary>
            <param name="leftOperand">the left operand, which is a field</param>
            <param name="operatorToUse">operator to use in this expression</param>
            <param name="rightOperand">the right operand, which is a field</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,System.Object)">
            <summary>
            CTor for field operator value expressions. 
            Selfservicing specific
            </summary>
            <param name="leftOperand">the left operand, which is a field</param>
            <param name="operatorToUse">operator to use in this expression</param>
            <param name="rightOperand">the right operand, which is a value</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            CTor for field operator (expression) expressions. 
            Selfservicing specific
            </summary>
            <param name="leftOperand">the left operand, which is a field</param>
            <param name="operatorToUse">operator to use in this expression</param>
            <param name="rightOperand">the right operand, which is an IExpression implementation</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField)">
            <summary>
            CTor for value operator field expressions. 
            Selfservicing specific
            </summary>
            <param name="leftOperand">the left operand, which is a value</param>
            <param name="operatorToUse">operator to use in this expression</param>
            <param name="rightOperand">the right operand, which is a field</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField)">
            <summary>
            CTor for (expression) operator field expressions. 
            Selfservicing specific
            </summary>
            <param name="leftOperand">the left operand, which is an IExpression implementation</param>
            <param name="operatorToUse">operator to use in this expression</param>
            <param name="rightOperand">the right operand, which is a field</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2)">
            <summary>
            CTor for single field expressions. 
            Adapter specific
            </summary>
            <param name="field">the only element in this expression</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2)">
            <summary>
            CTor for field operator field expressions. 
            Adapter specific
            </summary>
            <param name="leftOperand">the left operand, which is a field</param>
            <param name="operatorToUse">operator to use in this expression</param>
            <param name="rightOperand">the right operand, which is a field</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,System.Object)">
            <summary>
            CTor for field operator value expressions. 
            Adapter specific
            </summary>
            <param name="leftOperand">the left operand, which is a field</param>
            <param name="operatorToUse">operator to use in this expression</param>
            <param name="rightOperand">the right operand, which is a value</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            CTor for field operator (expression) expressions. 
            Adapter specific
            </summary>
            <param name="leftOperand">the left operand, which is a field</param>
            <param name="operatorToUse">operator to use in this expression</param>
            <param name="rightOperand">the right operand, which is an IExpression implementation</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2)">
            <summary>
            CTor for value operator field expressions. 
            Adapter specific
            </summary>
            <param name="leftOperand">the left operand, which is a value</param>
            <param name="operatorToUse">operator to use in this expression</param>
            <param name="rightOperand">the right operand, which is a field</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IExpression,SD.LLBLGen.Pro.ORMSupportClasses.ExOp,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2)">
            <summary>
            CTor for (expression) operator field expressions. 
            Adapter specific
            </summary>
            <param name="leftOperand">the left operand, which is an IExpression implementation</param>
            <param name="operatorToUse">operator to use in this expression</param>
            <param name="rightOperand">the right operand, which is a field</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.Expression"/> class.
            </summary>
            <param name="info">Info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.ToQueryText(System.Int32@)">
            <summary>
            Retrieves a ready to use text representation of the contained expression. 
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the expression and also in the expression(s) containing the expression.</param>
            <returns>The contained expression in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IExpression.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.ToQueryText(System.Int32@,System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained expression. 
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the expression and also in the expression(s) containing the expression.</param>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>The contained expression in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IExpression.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.OperandToText(System.Text.StringBuilder@,SD.LLBLGen.Pro.ORMSupportClasses.IExpressionElement,System.Int32@,System.Boolean,System.Boolean)">
            <summary>
            Converts the passed in operand to text, appended to queryText. parameters created are added to _parameters.
            </summary>
            <param name="queryText"></param>
            <param name="operand"></param>
            <param name="uniqueMarker"></param>
            <param name="isLeftOperand"></param>
            <param name="inHavingClause"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.InitClass">
            <summary>
            inits members
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Addition(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents value + expression
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value + expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Multiply(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents value * expression
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value * expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Subtraction(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents value - expression
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value - expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Division(System.Object,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents value / expression
            </summary>
            <param name="value">Value.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value / expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.Expression,System.Object)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents expression + value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents value + expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.Expression,System.Object)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents  expression * value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents value * expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.Expression,System.Object)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents expression - value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents value - expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.Expression,System.Object)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents expression / value
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="value">Value.</param>
            <returns>
            Expression object which represents value / expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Addition(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '+' operator to produce an Expression which represents expression + expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value + expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Multiply(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '*' operator to produce an Expression which represents  expression * expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value * expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Subtraction(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '-' operator to produce an Expression which represents expression - expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value - expression
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Expression.op_Division(SD.LLBLGen.Pro.ORMSupportClasses.Expression,SD.LLBLGen.Pro.ORMSupportClasses.Expression)">
            <summary>
            Operator overload for the '/' operator to produce an Expression which represents expression / expression
            </summary>
            <param name="leftOperand">Left operand.</param>
            <param name="rightOperand">Right operand.</param>
            <returns>
            Expression object which represents value / expression
            </returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Expression.Parameters">
            <summary>
            The list of parameters created when the Expression was translated to text usable in a query. Only valid after a succesful call to ToQueryText
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Expression.DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters, 
            and conversion routines, and field names, including prefix/postfix characters. 
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Expression.LeftOperand">
            <summary>
            Gets the left expression operand. Set by the constructor used.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Expression.RightOperand">
            <summary>
            Gets the right expression operand. Set by the constructor used.
            Can be null
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Expression.Operator">
            <summary>
            Gets the operator of the expression. Not valid (ExOp.None) if RightOperand is null. Set by the constructor used.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElement">
            <summary>
            ExpressionElement class, definition for elements contained in an expression.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IExpressionElement">
            <summary>
            Interface definition for elements contained in an expression.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IExpressionElement.Type">
            <summary>
            The type of the element 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IExpressionElement.Contents">
            <summary>
            The contents of the element
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElement.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElementType,System.Object)">
            <summary>
            CTor
            </summary>
            <param name="typeOfContents">type of the contents contained in this element</param>
            <param name="contents">the contents of this element</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElement.Type">
            <summary>
            The type of the element 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElement.Contents">
            <summary>
            The contents of the element
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionFieldElement">
            <summary>
            ExpressionFieldElement class, definition for field elements contained in an expression
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IExpressionFieldElement">
            <summary>
            Interface definition for field elements contained in an expression
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IExpressionFieldElement.PersistenceInfo">
            <summary>
            The persistence info for the field contained in the field.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionFieldElement.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionFieldElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.ExpressionElementType,System.Object,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            CTor
            </summary>
            <param name="typeOfContents">type of the contents contained in this element</param>
            <param name="contents">the contents of this element</param>
            <param name="persistenceInfo">the persistence info for the field.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ExpressionFieldElement.PersistenceInfo">
            <summary>
            The persistence info for the field contained in the field.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate">
            <summary>
            Implementation of a Field Between ValueBegin And ValueEnd expression, using the following format:
            IEntityField(Core) Between Parameter1 And Parameter2 (f.e Foo BETWEEN @Foo1 AND Foo2)
            There is no check for types between the values specified and the specified IEntityField.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.Predicate">
            <summary>
            Abstract base implementation of the IPredicate interface.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IPredicate">
            <summary>
            Interface for a predicate. Predicates are expressions which result in true or false, and which are used in WHERE clauses.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPredicate.ToQueryText(System.Int32@)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate. 
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <returns>The contained Predicate in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPredicate.ToQueryText(System.Int32@,System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate. 
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>The contained Predicate in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPredicate.Parameters">
            <summary>
            The list of parameters created when the Predicate was translated to text usable in a query. Only valid after a succesful call to ToQueryText
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPredicate.Negate">
            <summary>
            Flag for setting the Predicate to negate itself, i.e. to add 'NOT' to its result.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPredicate.DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters, 
            and conversion routines, and field names, including prefix/postfix characters. 
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPredicate.InstanceType">
            <summary>
            The PredicateType of this instance. Used to determine the instance nature without a lot of casting.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.ToQueryText(System.Int32@)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate. 
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <returns>The contained Predicate in textual format.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.ToQueryText(System.Int32@,System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate. 
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>The contained Predicate in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.op_BitwiseAnd(SD.LLBLGen.Pro.ORMSupportClasses.Predicate,SD.LLBLGen.Pro.ORMSupportClasses.Predicate)">
            <summary>
            Operator overload for the '&amp;' operator, to concatenate predicates together. 
            </summary>
            <param name="leftHandSide"></param>
            <param name="rightHandSide"></param>
            <returns>Predicate expression containing: leftHandSide AND righthandside</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.op_BitwiseOr(SD.LLBLGen.Pro.ORMSupportClasses.Predicate,SD.LLBLGen.Pro.ORMSupportClasses.Predicate)">
            <summary>
            Operator overload for the '|' operator, to concatenate predicates together
            </summary>
            <param name="leftHandSide"></param>
            <param name="rightHandSide"></param>
            <returns>Predicate expression containing: leftHandSide OR righthandside</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.op_LogicalNot(SD.LLBLGen.Pro.ORMSupportClasses.Predicate)">
            <summary>
            Operator overload for the ! operator, to negate the passed in predicate.
            </summary>
            <param name="rightHandSide">Right hand side.</param>
            <returns>passed in predicate with the negate flag toggled</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.InstanceType">
            <summary>
            The PredicateType of this instance. Used to determine the instance nature without a lot of casting.
            </summary>
            <summary>
            Gets / sets instanceType
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.Parameters">
            <summary>
            The list of parameters created when the Predicate was translated to text usable in a query. Only valid after a succesful call to ToQueryText
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.Negate">
            <summary>
            Flag for setting the Predicate to negate itself, i.e. to add 'NOT' to its result.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters, 
            and conversion routines, and field names, including prefix/postfix characters. 
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.Predicate.SelfServicing">
            <summary>
            Gets / sets selfServicing, a flag to signal if this predicate is constructed using a selfservicing constructor (field is of type IEntityField)
            Default: true;
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Object,System.Object)">
            <summary>
            CTor. Creates the Field Between Value1 And Value2 expression (Self servicing version)
            </summary>
            <param name="field">Field used in the Between expression</param>
            <param name="valueBegin">Begin value in the Between clause. Can be a field object</param>
            <param name="valueEnd">End value in the Between clause. Can be a field object</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Object,System.Object,System.String)">
            <summary>
            CTor. Creates the Field Between Value1 And Value2 expression (Self servicing version)
            </summary>
            <param name="field">Field used in the Between expression</param>
            <param name="valueBegin">Begin value in the Between clause. Can be a field object</param>
            <param name="valueEnd">End value in the Between clause. Can be a field object</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Object,System.Object,System.Boolean)">
            <summary>
            CTor. Creates the Field Between Value1 And Value2 expression (Self servicing version)
            </summary>
            <param name="field">Field used in the Between expression</param>
            <param name="valueBegin">Begin value in the Between clause. Can be a field object</param>
            <param name="valueEnd">End value in the Between clause. Can be a field object</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Object,System.Object,System.String,System.Boolean)">
            <summary>
            CTor. Creates the Field Between Value1 And Value2 expression (Self servicing version)
            </summary>
            <param name="field">Field used in the Between expression</param>
            <param name="valueBegin">Begin value in the Between clause. Can be a field object</param>
            <param name="valueEnd">End value in the Between clause. Can be a field object</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Object,System.Object)">
            <summary>
            CTor. Creates the Field Between Value1 And Value2 expression. (Adapter version)
            </summary>
            <param name="field">Field used in the Between expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="valueBegin">Begin value in the Between clause. Can be a field object</param>
            <param name="valueEnd">End value in the Between clause. Can be a field object</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Object,System.Object,System.String)">
            <summary>
            CTor. Creates the Field Between Value1 And Value2 expression. (Adapter version)
            </summary>
            <param name="field">Field used in the Between expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="valueBegin">Begin value in the Between clause. Can be a field object</param>
            <param name="valueEnd">End value in the Between clause. Can be a field object</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Object,System.Object,System.Boolean)">
            <summary>
            CTor. Creates the Field Between Value1 And Value2 expression (Adapter version)
            </summary>
            <param name="field">Field used in the Between expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="valueBegin">Begin value in the Between clause. Can be a field object</param>
            <param name="valueEnd">End value in the Between clause. Can be a field object</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Object,System.Object,System.String,System.Boolean)">
            <summary>
            CTor. Creates the Field Between Value1 And Value2 expression (Adapter version)
            </summary>
            <param name="field">Field used in the Between expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="valueBegin">Begin value in the Between clause. Can be a field object</param>
            <param name="valueEnd">End value in the Between clause. Can be a field object</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.ToQueryText(System.Int32@)">
            <summary>
            Implements the IPredicate ToQueryText method. Retrieves a ready to use text representation of the contained Predicate.
            The two parameters for begin and end value are constructed using the field's name plus the postfixes 'Begin' and 'End'.
            Generates SQL-92 syntaxis for BETWEEN, which is accepted by all databases known. 
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <returns>The contained Predicate in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.ToQueryText(System.Int32@,System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate. 
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>The contained Predicate in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Object,System.Object,System.Boolean,System.Boolean,System.String)">
            <summary>
            Inits the class
            </summary>
            <param name="field"></param>
            <param name="persistenceInfo"></param>
            <param name="valueBegin"></param>
            <param name="valueEnd"></param>
            <param name="negate"></param>
            <param name="selfServicing"></param>
            <param name="objectAlias"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.Field">
            <summary>
            Field used in the comparison expression (SelfServicing).
            </summary>
            <exception cref="T:System.InvalidOperationException">if this object was constructed using a non-selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.FieldCore">
            <summary>
            Field used in the comparison expression (IEntityFieldCore).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.PersistenceInfo">
            <summary>
            Gets / sets persistenceInfo for field
            </summary>
            <exception cref="T:System.InvalidOperationException">When a value is set for this property and this object was created using a selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.ValueBegin">
            <summary>
            Gets / sets valueBegin
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.ValueEnd">
            <summary>
            Gets / sets valueEnd
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.ObjectAlias">
            <summary>
            Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.BeginIsField">
            <summary>
            Gets beginIsField, flag to signal if the ValueBegin is a field object
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.EndIsField">
            <summary>
            Gets endIsField, flag to signal if the ValueEnd is a field object
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.PersistenceInfoBegin">
            <summary>
            Gets or sets the persistence info for the BeginValue, if that's a field
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.PersistenceInfoEnd">
            <summary>
            Gets or sets the persistence info for the EndValue, if that's a field
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.FieldBegin">
            <summary>
            Gets the field which is the ValueBegin
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.FieldEnd">
            <summary>
            Gets the field which is the ValueEnd
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.FieldBeginCore">
            <summary>
            Gets the fieldcore which is the ValueBegin
            </summary>
            <value></value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldBetweenPredicate.FieldEndCore">
            <summary>
            Gets the fieldcore which is the ValueEnd
            </summary>
            <value></value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate">
            <summary>
            Implementation of a Field compare-operator Expression expression, using the following format:
            IEntityField(Core) ComparisonOperator Expression (f.e. Foo = (Bar * 2))
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            CTor
            Selfservicing specific
            </summary>
            <param name="field">Entityfield to compare</param>
            <param name="operatorToUse">Operator to use</param>
            <param name="expressionToCompare">Expression to compare with</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Boolean)">
            <summary>
            CTor
            Selfservicing specific
            </summary>
            <param name="field">Entityfield to compare</param>
            <param name="operatorToUse">Operator to use</param>
            <param name="expressionToCompare">Expression to compare with</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.String)">
            <summary>
            CTor
            Selfservicing specific
            </summary>
            <param name="field">Entityfield to compare</param>
            <param name="operatorToUse">Operator to use</param>
            <param name="expressionToCompare">Expression to compare with</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.String,System.Boolean)">
            <summary>
            CTor
            Selfservicing specific
            </summary>
            <param name="field">Entityfield to compare</param>
            <param name="operatorToUse">Operator to use</param>
            <param name="expressionToCompare">Expression to compare with</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression)">
            <summary>
            CTor
            Adapter specific
            </summary>
            <param name="field">Entityfield to compare</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="operatorToUse">Operator to use</param>
            <param name="expressionToCompare">Expression to compare with</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Boolean)">
            <summary>
            CTor
            Adapter specific
            </summary>
            <param name="field">Entityfield to compare</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="operatorToUse">Operator to use</param>
            <param name="expressionToCompare">Expression to compare with</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.String)">
            <summary>
            CTor
            Adapter specific
            </summary>
            <param name="field">Entityfield to compare</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="operatorToUse">Operator to use</param>
            <param name="expressionToCompare">Expression to compare with</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.String,System.Boolean)">
            <summary>
            CTor
            Adapter specific
            </summary>
            <param name="field">Entityfield to compare</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="operatorToUse">Operator to use</param>
            <param name="expressionToCompare">Expression to compare with</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.ToQueryText(System.Int32@)">
            <summary>
            Implements the IPredicate ToQueryText method. Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <returns>The contained Predicate in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.ToQueryText(System.Int32@,System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate. 
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>The contained Predicate in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,SD.LLBLGen.Pro.ORMSupportClasses.IExpression,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes the class.
            </summary>
            <param name="field"></param>
            <param name="persistenceInfo"></param>
            <param name="comparisonOperator"></param>
            <param name="expression"></param>
            <param name="negate"></param>
            <param name="selfServicing"></param>
            <param name="objectAlias"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.Field">
            <summary>
            Field used in the comparison expression (SelfServicing).
            </summary>
            <exception cref="T:System.InvalidOperationException">if this object was constructed using a non-selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.FieldCore">
            <summary>
            Field used in the comparison expression (IEntityFieldCore).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.PersistenceInfo">
            <summary>
            Gets / sets persistenceInfo for field
            </summary>
            <exception cref="T:System.InvalidOperationException">When a value is set for this property and this object was created using a selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.Operator">
            <summary>
            Operator to use in the comparison
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.ExpressionToCompareWith">
            <summary>
            Gets / sets expressionToCompareWith
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareExpressionPredicate.ObjectAlias">
            <summary>
            Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used).
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate">
            <summary>
            Implementation of a Field Compare NULL expression using the following format:
            IEntityField(Core) IS NULL (f.e. Foo IS NULL).
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField)">
            <summary>
            CTor. Creates the Field IS NULL predicate. (SelfServicing version)
            </summary>
            <param name="field">Field used in the comparison expression</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.String)">
            <summary>
            CTor. Creates the Field IS NULL predicate. (SelfServicing version)
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Boolean)">
            <summary>
            CTor. Creates the Field IS NULL predicate.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.String,System.Boolean)">
            <summary>
            CTor. Creates the Field IS NULL predicate.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo)">
            <summary>
            CTor. Creates the Field IS NULL predicate.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String)">
            <summary>
            CTor. Creates the Field IS NULL predicate.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Boolean)">
            <summary>
            CTor. Creates the Field IS NULL predicate.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.Boolean)">
            <summary>
            CTor. Creates the Field IS NULL predicate.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.ToQueryText(System.Int32@)">
            <summary>
            Implements the IPredicate ToQueryText method. Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <returns>The contained Predicate in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.ToQueryText(System.Int32@,System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate. 
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>The contained Predicate in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Boolean,System.Boolean,System.String)">
            <summary>
            Inits the class
            </summary>
            <param name="field"></param>
            <param name="persistenceInfo"></param>
            <param name="negate"></param>
            <param name="selfServicing"></param>
            <param name="objectAlias"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.Field">
            <summary>
            Field used in the comparison expression (SelfServicing).
            </summary>
            <exception cref="T:System.InvalidOperationException">if this object was constructed using a non-selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.FieldCore">
            <summary>
            Field used in the comparison expression (IEntityFieldCore).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.PersistenceInfo">
            <summary>
            Gets / sets persistenceInfo for field
            </summary>
            <exception cref="T:System.InvalidOperationException">When a value is set for this property and this object was created using a selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareNullPredicate.ObjectAlias">
            <summary>
            Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used).
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate">
            <summary>
            Implementation of a Field compare-range Values expression, using the following format:
            IEntityField(Core) ComparisonOperator Parameters (f.e. Foo IN (@Foo1, @Foo2 ... ))
            There is no check for types between the value specified and the specified IEntityField.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Object[])">
            <summary>
            CTor. Creates Field IN (values) clause
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="values">Value range to set for the IN clause. Specify any range of values.
            If a single array is passed or an ArrayList, this will be converted to a range of values.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.String,System.Object[])">
            <summary>
            CTor. Creates Field IN (values) clause
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="values">Value range to set for the IN clause. Specify any range of values.
            If a single array is passed or an ArrayList, this will be converted to a range of values.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Boolean,System.Object[])">
            <summary>
            CTor. Creates Field IN (values) clause
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
            <param name="values">Value range to set for the IN clause. Specify any range of values.
            If a single array is passed or an ArrayList, this will be converted to a range of values.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.String,System.Boolean,System.Object[])">
            <summary>
            CTor. Creates Field IN (values) clause
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
            <param name="values">Value range to set for the IN clause. Specify any range of values.
            If a single array is passed or an ArrayList, this will be converted to a range of values.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Object[])">
            <summary>
            CTor. Creates Field IN (values) clause
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="values">Value range to set for the IN clause. Specify any range of values.
            If a single array is passed or an ArrayList, this will be converted to a range of values.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.Object[])">
            <summary>
            CTor. Creates Field IN (values) clause
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="values">Value range to set for the IN clause. Specify any range of values.
            If a single array is passed or an ArrayList, this will be converted to a range of values.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Boolean,System.Object[])">
            <summary>
            CTor. Creates Field IN (values) clause
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
            <param name="values">Value range to set for the IN clause. Specify any range of values.
            If a single array is passed or an ArrayList, this will be converted to a range of values.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.Boolean,System.Object[])">
            <summary>
            CTor. Creates Field IN (values) clause
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
            <param name="values">Value range to set for the IN clause. Specify any range of values.
            If a single array is passed or an ArrayList, this will be converted to a range of values.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.ToQueryText(System.Int32@)">
            <summary>
            Implements the IPredicate ToQueryText method. Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <returns>The contained Predicate in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.ToQueryText(System.Int32@,System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate. 
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>The contained Predicate in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Boolean,System.Boolean,System.String,System.Object[])">
            <summary>
            Initializes the class.
            </summary>
            <param name="field"></param>
            <param name="persistenceInfo"></param>
            <param name="negate"></param>
            <param name="selfServicing"></param>
            <param name="objectAlias"></param>
            <param name="values"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.Field">
            <summary>
            Field used in the comparison expression (SelfServicing).
            </summary>
            <exception cref="T:System.InvalidOperationException">if this object was constructed using a non-selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.FieldCore">
            <summary>
            Field used in the comparison expression (IEntityFieldCore).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.PersistenceInfo">
            <summary>
            Gets / sets persistenceInfo for field
            </summary>
            <exception cref="T:System.InvalidOperationException">When a value is set for this property and this object was created using a selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.Values">
            <summary>
            Values to set for the IN Clause
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareRangePredicate.ObjectAlias">
            <summary>
            Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used).
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate">
            <summary>
            Implementation of a Field compare-operator Set expression, using the following format:
            IEntityField(Core) ComparisonOperator (Subquery)
            </summary>
            <remarks>If the operator EXISTS is used, the field is ignored so can be set to null/Nothing, as the predicate will simply
            result in EXISTS (SELECT setField FROM ...)</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.String)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <param name="maxNumberOfItemsToReturn">the maximum amount of rows to return in the set query.</param>
            <param name="sorter">The sort expression to use in the set query</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="negate">negate the compare expression</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <param name="negate">negate the compare expression</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="negate">negate the compare expression</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <param name="negate">negate the compare expression</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <param name="maxNumberOfItemsToReturn">the maximum amount of rows to return in the set query.</param>
            <param name="sorter">The sort expression to use in the set query</param>
            <param name="negate">negate the compare expression</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="setField">field to base the set on</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <param name="maxNumberOfItemsToReturn">the maximum amount of rows to return in the set query.</param>
            <param name="sorter">The sort expression to use in the set query</param>
            <param name="negate">negate the compare expression</param>
            <param name="groupByClause">The Group By clause to use in the set query.</param>
            <remarks>SelfServicing specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.String)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <param name="maxNumberOfItemsToReturn">the maximum amount of rows to return in the set query.</param>
            <param name="sorter">The sort expression to use in the set query</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="negate">negate the compare expression</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <param name="negate">negate the compare expression</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="negate">negate the compare expression</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <param name="negate">negate the compare expression</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <param name="maxNumberOfItemsToReturn">the maximum amount of rows to return in the set query.</param>
            <param name="sorter">The sort expression to use in the set query</param>
            <param name="negate">negate the compare expression</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate"/> instance.
            </summary>
            <param name="field">field to compare to the set results. specify null if EXISTS operator is used</param>
            <param name="persistenceInfoField">the persistence info for field. Set to null</param>
            <param name="setField">field to base the set on</param>
            <param name="persistenceInfoSetField">the persistence info for SetField. Set to null</param>
            <param name="operatorToUse">operator to use as operator between field and the set</param>
            <param name="filter">filter to use in the set query. Can be null</param>
            <param name="relations">relations to use in the setquery. Can be null</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection of the query this 
            predicate is part of or should be left empty if no alias is specified (or no relation collection is used in the query this predicate is part of). 
            In that case, use another overload.</param>
            <param name="maxNumberOfItemsToReturn">the maximum amount of rows to return in the set query.</param>
            <param name="sorter">The sort expression to use in the set query</param>
            <param name="negate">negate the compare expression</param>
            <param name="groupByClause">The Group By clause to use in the set query.</param>
            <remarks>Adapter specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.ToQueryText(System.Int32@)">
            <summary>
            Implements the IPredicate ToQueryText method. Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <returns>The contained Predicate in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.ToQueryText(System.Int32@,System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate. 
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>The contained Predicate in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SetOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String,System.Boolean,System.Boolean,System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Inits the class.
            </summary>
            <param name="field"></param>
            <param name="setField"></param>
            <param name="persistenceInfoField"></param>
            <param name="persistenceInfoSetField"></param>
            <param name="operatorToUse"></param>
            <param name="setFilter"></param>
            <param name="setRelations"></param>
            <param name="objectAlias"></param>
            <param name="negate"></param>
            <param name="selfServicing"></param>
            <param name="maxNumberOfItemsToReturn"></param>
            <param name="setSorter"></param>
            <param name="groupByClause"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.Field">
            <summary>
            Field used in the comparison expression (SelfServicing).
            </summary>
            <exception cref="T:System.InvalidOperationException">if this object was constructed using a non-selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.FieldCore">
            <summary>
            Field used in the comparison expression (IEntityFieldCore).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.PersistenceInfoField">
            <summary>
            Gets / sets persistenceInfo for field
            </summary>
            <exception cref="T:System.InvalidOperationException">When a value is set for this property and this object was created using a selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.SetField">
            <summary>
            Field used in the subquery (the field the set is of) (SelfServicing).
            </summary>
            <exception cref="T:System.InvalidOperationException">if this object was constructed using a non-selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.SetFieldCore">
            <summary>
            Field used in the subquery (the field the set is of) (SelfServicing).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.PersistenceInfoSetField">
            <summary>
            Gets / sets persistenceInfo for Setfield
            </summary>
            <exception cref="T:System.InvalidOperationException">When a value is set for this property and this object was created using a selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.OperatorToUse">
            <summary>
            Operator to use in the comparison
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.SetRelations">
            <summary>
            Gets / sets the set relations to use in the subquery.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.SetFilter">
            <summary>
            Gets / sets the filter to use in the subquery
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.SetFilterAsPredicateExpression">
            <summary>
            Wraps SetFilter in an IPredicateExpression instance
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.ObjectAlias">
            <summary>
            Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.MaxNumberOfItemsToReturn">
            <summary>
            Gets / sets maxNumberOfItemsToReturn for the subquery. Default: 0 (return all rows)
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.SetSorter">
            <summary>
            Gets / sets the setSorter expression to order the subquery results. Use it in combination with MaxNumberOfItemsToReturn set to 1
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareSetPredicate.GroupByClause">
            <summary>
            Gets / sets the groupByClause for this FieldCompareSetPredicate instance
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate">
            <summary>
            Implementation of a Field compare-operator Value expression, using the following format:
            IEntityField(Core) ComparisonOperator Parameter (f.e. Foo = @Foo)
            There is no check for types between the value specified and the specified IEntityField.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator)">
            <summary>
            CTor. Creates Field ComparisonOperator Parameter clause. The value to compare with is retrieved from the passed in field object.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="comparisonOperator">Operator to use in the comparison</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object)">
            <summary>
            CTor. Creates Field ComparisonOperator Parameter clause
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="comparisonOperator">Operator to use in the comparison</param>
            <param name="value">Value to set for the parameter</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,System.Boolean)">
            <summary>
            CTor. Creates Field ComparisonOperator Parameter clause
            </summary>
            <param name="field"></param>
            <param name="comparisonOperator"></param>
            <param name="value">Value to set for the parameter</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,System.String)">
            <summary>
            CTor. Creates Field ComparisonOperator Parameter clause
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="comparisonOperator">Operator to use in the comparison</param>
            <param name="value">Value to set for the parameter</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,System.String,System.Boolean)">
            <summary>
            CTor. Creates Field ComparisonOperator Parameter clause
            </summary>
            <param name="field"></param>
            <param name="comparisonOperator"></param>
            <param name="value">Value to set for the parameter</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator)">
            <summary>
            CTor. Creates Field ComparisonOperator Parameter clause. The value to compare with is retrieved from the passed in field object.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="comparisonOperator">Operator to use in the comparison</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object)">
            <summary>
            CTor. Creates Field ComparisonOperator Parameter clause. The value to compare with is retrieved from the passed in field object.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="comparisonOperator">Operator to use in the comparison</param>
            <param name="value">Value to set for the parameter</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,System.Boolean)">
            <summary>
            CTor. Creates Field ComparisonOperator Parameter clause. The value to compare with is retrieved from the passed in field object.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="comparisonOperator">Operator to use in the comparison</param>
            <param name="value">Value to set for the parameter</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,System.String)">
            <summary>
            CTor. Creates Field ComparisonOperator Parameter clause. The value to compare with is retrieved from the passed in field object.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="comparisonOperator">Operator to use in the comparison</param>
            <param name="value">Value to set for the parameter</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,System.String,System.Boolean)">
            <summary>
            CTor. Creates Field ComparisonOperator Parameter clause. The value to compare with is retrieved from the passed in field object.
            </summary>
            <param name="field">Field used in the comparison expression</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="comparisonOperator">Operator to use in the comparison</param>
            <param name="value">Value to set for the parameter</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.ToQueryText(System.Int32@)">
            <summary>
            Implements the IPredicate ToQueryText method. Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <returns>The contained Predicate in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.ToQueryText(System.Int32@,System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate. 
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>The contained Predicate in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.ComparisonOperator,System.Object,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes the class.
            </summary>
            <param name="field"></param>
            <param name="persistenceInfo"></param>
            <param name="comparisonOperator"></param>
            <param name="value"></param>
            <param name="negate"></param>
            <param name="selfServicing"></param>
            <param name="objectAlias"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.DetermineValueToUse(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore)">
            <summary>
            Returns the field's value to use: if the field is a PK field AND it is changed, use the DbValue value, otherwise the currentvalue
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.Field">
            <summary>
            Field used in the comparison expression (SelfServicing).
            </summary>
            <exception cref="T:System.InvalidOperationException">if this object was constructed using a non-selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.FieldCore">
            <summary>
            Field used in the comparison expression (IEntityFieldCore).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.PersistenceInfo">
            <summary>
            Gets / sets persistenceInfo for field
            </summary>
            <exception cref="T:System.InvalidOperationException">When a value is set for this property and this object was created using a selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.Operator">
            <summary>
            Operator to use in the comparison
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.Value">
            <summary>
            Value to set for the parameter
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldCompareValuePredicate.ObjectAlias">
            <summary>
            Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used).
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate">
            <summary>
            FieldFullTextSearchPredicate class. 
            CONTAINS(IEntityField(Core), Parameter) (f.e. CONTAINS(Foo, @Foo) )
            FREETEXT(IEntityField(Core), Parameter) (f.e. FREETEXT(Foo, @Foo) )
            SqlServer specific. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator,System.String)">
            <summary>
            CTor
            SelfServicing specific
            </summary>
            <param name="field">Field to compare</param>
            <param name="operatorToUse">operatore to use</param>
            <param name="pattern">pattern (incl. full text search commands)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator,System.String,System.Boolean)">
            <summary>
            CTor
            SelfServicing specific
            </summary>
            <param name="field">Field to compare</param>
            <param name="operatorToUse">operatore to use</param>
            <param name="pattern">pattern (incl. full text search commands)</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator,System.String,System.String)">
            <summary>
            CTor
            SelfServicing specific
            </summary>
            <param name="field">Field to compare</param>
            <param name="operatorToUse">operatore to use</param>
            <param name="pattern">pattern (incl. full text search commands)</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator,System.String,System.String,System.Boolean)">
            <summary>
            CTor
            SelfServicing specific
            </summary>
            <param name="field">Field to compare</param>
            <param name="operatorToUse">operatore to use</param>
            <param name="pattern">pattern (incl. full text search commands)</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator,System.String)">
            <summary>
            CTor
            Adapter specific
            </summary>
            <param name="field">Field to compare</param>
            <param name="persistenceInfo">The persistence info for the field</param>
            <param name="operatorToUse">operatore to use</param>
            <param name="pattern">pattern (incl. full text search commands)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator,System.String,System.Boolean)">
            <summary>
            CTor
            Adapter specific
            </summary>
            <param name="field">Field to compare</param>
            <param name="persistenceInfo">The persistence info for the field</param>
            <param name="operatorToUse">operatore to use</param>
            <param name="pattern">pattern (incl. full text search commands)</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator,System.String,System.String)">
            <summary>
            CTor
            Adapter specific
            </summary>
            <param name="field">Field to compare</param>
            <param name="persistenceInfo">The persistence info for the field</param>
            <param name="operatorToUse">operatore to use</param>
            <param name="pattern">pattern (incl. full text search commands)</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator,System.String,System.String,System.Boolean)">
            <summary>
            CTor
            Adapter specific
            </summary>
            <param name="field">Field to compare</param>
            <param name="persistenceInfo">The persistence info for the field</param>
            <param name="operatorToUse">operatore to use</param>
            <param name="pattern">pattern (incl. full text search commands)</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.ToQueryText(System.Int32@)">
            <summary>
            Implements the IPredicate ToQueryText method. Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <returns>The contained Predicate in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.ToQueryText(System.Int32@,System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate. 
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>The contained Predicate in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,SD.LLBLGen.Pro.ORMSupportClasses.FullTextSearchOperator,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes the class
            </summary>
            <param name="field"></param>
            <param name="persistenceInfo"></param>
            <param name="pattern"></param>
            <param name="operatorToUse"></param>
            <param name="negate"></param>
            <param name="selfServicing"></param>
            <param name="objectAlias"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.Field">
            <summary>
            Field used in the comparison expression (SelfServicing).
            </summary>
            <exception cref="T:System.InvalidOperationException">if this object was constructed using a non-selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.FieldCore">
            <summary>
            Field used in the comparison expression (IEntityFieldCore).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.PersistenceInfo">
            <summary>
            Gets / sets persistenceInfo for field
            </summary>
            <exception cref="T:System.InvalidOperationException">When a value is set for this property and this object was created using a selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.Pattern">
            <summary>
            Gets / sets the pattern to use in a Field LIKE Pattern clause. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.OperatorToUse">
            <summary>
            Gets / sets operatorToUse
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldFullTextSearchPredicate.ObjectAlias">
            <summary>
            Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used).
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate">
            <summary>
            Implementation of a LIKE predicate expression, using the following formats:
            IEntityField(Core) LIKE Parameter (f.e. Foo LIKE @Foo )
            A specified pattern will be set as the parameters value.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.String)">
            <summary>
            CTor for Field LIKE Pattern. 
            </summary>
            <param name="field">Field to compare with the LIKE operator</param>
            <param name="pattern">Pattern to use in the LIKE expression</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.String,System.String)">
            <summary>
            CTor for Field LIKE Pattern. 
            </summary>
            <param name="field">Field to compare with the LIKE operator</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="pattern">Pattern to use in the LIKE expression</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.String,System.Boolean)">
            <summary>
            CTor for Field LIKE Pattern. 
            </summary>
            <param name="field">Field to compare with the LIKE operator</param>
            <param name="pattern">Pattern to use in the LIKE expression</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.String,System.String,System.Boolean)">
            <summary>
            CTor for Field LIKE Pattern. 
            </summary>
            <param name="field">Field to compare with the LIKE operator</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="pattern">Pattern to use in the LIKE expression</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String)">
            <summary>
            CTor for Field LIKE Pattern. 
            </summary>
            <param name="field">Field to compare with the LIKE operator</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="pattern">Pattern to use in the LIKE expression</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.String)">
            <summary>
            CTor for Field LIKE Pattern. 
            </summary>
            <param name="field">Field to compare with the LIKE operator</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="pattern">Pattern to use in the LIKE expression</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.Boolean)">
            <summary>
            CTor for Field LIKE Pattern. 
            </summary>
            <param name="field">Field to compare with the LIKE operator</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="pattern">Pattern to use in the LIKE expression</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.String,System.Boolean)">
            <summary>
            CTor for Field LIKE Pattern. 
            </summary>
            <param name="field">Field to compare with the LIKE operator</param>
            <param name="persistenceInfo">The persistence info object for the field</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
            <param name="pattern">Pattern to use in the LIKE expression</param>
            <param name="negate">Flag to make this expression add NOT to itself</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.ToQueryText(System.Int32@)">
            <summary>
            Implements the IPredicate ToQueryText method. Retrieves a ready to use text representation of the contained Predicate.
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <returns>The contained Predicate in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.ToQueryText(System.Int32@,System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate. 
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>The contained Predicate in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.String,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Initializes the class
            </summary>
            <param name="field"></param>
            <param name="persistenceInfo"></param>
            <param name="pattern"></param>
            <param name="negate"></param>
            <param name="selfServicing"></param>
            <param name="objectAlias"></param>
            <param name="caseSensitiveCollation"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.Field">
            <summary>
            Field used in the comparison expression (SelfServicing).
            </summary>
            <exception cref="T:System.InvalidOperationException">if this object was constructed using a non-selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.FieldCore">
            <summary>
            Field used in the comparison expression (IEntityFieldCore).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.PersistenceInfo">
            <summary>
            Gets / sets persistenceInfo for field
            </summary>
            <exception cref="T:System.InvalidOperationException">When a value is set for this property and this object was created using a selfservicing constructor.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.Pattern">
            <summary>
            Gets / sets the pattern to use in a Field LIKE Pattern clause. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.ObjectAlias">
            <summary>
            Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldLikePredicate.CaseSensitiveCollation">
            <summary>
            Gets / sets caseSensitiveCollation flag. If set to true, the UPPER() function (or db specific equivalent) is applied to the field. Default: false
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo">
            <summary>
            Generic class which holds the generic information for entity field persistence of an entity field. Instances of this interface
            are passed to logic with an instance of the IEntityFieldCore interface. SelfServicing implements both interfaces in one interface: IEntityField.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.#ctor">
            <summary>
            CTor. Necessary for serialization. Do not use this CTor in code.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.#ctor(System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Byte,System.Byte,System.Boolean,System.String,System.ComponentModel.TypeConverter,System.Type)">
            <summary>
            CTor
            </summary>
            <param name="sourceSchemaName">The name of the schema which holds SourceObjectName. Schema is used to generate SQL on the fly.
            A common schema name in SqlServer is f.e. 'dbo'.</param>
            <param name="sourceObjectName">The name of the source object which holds SourceColumnName. Can be a view or a table.
            Used to generate SQL on the fly.</param>
            <param name="sourceColumnName">The name of the corresponding column in a view or table for the corresponding entity/view field. This name is used
            to map a column in a resultset onto the entity field.</param>
            <param name="isSourceColumnNullable">Flag if the Column mapped is nullable or not.</param>
            <param name="sourceColumnDbType">The type of the Column. The value stored here is the integer representation of the enum value of the type, f.e.
            SqlDbType.Int or OracleType.Int16</param>
            <param name="sourceColumnMaxLength">The maximum length of the value for this column (string/binary data).
            Is ignored for columns which hold non-string and non-binary values.</param>
            <param name="sourceColumnScale">The scale of the Column mapped onto the entityfield.</param>
            <param name="sourceColumnPrecision">The precision of the Column mapped onto the entityfield.</param>
            <param name="isIdentity">If set to true, the Dynamic Query Engine (DQE) will assume the field is an Identity field and will act
            accordingly (i.e.: as the target database handles Identity fields: SqlServer will generate a new value itself, Oracle wants to have a
            sequence input.</param>
            <param name="identityValueSequenceName">If isIdentity is set to true, this property has to be set to the name of the sequence which
            supplies the value for the column. On SqlServer this is @@IDENTITY or SCOPE_IDENTITY() and only used when the row is succesfully
            inserted, however on Oracle f.e. this value is used to specify a new value and to retrieve the new value. Is undefined when
            isIdentity is set to false.</param>
            <param name="typeConverterToUse">Type converter set when a conversion is required from the .NET type returned by the ADO.NET provider and the defined .NET type for this field.</param>
            <param name="actualDotNetType">The .NET type of the field in the DB. This value is used to convert a currentvalue back to this type using TypeConverterToUse. </param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Byte,System.Byte,System.Boolean,System.String,System.ComponentModel.TypeConverter,System.Type)">
            <summary>
            CTor
            </summary>
            <param name="sourceCatalogName">The name of the catalog the sourceSchemaName is in.</param>
            <param name="sourceSchemaName">The name of the schema which holds SourceObjectName. Schema is used to generate SQL on the fly.
            A common schema name in SqlServer is f.e. 'dbo'.</param>
            <param name="sourceObjectName">The name of the source object which holds SourceColumnName. Can be a view or a table. 
            Used to generate SQL on the fly.</param>
            <param name="sourceColumnName">The name of the corresponding column in a view or table for the corresponding entity/view field. This name is used 
            to map a column in a resultset onto the entity field.</param>
            <param name="isSourceColumnNullable">Flag if the Column mapped is nullable or not. </param>
            <param name="sourceColumnDbType">The type of the Column. The value stored here is the integer representation of the enum value of the type, f.e.
            SqlDbType.Int or OracleType.Int16</param>
            <param name="sourceColumnMaxLength">The maximum length of the value for this column (string/binary data). 
            Is ignored for columns which hold non-string and non-binary values.</param>
            <param name="sourceColumnScale">The scale of the Column mapped onto the entityfield.</param>
            <param name="sourceColumnPrecision">The precision of the Column mapped onto the entityfield.</param>
            <param name="isIdentity">If set to true, the Dynamic Query Engine (DQE) will assume the field is an Identity field and will act 
            accordingly (i.e.: as the target database handles Identity fields: SqlServer will generate a new value itself, Oracle wants to have a 
            sequence input.</param>
            <param name="identityValueSequenceName">If isIdentity is set to true, this property has to be set to the name of the sequence which 
            supplies the value for the column. On SqlServer this is @@IDENTITY or SCOPE_IDENTITY() and only used when the row is succesfully 
            inserted, however on Oracle f.e. this value is used to specify a new value and to retrieve the new value. Is undefined when 
            isIdentity is set to false.</param>
            <param name="typeConverterToUse">Type converter set when a conversion is required from the .NET type returned by the ADO.NET provider and the defined .NET type for this field.</param>
            <param name="actualDotNetType">The .NET type of the field in the DB. This value is used to convert a currentvalue back to this type using TypeConverterToUse. </param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.InitClass(System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.Byte,System.Byte,System.Boolean,System.String,System.ComponentModel.TypeConverter,System.Type)">
            <summary>
            Initializes the class' member variables. for parameter descriptions, see the constructor(s).
            </summary>
            <param name="sourceCatalogName">Name of the source catalog.</param>
            <param name="sourceSchemaName">Name of the source schema.</param>
            <param name="sourceObjectName">Name of the source object.</param>
            <param name="sourceColumnName">Name of the source column.</param>
            <param name="isSourceColumnNullable"><see langword="true"/> if [is source column nullable]; otherwise, <see langword="false"/>.</param>
            <param name="sourceColumnDbType">Type of the source column db.</param>
            <param name="sourceColumnMaxLength">Length of the source column max.</param>
            <param name="sourceColumnScale">Source column scale.</param>
            <param name="sourceColumnPrecision">Source column precision.</param>
            <param name="isIdentity"><see langword="true"/> if [is identity]; otherwise, <see langword="false"/>.</param>
            <param name="identityValueSequenceName">Name of the identity value sequence.</param>
            <param name="typeConverterToUse">Type converter to use.</param>
            <param name="actualDotNetType">Type of the actual dot net.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.ActualDotNetType">
            <summary>
            The .NET type of the field in the DB. This value is used to convert a currentvalue back to this type using TypeConverterToUse. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceCatalogName">
            <summary>
            The name of the catalog the SourceSchemaName is located in. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceSchemaName">
            <summary>
            The name of the schema which holds <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceObjectName"/>. Schema is used to generate SQL on the fly. 
            A common schema name in SqlServer is f.e. 'dbo'.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceObjectName">
            <summary>
            The name of the source object which holds <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceColumnName"/>. Can be a view or a table. Used to generate SQL on the fly.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceColumnName">
            <summary>
            The name of the corresponding column in a view or table for this entityfield. This name is used to map a column in a resultset onto the entity field.
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceColumnMaxLength">
            <summary>
            The maximum length of the value of this entityfield (string/binary data). Is ignored for entityfields which hold non-string and non-binary values.
            ColumnMaxLength
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceColumnDbType">
            <summary>
            The type of the Column mapped onto the EntityField. The value stored here is the integer representation of the enum value of the type, f.e.
            SqlDbType.Int or OracleType.Int16
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceColumnIsNullable">
            <summary>
            Flag if the Column mapped onto the entityfield is nullable or not. 
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceColumnScale">
            <summary>
            The scale of the Column mapped onto the entityfield.
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.SourceColumnPrecision">
            <summary>
            The precision of the Column mapped onto the entityfield.
            Used for update/insert operations on the column
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.IsIdentity">
            <summary>
            If set to true, the Dynamic Query Engine (DQE) will assume the field is an Identity field and will act accordingly (i.e.: as the target database
            handles Identity fields: SqlServer will generate a new value itself, Oracle wants to have a sequence input.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.IdentityValueSequenceName">
            <summary>
            If <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.IsIdentity"/> is set to true, this property has to be set to the name of the sequence which supplies the value for the EntityField's
            corresponding table field. On SqlServer this is @@IDENTITY or SCOPE_IDENTITY() and only used when the row is succesfully inserted, however on Oracle
            f.e. this value is used to specify a new value and to retrieve the new value. Is undefined when <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.IsIdentity"/> is set to false.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.FieldPersistenceInfo.TypeConverterToUse">
            <summary>
            Gets the type converter to use. Only set through constructor and when a conversion is required from the .NET type returned by the 
            ADO.NET provider and the defined .NET type for this field.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection">
            <summary>
            GroupByCollection class which is used to collect EntityField(2) instances which are used for the 
            GROUP BY clause in a retrieval query. When a group by collection is specified in a retrieval query, all
            fields in the resultset have to be in this collection.
            Generic
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection">
            <summary>
            Interface for the GroupByCollection class which is used to collect EntityField(2) instances which are used for the 
            GROUP BY clause in a retrieval query. When a group by collection is specified in a retrieval query, all
            fields in the resultset have to be in this collection.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField)">
            <summary>
            Adds the passed in IEntityField instance to the list. IEntityField objects can be added just once.
            </summary>
            <param name="fieldToAdd">IEntityField instance to add</param>
            <returns>Index of added field in the list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2)">
            <summary>
            Adds the passed in IEntityField2 instance to the list. IEntityField2 objects can be added just once.
            </summary>
            <param name="fieldToAdd">IEntityField2 instance to add</param>
            <returns>Index of added field in the list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.Insert(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Int32)">
            <summary>
            Inserts the field passed in on index specified.
            </summary>
            <param name="fieldToInsert">IEntityField to insert</param>
            <param name="index">index on which the field should be inserted</param>
            <exception cref="T:System.InvalidOperationException">If the field is already added.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.Insert(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,System.Int32)">
            <summary>
            Inserts the field passed in on index specified.
            </summary>
            <param name="fieldToInsert">IEntityField2 to insert</param>
            <param name="index">index on which the field should be inserted</param>
            <exception cref="T:System.InvalidOperationException">If the field is already added.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.Remove(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField)">
            <summary>
            Removes the passed in IEntityField instance. Finds the object to remove using value compare.
            </summary>
            <param name="fieldToRemove">IEntityField instance to remove</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.Remove(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2)">
            <summary>
            Removes the passed in IEntityField2 instance. Finds the object to remove using value compare.
            </summary>
            <param name="fieldToRemove">IEntityField2 instance to remove</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the IEntityField instance at index specified from the collection.
            </summary>
            <param name="index">the index of the field to remove</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.IndexOf(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField)">
            <summary>
            Returns the index of the field specified. 
            </summary>
            <param name="fieldToFind">field to determine the index of</param>
            <returns>index of field, if found, otherwise -1</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.IndexOf(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2)">
            <summary>
            Returns the index of the field specified.
            </summary>
            <param name="fieldToFind">field to determine the index of</param>
            <returns>index of field, if found, otherwise -1</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.Contains(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField)">
            <summary>
            Checks if the field is in the list. Does a value compare, not an object reference compare. 
            </summary>
            <param name="fieldToCheck">IEntityField to check for presence.</param>
            <returns>true if a similar field is found in the collection, false otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.Contains(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2)">
            <summary>
            Checks if the field is in the list. Does a value compare, not an object reference compare. 
            </summary>
            <param name="fieldToCheck">IEntityField2 to check for presence.</param>
            <returns>true if a similar field is found in the collection, false otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.GetEntityFieldCore(System.Int32)">
            <summary>
            Returns the IEntityFieldCore part of the field at position index
            </summary>
            <param name="index">index of field to return the IEntityFieldCore portion of</param>
            <returns>the IEntityFieldCore part of the field at position index</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.GetFieldPersistenceInfo(System.Int32)">
            <summary>
            Returns the IFieldPersistenceInfo part of the field at position index
            </summary>
            <param name="index">index of field to return the IFieldPersistenceInfo portion of</param>
            <returns>the IFieldPersistenceInfo part of the field at position index</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.SetFieldPersistenceInfo(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Int32)">
            <summary>
            Sets the IFieldPersistenceInfo part of the field at position index.
            Adapter specific.
            </summary>
            <param name="persistenceInfo">The field persistence info object to set</param>
            <param name="index">index of field to set the persistence info of</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.Item(System.Int32)">
            <summary>
            Indexer in the collection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.Count">
            <summary>
            The amount of items currently stored in the IGroupByCollection
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection.HavingClause">
            <summary>
            Gets/sets the predicate expression which forms the having clause for this group by collection.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField)">
            <summary>
            Adds the passed in IEntityField instance to the list. IEntityFields can be added just once.
            If the field is already in the collection, the index of the field in the list is returned.
            </summary>
            <param name="fieldToAdd">IEntityField instance to add</param>
            <returns>Index of added field in the list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2)">
            <summary>
            Adds the passed in IEntityField2 instance to the list. IEntityField2 fields can be added just once.
            If the field is already in the collection, the index of the field in the list is returned.
            </summary>
            <param name="fieldToAdd">IEntityField2 instance to add</param>
            <returns>Index of added field in the list.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.Remove(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField)">
            <summary>
            Removes the passed in IEntityField instance. Finds the object to remove using value compare.
            </summary>
            <param name="fieldToRemove">IEntityField instance to remove</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.Remove(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2)">
            <summary>
            Removes the passed in IEntityField2 instance. Finds the object to remove using value compare.
            </summary>
            <param name="fieldToRemove">IEntityField2 instance to remove</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.Insert(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,System.Int32)">
            <summary>
            Inserts the field passed in on index specified.
            </summary>
            <param name="fieldToInsert">IEntityField to insert</param>
            <param name="index">index on which the field should be inserted</param>
            <exception cref="T:System.InvalidOperationException">If the field is already added.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.Insert(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2,System.Int32)">
            <summary>
            Inserts the field passed in on index specified.
            </summary>
            <param name="fieldToInsert">IEntityField2 to insert</param>
            <param name="index">index on which the field should be inserted</param>
            <exception cref="T:System.InvalidOperationException">If the field is already added.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the IEntityField(2) instance at index specified from the collection.
            </summary>
            <param name="index">the index of the field to remove</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.Contains(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField)">
            <summary>
            Checks if the field is in the list. Does a value compare, not an object reference compare. 
            </summary>
            <param name="fieldToCheck">IEntityField to check for presence.</param>
            <returns>true if a similar field is found in the collection, false otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.Contains(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2)">
            <summary>
            Checks if the field is in the list. Does a value compare, not an object reference compare. 
            </summary>
            <param name="fieldToCheck">IEntityField2 to check for presence.</param>
            <returns>true if a similar field is found in the collection, false otherwise.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.IndexOf(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField)">
            <summary>
            Gets the index of the specified field in the list.
            </summary>
            <param name="fieldToCheck">field to get the index of</param>
            <returns>-1 if not found, index otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.IndexOf(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField2)">
            <summary>
            Gets the index of the specified field in the list.
            </summary>
            <param name="fieldToCheck">field to get the index of</param>
            <returns>-1 if not found, index otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.GetEntityFieldCore(System.Int32)">
            <summary>
            Returns the IEntityFieldCore part of the field at position index
            </summary>
            <param name="index">index of field to return the IEntityFieldCore portion of</param>
            <returns>the IEntityFieldCore part of the field at position index</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.GetFieldPersistenceInfo(System.Int32)">
            <summary>
            Returns the IFieldPersistenceInfo part of the field at position index
            </summary>
            <param name="index">index of field to return the IFieldPersistenceInfo portion of</param>
            <returns>the IFieldPersistenceInfo part of the field at position index</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.SetFieldPersistenceInfo(SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,System.Int32)">
            <summary>
            Sets the IFieldPersistenceInfo part of the field at position index.
            Adapter specific.
            </summary>
            <param name="persistenceInfo">The field persistence info object to set</param>
            <param name="index">index of field to set the persistence info of</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.Item(System.Int32)">
            <summary>
            Indexer in the collection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.Count">
            <summary>
            The amount of items currently stored in the IGroupByCollection
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection.HavingClause">
            <summary>
            Gets/sets the predicate expression which forms the having clause for this group by collection.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase">
            <summary>
            Base class for implementing an InheritanceInfoProvider object.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider">
            <summary>
            Interface for inheritanceinfo provider objects and other inheritance information. 
            InheritanceInfo objects provide inheritance information at runtime for the DQE's and helper classes.
            The information inside these providers has to be statically constructed and should not change at runtime to make it threadsafe.
            These providers supply the DQE with detailed inheritance information so queries can be formed for any entity hierarchy.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.GetInheritanceInfo(System.String,System.Boolean)">
            <summary>
            Gets an IInheritanceInfo object with the inheritance information for the entity with the supplied name. 
            </summary>
            <param name="entityName">name of the entity, like "CustomerEntity". This name is used for retrieving the information from
            a thread safe hashtable</param>
            <param name="startWithRoot">Set to <see langword="true"/> if the relations in
            <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.RelationsToHierarchyRoot"/> have to start with the root and walk downwards to the entityName
            entity, or set to false if the relations have to start at the entityname and move upwards to the root.</param>
            <returns>Ready to use IInheritanceInfo object if entityName is part of a hierarchy. If entityName isn't part of a
            hierarchy, null is returned. (not part of a hierarchy means: not a supertype nor a subtype</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.GetHierarchyRelations(System.String)">
            <summary>
            This method returns all relations from the entityName to the root and from the entityName downwards to all the reachable leafs 
            from entityName. All relations to the root are INNER JOIN, all relations from entityName to leafs are LEFT JOIN
            </summary>
            <param name="entityName">name of the current entity on the path of which the hierarchy has to be determined. Example: "CustomerEntity"</param>
            <returns>collection with relations if entityName was found, or null if not.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.GetHierarchyRelations(System.Collections.ArrayList)">
            <summary>
            This method returns all relations from the lowest entity found in the passed in entityNames to the root and from the lowest entityName 
            downwards to all the reachable leafs from entityName. All relations to the root are INNER JOIN, all relations from the lowest entityName 
            to leafs are LEFT JOIN
            </summary>
            <param name="entityNames">1 or more names of entities on the same path of which the hierarchy has to be determined. Example of a name: "CustomerEntity"</param>
            <returns>collection with relations if all entityNames were found, or null if not.</returns>
            <remarks>This method is a wrapper around GetHierarchyRelations(name), to make finding the right collection more efficient. It finds the lowest
            entityname in the hierarchy and calls GetHierarchyRelations(name) with that name.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.GetHierarchyFields(System.String)">
            <summary>
            This method returns an array of IEntityFieldCore objects which contains all fields of all entities on the path: 
            entityName upwards to the root and entityName downwards to all leafs reachable from entityName, including entityName.
            </summary>
            <param name="entityName">name of the current entity on the path of which the hierarchy fields has to be determined. Example: "CustomerEntity"</param>
            <returns>Array of IEntityFieldCore objects, each element represents one field, or null if entityName isn't found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.GetEntityFactory(System.String,System.Object[],System.Collections.Hashtable)">
            <summary>
            Retrieves the factory for the entity represented by the values passed in, or null if entityName isn't present. The values have to 
            represent an entity of the type entityName or a subtype of that type. 
            </summary>
            <param name="entityName">name of the entity, like 'CustomerEntity'. This is the name of the root of the hierarchy to consider. 
            For example when fetching all managers, and manager derives from employee, this parameter is 'ManagerEntity', and only the manager type
            or its subtypes (direct or indirect) are considered. </param>
            <param name="values">Field values read from the db, to determine which factory to return, based on the field values passed in.</param>
            <param name="entityFieldStartIndexesPerEntity">indexes into values where per entity type their own fields start.</param>
            <returns>the factory for the entity which is represented by the values passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.GetEntityTypeFilter(System.String,System.Boolean)">
            <summary>
            Gets a predicateexpression which filters on the entity with type 'entityName'. Example of a valid name is 'CustomerEntity'. 
            </summary>
            <param name="entityName">Name of the entity to filter on, like 'CustomerEntity'</param>
            <param name="negate">Flag to produce a NOT filter, (true), or a normal filter (false). </param>
            <returns>ready to use predicateexpression, or an empty predicate expression if entityName's value isn't an entity which is a hierarchical type.</returns>
            <remarks>Only useful in entity fetches.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.CheckIfIsSubTypeOf(System.String,System.String)">
            <summary>
            Determines if typeToCheck is a subtype of superType.
            </summary>
            <param name="typeToCheck">Type to check.</param>
            <param name="superType">The supertype.</param>
            <returns>true if typeToCheck is a subtype of supertype, false otherwise. Also returns false is supertype isn't in a hierarchy.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.AddEntityInfo(System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IRelationFactory,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactoryCore,System.Int32[])">
            <summary>
            Adds a new entity to the store. The supertype name is enough to build the complete hierarchy. 
            </summary>
            <param name="name">name of the entity to add, e.g. "CustomerEntity"</param>
            <param name="superTypeName">the name of the supertype of the passed in entity, e.g. "EmployeeEntity".</param>
            <param name="relationFactory">the relation factory of the entity with name, to produce relations to supertype and subtype.</param>
            <param name="entityFactory">Entity factory.</param>
            <param name="distinguishingFieldIndexes">Distinguishing field indexes.</param>
            <remarks>TargetPerEntity specific version</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.AddEntityInfo(System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactoryCore,System.Int32,System.Object)">
            <summary>
            Adds a new entity to the store. The supertype name is enough to build the complete hierarchy.
            </summary>
            <param name="name">name of the entity to add, e.g. "CustomerEntity"</param>
            <param name="superTypeName">the name of the supertype of the passed in entity, e.g. "EmployeeEntity".</param>
            <param name="entityFactory">Entity factory.</param>
            <param name="discriminatorColumnIndex">Index of the discriminator column.</param>
            <param name="discriminatorColumnValue">Discriminator column value which distinguishes this entity</param>
            <remarks>TargetPerEntityHierarchy specific version</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.BuildHierarchyInfoStore">
            <summary>
            Builds the hierarchy information from the added information though AddEntityInfo calls. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.ConstructPath(System.String)">
            <summary>
            Constructs the path from entity to root of the hierarchy the entity is in. It also constructs entity to hierarchy leafs 
            </summary>
            <param name="entityName">Name of the entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.CheckIfIsSubTypeOf(System.String,System.String)">
            <summary>
            Determines if typeToCheck is a subtype of superType.
            </summary>
            <param name="typeToCheck">Type to check.</param>
            <param name="superType">The super.</param>
            <returns>
            true if typeToCheck is a subtype of supertype, false otherwise. Also returns false is supertype isn't in a hierarchy.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetEntityFields(System.String)">
            <summary>
            Gets the entity fields for the entity passed in. Only the fields defined in the entity are returned
            </summary>
            <param name="entityName">Name of the entity to grab the fields for</param>
            <returns>array of IEntityFieldCore fields</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetInheritanceInfo(System.String,System.Boolean)">
            <summary>
            Gets an IInheritanceInfo object with the inheritance information for the entity with the supplied name. 
            </summary>
            <param name="entityName">name of the entity, like "CustomerEntity". This name is used for retrieving the information from
            a thread safe hashtable</param>
            <param name="startWithRoot">Set to <see langword="true"/> if the relations in
            <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.RelationsToHierarchyRoot"/> have to start with the root and walk downwards to the entityName
            entity, or set to false if the relations have to start at the entityname and move upwards to the root.</param>
            <returns>Ready to use IInheritanceInfo object if entityName is part of a hierarchy. If entityName isn't part of a
            hierarchy, null is returned. (not part of a hierarchy means: not a supertype nor a subtype</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetHierarchyRelations(System.String)">
            <summary>
            This method returns all relations from the entityName to the root and from the entityName downwards to all the reachable leafs 
            from entityName. All relations to the root are INNER JOIN, all relations from entityName to leafs are LEFT JOIN
            </summary>
            <param name="entityName">name of the current entity on the path of which the hierarchy has to be determined. Example: "CustomerEntity"</param>
            <returns>collection with relations if entityName was found, or null if not or if the entity is in a TargetPerEntityHierarchy.</returns>
            <remarks>This routine uses no subroutines to avoid thread unsafety.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetHierarchyRelations(System.Collections.ArrayList)">
            <summary>
            This method returns all relations from the lowest entity found in the passed in entityNames to the root and from the lowest entityName 
            downwards to all the reachable leafs from entityName. All relations to the root are INNER JOIN, all relations from the lowest entityName 
            to leafs are LEFT JOIN. 
            </summary>
            <param name="entityNames">1 or more names of entities on the same path of which the hierarchy has to be determined. Example of a name: "CustomerEntity"</param>
            <returns>collection with relations if all entityNames were found, or null if not.</returns>
            <remarks>This method is a wrapper around GetHierarchyRelations(name), to make finding the right collection more efficient. It finds the lowest
            entityname in the hierarchy and calls GetHierarchyRelations(name) with that name. It assumes the names are on the same path to the root.</remarks>
            <exception cref="T:System.ArgumentException">when not all entities specified in entityNames are on the same hierarchical path</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetHierarchyFields(System.String)">
            <summary>
            This method returns an array of IEntityFieldCore objects which contains all fields of all entities on the path: 
            entityName upwards to the root and entityName downwards to all leafs reachable from entityName, including entityName.
            </summary>
            <param name="entityName">name of the current entity on the path of which the hierarchy fields has to be determined. Example: "CustomerEntity"</param>
            <returns>Array of IEntityFieldCore objects, each element represents one field, or null if entityName isn't found.
            When fields are returned, their aliases are set from front to back as 'Fx' where x is the index in the array, starting with 0.</returns>
            <remarks>This routine uses no subroutines to avoid thread unsafety.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetEntityFactory(System.String,System.Object[],System.Collections.Hashtable)">
            <summary>
            Retrieves the factory for the entity represented by the values passed in, or null if entityName isn't present. The values have to 
            represent an entity of the type entityName or a subtype of that type. 
            </summary>
            <param name="entityName">name of the entity, like 'CustomerEntity'. This is the name of the root of the hierarchy to consider. 
            For example when fetching all managers, and manager derives from employee, this parameter is 'ManagerEntity', and only the manager type
            or its subtypes (direct or indirect) are considered. </param>
            <param name="values">Field values read from the db, to determine which factory to return, based on the field values passed in.</param>
            <param name="entityFieldStartIndexesPerEntity">indexes into values where per entity type their own fields start.</param>
            <returns>the factory for the entity which is represented by the values passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetEntityTypeFilter(System.String,System.Boolean)">
            <summary>
            Gets a predicateexpression which filters on the entity with type 'entityName'. Example of a valid name is 'CustomerEntity'. 
            </summary>
            <param name="entityName">Name of the entity to filter on, like 'CustomerEntity'</param>
            <param name="negate">Flag to produce a NOT filter, (true), or a normal filter (false). </param>
            <returns>ready to use predicateexpression, or an empty predicate expression if entityName's value isn't an entity which is a hierarchical type.</returns>
            <remarks>Only useful in entity fetches.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetEntityFactoryTargetPerEntity(System.String,System.Object[],System.Collections.Hashtable)">
            <summary>
            Retrieves the factory for the entity represented by the values passed in, or null if entityName isn't present. The values have to 
            represent an entity of the type entityName or a subtype of that type. 
            </summary>
            <param name="entityName">name of the entity, like 'CustomerEntity'. This is the name of the root of the hierarchy to consider. 
            For example when fetching all managers, and manager derives from employee, this parameter is 'ManagerEntity', and only the manager type
            or its subtypes (direct or indirect) are considered. </param>
            <param name="values">Field values read from the db, to determine which factory to return, based on the field values passed in.</param>
            <param name="entityFieldStartIndexesPerEntity">indexes into values where per entity type their own fields start.</param>
            <returns>the factory for the entity which is represented by the values passed in.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.GetEntityFactoryTargetPerEntityHierarchy(System.String,System.Object[])">
            <summary>
            Retrieves the factory for the entity represented by the values passed in, or null if entityName isn't present. The values have to 
            represent an entity of the type entityName or a subtype of that type. 
            </summary>
            <param name="entityName">name of the entity, like 'CustomerEntity'. As all entity types are in the same target, the routine considers
            all subtypes. </param>
            <param name="values">Field values read from the db, to determine which factory to return, based on the field values passed in.</param>
            <returns>the factory for the entity which is represented by the values passed in.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo">
            <summary>
            Private class which contains the entity information for an entity added to the provider's store.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.#ctor(System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IRelationFactory,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactoryCore,System.Int32[])">
            <summary>
            CTor
            </summary>
            <param name="name">Name.</param>
            <param name="superTypeName">Name of the super type.</param>
            <param name="relationFactory">Relation factory.</param>
            <param name="entityFactory">Entity factory.</param>
            <param name="distinguishingFieldIndexes">Distinguishing field indexes.</param>
            <remarks>TargetPerEntity specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.#ctor(System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactoryCore,System.Int32,System.Object)">
            <summary>
            CTor
            </summary>
            <param name="name">Name.</param>
            <param name="superTypeName">Name of the super type.</param>
            <param name="entityFactory">Entity factory.</param>
            <param name="discriminatorColumnIndex">Index of the discriminator column</param>
            <param name="discriminatorColumnValue">Discriminator column value which distinguishes this entity type.</param>
            <remarks>TargetPerEntityHierarchy specific constructor</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.AddSubType(System.String)">
            <summary>
            adds the name passed in as a subtype of this entity.
            </summary>
            <param name="subTypeName"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.DiscriminatorValueToTypeName">
            <summary>
            Gets / sets discriminatorValueToTypeName. This hashtable is only set in entityinfo objects of root entities in TargetPerEntityHierarchy hierarchies.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.IsInTargetPerEntity">
            <summary>
            returns true if relationfactory is set, which is typical for TargetPerEntity hierarchies.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.DiscriminatorColumnIndex">
            <summary>
            Gets / sets discriminatorColumnIndex
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.DiscriminatorColumnValue">
            <summary>
            Gets / sets discriminatorColumnValue
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.EntityFactory">
            <summary>
            Gets / sets entityFactory
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.DistinguishingFieldIndexes">
            <summary>
            Gets / sets distinguishingFieldIndexes
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.Name">
            <summary>
            Gets / sets name
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.SuperTypeName">
            <summary>
            Gets / sets superTypeName
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.RelationFactory">
            <summary>
            Gets / sets relationFactory
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.SubTypeNames">
            <summary>
            Gets / sets subTypeNames
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfoProviderBase.EntityInfo.HasSubTypes">
            <summary>
            Gets if the entity has any subtypes.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo">
            <summary>
            Simple class which contains the inheritance information of an entity, and which is produced by an inheritanceinfoprovider.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo">
            <summary>
            Interface for objects which specify inheritance information for a certain entity. Instances of this interface are produced by
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfoProvider.GetInheritanceInfo(System.String,System.Boolean)"/>
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.HierarchyType">
            <summary>
            Gets the type of the hierarchy.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.RelationsToHierarchyRoot">
            <summary>
            Gets the relations to hierarchy root, starting at the root, to the owner entity, INNER JOINed
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.SuperTypeEntityName">
            <summary>
            Gets the name of the super type entity. Example: "CustomerEntity"
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.OwnerEntityName">
            <summary>
            The name of the entity which owns this information, of which this object belongs to.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.EntityNamesOnHierarchyPath">
            <summary>
            Readonly arraylist with all teh entity names on the path to the root, starting with the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.OwnerEntityName"/> and ending with the 
            root entity name of the hierarchy. If <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.OwnerEntityName"/> entity is a root entity, this collection contains one name: <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.OwnerEntityName"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.DiscriminatorColumnIndex">
            <summary>
            Gets the index of the discriminator column.
            </summary>
            <value>0 or higher for an entity in a TargetPerEntityHierarchy, otherwise undefined.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IInheritanceInfo.DiscriminatorColumnValue">
            <summary>
            Gets the discriminator column value.
            </summary>
            <value>The discriminator value for the entity of this inheritance info, or undefined if the entity is not in a TargetPerEntityHierarchy.</value>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.#ctor(System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.InheritanceHierarchyType,SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection,System.Int32,System.Object,System.Collections.ArrayList)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo"/> class.
            </summary>
            <param name="superTypeEntityName">Name of the super type entity.</param>
            <param name="ownerEntityName">Name of the owner entity.</param>
            <param name="hierarchyType">Type of the hierarchy.</param>
            <param name="relationsToHierarchyRoot">Relations to hierarchy root.</param>
            <param name="discriminatorColumnIndex">Index of the discriminator column.</param>
            <param name="discriminatorColumnValue">Discriminator column value.</param>
            <param name="entityNamesOnHierarchyPath">Entity names on hierarchy path.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.HierarchyType">
            <summary>
            Gets the type of the hierarchy.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.RelationsToHierarchyRoot">
            <summary>
            Gets the relations to hierarchy root, starting at the root, to the owner entity, INNER JOINed
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.SuperTypeEntityName">
            <summary>
            Gets the name of the super type entity. Example: "CustomerEntity"
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.OwnerEntityName">
            <summary>
            The name of the entity which owns this information, of which this object belongs to.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.DiscriminatorColumnIndex">
            <summary>
            Gets the index of the discriminator column.
            </summary>
            <value>0 or higher for an entity in a TargetPerEntityHierarchy, otherwise undefined.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.DiscriminatorColumnValue">
            <summary>
            Gets the discriminator column value.
            </summary>
            <value>The discriminator value for the entity of this inheritance info, or undefined if the entity is not in a TargetPerEntityHierarchy.</value>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.EntityNamesOnHierarchyPath">
            <summary>
            Readonly arraylist with all teh entity names on the path to the root, starting with the <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.OwnerEntityName"/> and ending with the 
            root entity name of the hierarchy. If <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.OwnerEntityName"/> entity is a root entity, this collection contains one name: <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.InheritanceInfo.OwnerEntityName"/>.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement">
            <summary>
            Interface definition for the PrefetchPathElement type, which instances are used in a PrefetchPath instance.
            Selfservicing specific
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore">
            <summary>
            Interface definition for the core of a PrefetchPathElement instances contained in a PrefetchPath. 
            This interface is used as a base interface for the specialised IPrefetchPathElement (selfservicing) and IPrefetchPathElement2 (Adapter).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.Relation">
            <summary>
            The relation between the destination (parent) entity and the entity to fetch with this path element
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.DestinationEntityType">
            <summary>
            The EntityType enum value for the entity the entities to fetch are to be stored in. 
            </summary>
            <remarks>Set in the constructor</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.ToFetchEntityType">
            <summary>
            The EntityType enum value for the entity to fetch defined by this path element.
            </summary>
            <remarks>Set in the constructor</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.MaxAmountOfItemsToReturn">
            <summary>
            The maximum amount of entities to set per destination instance.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.Sorter">
            <summary>
            The sort expression to sort the entities per destination instance. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.Filter">
            <summary>
            The filter predicate expression to fetch the ToFetch entities. Initially this is set in the constructor.
            Add additional predicates to this predicate expression.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.FilterRelations">
            <summary>
            The relations to use in the filters. Initially this is an empty collection, as the fetches use subqueries. 
            Add additional relations to this relation collection to have multi-entity filters.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.PropertyName">
            <summary>
            The name of the property which is the destination for the entities fetched by the definition of this path element.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElementCore.TypeOfRelation">
            <summary>
            The type of relation between the entity to fetch and the entity which will hold the entity to fetch
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement.SubPath">
            <summary>
            The subpath containing path elements to retrieve in the ToFetch entity of this PrefetchPathElement. Can be empty.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement.RetrievalCollection">
            <summary>
            The entity collection to fill (and to use to retrieve the entities to fetch). After the fetch, this collection contains
            the entities to merge with the instances of the parent entity. 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath">
            <summary>
            Interface definition for the PrefetchPath type, which specifies a prefetch path to fetch related entities during a fetch.
            SelfServicing specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,System.Int32)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <param name="additionalSorter">Additional sort clauses to be added added to the sortexpression already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath.Item(System.Int32)">
            <summary>
            Indexer in the prefetch path
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath.RootEntityType">
            <summary>
            The EntityType enum value for the entity which is the root type of this path.
            </summary>
            <remarks>Set in the constructor</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath.Count">
            <summary>
            Returns the amount of PrefetchPathElement in this object
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction">
            <summary>
            Interface for the definition of a Transaction class which is used to control a serie of actions on multiple entities or entity collection classes.
            SelfServicing specific
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.Save(System.String)">
            <summary>
            Creates a savepoint with the name savePointName in the current transaction. You can roll back to this savepoint using
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.Rollback(System.String)"/>.
            </summary>
            <param name="savePointName">name of savepoint. Must be unique in an active transaction</param>
            <exception cref="T:System.InvalidOperationException">If no transaction is in progress.</exception>
            <exception cref="T:System.ArgumentException">if savePointName is empty or null</exception>
            <exception cref="T:System.NotSupportedException">if the .NET database provider doesn't support transaction saving or when COM+ is used.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.Commit">
            <summary>
            Commits the transaction in action. It will end all database activity, since commiting a transaction is finalizing it. After
            calling Commit or Rollback, the ITransaction implementing class will reset itself. When used in combination of COM+, it will
            call ContextUtil.SetComplete() to commit the current COM+ transaction.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.Rollback">
            <summary>
            Rolls back the transaction in action. It will end all database activity, since commiting a transaction is finalizing it. After
            calling Commit or Rollback, the ITransaction implementing class will reset itself. When used in combination of COM+, it will
            call ContextUtil.SetAbort() to abort (rollback) the current COM+ transaction.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.Rollback(System.String)">
            <summary>
            Rolls back the transaction in action to the savepoint with the name savepointName. No internal objects are being reset when this method is called,
            so call this Rollback overload only to roll back to a savepoint. To roll back a complete transaction, call Rollback() without specifying a savepoint
            name. Create a savepoint by calling Save(savePointName)
            </summary>
            <param name="savePointName">name of the savepoint to roll back to.</param>
            <exception cref="T:System.InvalidOperationException">If no transaction is in progress.</exception>
            <exception cref="T:System.ArgumentException">if savePointName is empty or null</exception>
            <exception cref="T:System.NotSupportedException">if the .NET database provider doesn't support transaction rolling back a transaction to a named
            point or when COM+ is used.</exception>
            <remarks>Not supported when using COM+</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.Add(SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement)">
            <summary>
            Adds the passed in object as a participant of this transaction. 
            </summary>
            <param name="participant">The ITransactionalElement implementing object which actions have to be included in this transaction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.Remove(SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement)">
            <summary>
            Removes the passed in object from the transaction.
            </summary>
            <param name="participant">The ITransactionalElement implementing object which should be removed from this transaction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.SaveInRecursionStarted">
            <summary>
            Increases the recursion counter with 1. If the counter reaches 0, the objectID's in the _entitiesInTransaction collection are removed.
            For internal use only.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.SaveInRecursionEnded">
            <summary>
            Decreases the recursion counter with 1. If the counter reaches 0, the objectID's in the _entitiesInTransaction collection are removed.
            For internal use only.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.TransactionIsolationLevel">
            <summary>
            Gets the isolation level the transaction should use. Only settable with the constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.Name">
            <summary>
            Gets the name of the transaction. Only settable with the constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.ConnectionString">
            <summary>
            Gets the connection string used for the connection with the database. Only settable with the constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.ConnectionToUse">
            <summary>
            The connection object to use with this transaction. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.PhysicalTransaction">
            <summary>
            The physical transaction object used over <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.ConnectionToUse"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.EntitiesInTransaction">
            <summary>
            ArrayList of GUID's of the entities currently participating in this transaction. This collection is
            used to keep track of which entities already have been added during a recursive save.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITransaction.ParticipantsInProgress">
            <summary>
            ArrayList of GUID's of the entities currently participating in this transaction which are in progress, i.e. their
            Save() routine has been called but execution is transfered to a dependent object first.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory">
            <summary>
            Interface for EntityFactory objects used by several methods which have to create entity objects on the fly.
            SelfServicing specific
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactoryCore">
            <summary>
            Interface to define a common interface between the factory interfaces for adapter and selfservicing.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactoryCore.CreateHierarchyRelations">
            <summary>
            Creates the relations collection to the entity to join all targets so this entity can be fetched. 
            </summary>
            <returns>null if the entity isn't in a hierarchy of type TargetPerEntity, otherwise the relations collection needed to
            join all targets together to fetch all subtypes of this entity and this entity itself</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactoryCore.ForEntityName">
            <summary>
            returns the name of the entity this factory is for, e.g. "EmployeeEntity"
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory.Create">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity"/> instance 
            </summary>
            <returns>the new IEntity instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory.Create(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity"/> instance but uses a special constructor which will set the Fields object of the new
            IEntity instance to the passed in fields object. Implement this method to support multi-type in single table inheritance.
            </summary>
            <param name="fields">Populated IEntityFields object for the new entity to create</param>
            <returns>Fully created and populated (due to the IEntityFields object) IEntity object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory.CreateFields">
            <summary>
            Creates, using the generated EntityFieldsFactory, the IEntityFields object for the entity to create. This method is used
            by internal code to create the fields object to store fetched data. 
            </summary>
            <returns>Empty IEntityFields object.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory.CreateHierarchyFields">
            <summary>
            Creates the hierarchy fields for the entity to which this factory belongs.
            </summary>
            <returns>IEntityFields object with the fields of all the entities in the hierarchy of this entity or the fields of this entity if
            the entity isn't in a hierarchy.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory.GetEntityFactory(System.Object[],System.Collections.Hashtable)">
            <summary>
            This method retrieves, using the InheritanceInfoprovider, the factory for the entity represented by the values passed in.
            </summary>
            <param name="fieldValues">Field values read from the db, to determine which factory to return, based on the field values passed in.</param>
            <param name="entityFieldStartIndexesPerEntity">indexes into values where per entity type their own fields start.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory.CreateEntityCollection">
            <summary>
            Creates a new entity collection for the entity of this factory.
            </summary>
            <returns>ready to use new entity collection, typed.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IPropertyDescriptorFactory">
            <summary>
            interface for the factory which creates different sets of property descriptor sets. Required for complex databinding. 
            Selfservicing specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPropertyDescriptorFactory.GetItemProperties(System.Type)">
            <summary>
            Creates a new propertydescriptorcollection using the specialized methods of the types stored INSIDE the type specified.
            </summary>
            <param name="typeOfCollection">type which contains other types which properties we're interested in.</param>
            <returns>filled propertydescriptorcollection of type inside the type specified.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPropertyDescriptorFactory.GetPropertyDescriptors(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.Type)">
            <summary>
            Constructs the actual property descriptor collection.
            </summary>
            <param name="entityToCheck">entity instance which properties should be included in the collection</param>
            <param name="typeOfEntity">full type of the entity</param>
            <returns>filled in property descriptor collection</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView">
            <summary>
            Interface for TypedView classes. 
            Selfservicing specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.Fill">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query. 
            Will use no sort filter, no select filter, will allow duplicate rows and will not limit the amount of rows returned
            </summary>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query. 
            Will not use a filter, will allow duplicate rows.
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query. 
            Will not use a filter.
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query, using the specified filter
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="selectFilter">Predicate expression to filter on the rows inserted in this TypedView object.</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query, using the specified filter
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="selectFilter">Predicate expression to filter on the rows inserted in this TypedView object.</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is
            used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query, using the specified filter
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="selectFilter">Predicate expression to filter on the rows inserted in this TypedView object.</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is
            used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on.</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query, using the specified filter
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="selectFilter">Predicate expression to filter on the rows inserted in this TypedView object.</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is
            used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on.</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to a value smaller than 2, no paging logic is applied</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.GetDbCount">
            <summary>
            Gets the amount of rows in the database for this typed view, not skipping duplicates
            </summary>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.GetDbCount(System.Boolean)">
            <summary>
            Gets the amount of rows in the database for this typed view.
            </summary>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.GetDbCount(System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Gets the amount of rows in the database for this typed view.
            </summary>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="filter">The filter to apply for the count retrieval</param>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.GetDbCount(System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection)">
            <summary>
            Gets the amount of rows in the database for this typed view.
            </summary>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="filter">The filter to apply for the count retrieval</param>
            <param name="groupByClause">group by clause to embed in the query</param>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView.Count">
            <summary>
            Returns the amount of rows in this typed view.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp">
            <summary>
            Interface for TypedList classes. ITypedList is already defined in .NET, that's why it is suffixed with Lgp.
            Selfservicing specific.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListCore">
            <summary>
            Interface base definition for TypedList classes
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListCore.Count">
            <summary>
            Returns the amount of rows in this typed list.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListCore.ObeyWeakRelations">
            <summary>
            Gets / sets ObeyWeakRelations, which is the flag to signal the collection what kind of join statements to generate in the
            query statement. Weak relationships are relationships which are optional, for example a
            customer with no orders is possible, because the relationship between customer and order is based on a field in order.
            When this property is set to true (default: false), weak relationships will result in LEFT JOIN statements. When
            set to false (which is the default), INNER JOIN statements are used.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.Fill">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query. 
            Will use no sort filter, no select filter, will allow duplicate rows and will not limit the amount of rows returned
            </summary>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query. 
            Will not use a filter, will allow duplicate rows.
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query. 
            Will not use a filter.
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query, using the specified filter
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="selectFilter">Predicate which is used to filter the rows to insert in this Typed List instance</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query, using the specified filter
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="selectFilter">Predicate which is used to filter the rows to insert in this Typed List instance</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is
            used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query, using the specified filter
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="selectFilter">Predicate which is used to filter the rows to insert in this Typed List instance</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is
            used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on.</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.Fill(System.Int64,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,SD.LLBLGen.Pro.ORMSupportClasses.IGroupByCollection,System.Int32,System.Int32)">
            <summary>
            Fills itself with data. it builds a dynamic query and loads itself with that query, using the specified filter
            </summary>
            <param name="maxNumberOfItemsToReturn">The maximum amount of rows to return. specifying 0 means all rows are returned</param>
            <param name="sortClauses">The order by specifications for the sorting of the resultset. When null is specified, no sorting is applied.</param>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="selectFilter">Predicate which is used to filter the rows to insert in this Typed List instance</param>
            <param name="transactionToUse">The transaction object to use. Can be null. If specified, the connection object of the transaction is
            used to fill the TypedView, which avoids deadlocks on SqlServer.</param>
            <param name="groupByClause">GroupByCollection with fields to group by on.</param>
            <param name="pageNumber">the page number to retrieve. First page is 1. When set to 0, no paging logic is applied</param>
            <param name="pageSize">the size of the page. When set to a value smaller than 2, no paging logic is applied</param>
            <returns>true if fill succeeded, false otherwise</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.GetDbCount">
            <summary>
            Gets the amount of rows in the database for this typed list, not skipping duplicates
            </summary>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.GetDbCount(System.Boolean)">
            <summary>
            Gets the amount of rows in the database for this typed list.
            </summary>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.GetDbCount(System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Gets the amount of rows in the database for this typed list.
            </summary>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="filter">The filter to apply for the count retrieval</param>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.GetDbCount(System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Gets the amount of rows in the database for this typed list.
            </summary>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="filter">The filter to apply for the count retrieval</param>
            <param name="relations">The relations for the filter to apply</param>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.GetDbCount(System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.GroupByCollection)">
            <summary>
            Gets the amount of rows in the database for this typed list.
            </summary>
            <param name="allowDuplicates">Flag to allow duplicate rows (true) or not (false)</param>
            <param name="filter">The filter to apply for the count retrieval</param>
            <param name="relations">The relations for the filter to apply</param>
            <param name="groupByClause">group by clause to embed in the query</param>
            <returns>the number of rows in the set defined by the passed in query elements</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.BuildResultset">
            <summary>
            Builds the resultset fields.
            </summary>
            <returns>ready to use resultset</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp.BuildRelationSet">
            <summary>
            Builds the relation set for this typed list.
            </summary>
            <returns>ready to use relation set</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2">
            <summary>
            Interface definition for the PrefetchPathElement2 type, which instances are used in a PrefetchPath2 instance.
            Adapter specific
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2.SubPath">
            <summary>
            The subpath containing path elements to retrieve in the ToFetch entity of this PrefetchPathElement. Can be empty.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2.RetrievalCollection">
            <summary>
            The entity collection to fill (and to use to retrieve the entities to fetch). After the fetch, this collection contains
            the entities to merge with the instances of the parent entity. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2.EntityFactoryToUse">
            <summary>
            The factory to use during the fetch of the entities defined by this path element. If this property is not set, the entity factory
            in the RetrievalCollection is used. Use this property to override the default factory, 
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2">
            <summary>
            Interface definition for the PrefetchPath2 type, which specifies a prefetch path to fetch related entities during a fetch.
            Adapter specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="entityFactoryToUse">The entity factory to use to produce the related entities.</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="entityFactoryToUse">The entity factory to use to produce the related entities.</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <param name="entityFactoryToUse">The entity factory to use to produce the related entities.</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <param name="additionalSorter">Additional sort clauses to be added added to the sortexpression already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <param name="additionalSorter">Additional sort clauses to be added added to the sortexpression already in the PrefetchPathElement</param>
            <param name="entityFactoryToUse">The entity factory to use to produce the related entities.</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When elementToAdd is not specifying a fetch meant for an entity of type rootEntityType set in the
            constructor of this class</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Item(System.Int32)">
            <summary>
            Indexer in the prefetch path
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.RootEntityType">
            <summary>
            The EntityType enum value for the entity which is the root type of this path.
            </summary>
            <remarks>Set in the constructor</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPath2.Count">
            <summary>
            Returns the amount of PrefetchPathElement2 in this object
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2">
            <summary>
            Interface for EntityFactory2 objects used by several methods which have to create entity objects on the fly.
            Factories have to add a valid validator object to the entities.
            Adapter specific
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2.Create">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2"/> instance 
            </summary>
            <returns>the new IEntity2 instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2.Create(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFields2)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntity2"/> instance but uses a special constructor which will set the Fields object of the new
            IEntity2 instance to the passed in fields object. Implement this method to support multi-type in single table inheritance.
            </summary>
            <param name="fields">Populated IEntityFields2 object for the new entity2 to create</param>
            <returns>Fully created and populated (due to the IEntityFields2 object) IEntity2 object</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2.CreateFields">
            <summary>
            Creates, using the generated EntityFieldsFactory, the IEntityFields2 object for the entity to create. This method is used
            by internal code to create the fields object to store fetched data. 
            </summary>
            <returns>Empty IEntityFields2 object.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2.CreateHierarchyFields">
            <summary>
            Creates the hierarchy fields for the entity to which this factory belongs.
            </summary>
            <returns>IEntityFields2 object with the fields of all the entities in the hierarchy of this entity or the fields of this entity if
            the entity isn't in a hierarchy.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2.GetEntityFactory(System.Object[],System.Collections.Hashtable)">
            <summary>
            This method retrieves, using the InheritanceInfoprovider, the factory for the entity represented by the values passed in.
            </summary>
            <param name="fieldValues">Field values read from the db, to determine which factory to return, based on the field values passed in.</param>
            <param name="entityFieldStartIndexesPerEntity">indexes into values where per entity type their own fields start.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2.GetEntityTypeFilter(System.Boolean)">
            <summary>Gets a predicateexpression which filters on the entity with type belonging to this factory.</summary>
            <param name="negate">Flag to produce a NOT filter, (true), or a normal filter (false). </param>
            <returns>ready to use predicateexpression, or an empty predicate expression if the belonging entity isn't a hierarchical type.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2">
            <summary>
            Interface for TypedView classes. 
            Adapter specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2.GetFieldsInfo">
            <summary>
            Gets the IEntityFields2 collection of fields of this typed view. Use this method in combination with the FetchTypedView() methods in 
            DataAccessAdapter.
            </summary>
            <returns>Ready to use IEntityFields2 collection object.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ITypedView2.Count">
            <summary>
            Returns the amount of rows in this typed view.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2">
            <summary>
            Interface for TypedList classes. ITypedList is already defined in .NET, that's why it is suffixed with Lgp.
            Adapter specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2.GetFieldsInfo">
            <summary>
            Gets the IEntityFields2 collection of fields of this typed view. Use this method in combination with the FetchTypedView() methods in 
            DataAccessAdapter.
            </summary>
            <returns>Ready to use IEntityFields2 collection object.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypedListLgp2.GetRelationInfo">
            <summary>
            Gets the IRelationPredicateBucket object which contains the relation information for this Typed List. Use this method in combination with the 
            FetchTypedList() methods in DataAccessAdapter.
            </summary>
            <returns>Ready to use IRelationPredicateBucket object.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IRelationFactory">
            <summary>
            Relation factory interface for the Relations objects for each entity. This interface is used by InheritanceInfoProvider objects to produce
            relations which relate to the type/entity specified. 
            </summary>
            <remarks>This interface is only implemented on entities which are in a hierarchy of type TargetPerEntity</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationFactory.GetSubTypeRelation(System.String)">
            <summary>
            Returns the relation object the entity, to which this relation factory belongs, has with the subtype with the specified name
            </summary>
            <param name="subTypeEntityName">name of direct subtype which is a subtype of the current entity through the relation to return.</param>
            <returns>relation which makes the current entity a supertype of the subtype entity with the name specified, or null if not applicable/found</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationFactory.GetSuperTypeRelation">
            <summary>
            Returns the relation object the entity, to which this relation factory belongs, has with its supertype, if applicable.
            </summary>
            <returns>relation which makes the current entity a subtype of its supertype entity or null if not applicable/found</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IConcurrencyPredicateFactory">
            <summary>
            Interface for ConcurrencyPredicateFactory objects which can be provided by the developer to produce at runtime predicate objects which will
            be added to the update query or delete query. The predicate is returned by the IEntity2 method GetConcurrencyPredicate. Especially useful
            in recursive saves.
            </summary>
            <remarks>This interface is changed, due to a design error. One implementation can be used for both template groups.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IConcurrencyPredicateFactory.CreatePredicate(SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType,System.Object)">
            <summary>
            Creates the requested predicate of the type specified
            </summary>
            <param name="predicateTypeToCreate">The type of predicate to create</param>
            <param name="containingEntity">the entity object containing this IConcurrencyPredicateFactory instance.</param>
            <returns>A ready to use predicate to use in the query to execute. Can be null/Nothing, in which case the predicate is ignored</returns>
            <remarks>Use this method instead of the original version, to prevent incomplete instantiation from XML.</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityValidator">
            <summary>
            Interface for implementing an entity validator. The validate method is called prior to a save action or when IEntity(2).Validate is called. 
            It's up to the implementor what happens, it is recommended to throw an ORMEntityValidationException or derived exception from that exception when
            the validation fails, so recursive saved entities which are validated on the fly in the recursion will fail the transaction correctly when the validation
            fails. Recursive saves ignore the return value of the Validate method.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IEntityValidator.Validate(System.Object)">
            <summary>
            Validates the entity passed in.
            </summary>
            <param name="containingEntity">the entity object containing this IEntityValidator instance.</param>
            <returns>true if validation succeeded, false otherwise</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket">
            <summary>
            Interface definition for a bucket class which contains both a predicate expression and a relation collection which are related to each other 
            (the predicate expression works in combination with the relation collection's contents). Used in adapter's context however can also be used
            in other situations, for example custom templates.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket.Relations">
            <summary>
            The relation collection with EntityRelation objects which is used in combination with the PredicateExpression in this bucket
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket.PredicateExpression">
            <summary>
            The predicate expression to use in combination with the Relations in this bucket.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation">
            <summary>
            Interface to define the relation between a parameter of a query and a field. This relation is used to find back a related EntityField
            when an Output Parameter is found in a query so the value of the Output Parameter can be assigned to the related EntityField.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation.Sync">
            <summary>
            Sets the field's value using ForceCurrentValueWrite with the value of the parameter.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation.Field">
            <summary>
            The <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore"/> in the relationship. Only settable via a constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation.Parameter">
            <summary>
            The Parameter in the relationship. Only settable via a constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IParameterFieldRelation.TypeConverterToUse">
            <summary>
            The Typeconverter to use, if applicable.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery">
            <summary>
            Interface for retrieval queries. These queries do return a resultset. Retrieval queries execute Select statements.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery.Execute(System.Data.CommandBehavior)">
            <summary>
            Executes the query contained by the IQuery instance. The connection has to be opened before calling Execute().
            </summary>
            <param name="behavior">The behavior setting to pass to the ExecuteReader method.</param>
            <returns>An open, ready to use IDataReader instance</returns>
            <exception cref="T:System.InvalidOperationException">When there is no command object inside the query object, 
            or no connection object inside the query object or the connection is closed.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery.ExecuteScalar">
            <summary>
            Executes the query contained by the IQuery instance as a scalar query. 
            </summary>
            <returns>the value returned by the scalar execution of the query</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery.RequiresClientSideLimitation">
            <summary>
            Gets / sets the flag which signals fetch code to use client side (i.e. in code) limitation logic and it should not rely on the amount of rows
            returned for row limitations. This flag is set by DQEs if DISTINCT can't be used but row limitations are required and TOP is thus not reliable.
            Default: false.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery.MaxNumberOfItemsToReturnClientSide">
            <summary>
            Used to set the amount of items to return for client side limitations. Only used if <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery.RequiresClientSideLimitation"/> is true.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery.RequiresClientSideDistinctFiltering">
            <summary>
            Flag to tell the object fetcher to use manual distinct filtering, as the DISTINCT command couldn't be applied. Used to tell paging wrappers
            to set RequiresClientSidePaging.  
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery.RequiresClientSidePaging">
            <summary>
            Flag to tell the object fetcher to use manual paging. This is required when DISTINCT is required however due to DISTINCT violating types
            it can't be applied to the query. This then causes duplicates in the resultset, which shouldn't be there and thus causing pages with much
            lesser data. Only set by a DQE, normally false.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery.ManualPageNumber">
            <summary>
            Only valid when RequiresClientSidePaging is set to true. Required to calculate the actual page start.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery.ManualPageSize">
            <summary>
            Only valid when RequiresClientSidePaging is set to true. Required to calculate the actual page start.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression">
            <summary>
            Interface for a PredicateExpression, which is a grouped set of Predicates. A predicate expression is usable as a WHERE clause.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds an IPredicate implementing object to the PredicateExpression. This can be a Predicate derived class or a PredicateExpression. 
            If no object is present yet in the PredicateExpression, no operator is added, otherwise the object is added with an 'And'-operator. 
            </summary>
            <param name="predicateToAdd">The IPredicate implementing object to add</param>
            <exception cref="T:System.ArgumentNullException">When prPredicateToAdd is null</exception>
            <returns>the PredicateExpression on which this method is called, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression.AddWithOr(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds an IPredicate implementing object to the PredicateExpression with an 'Or'-operator. 
            The object added can be a Predicate derived class or a PredicateExpression. If no objects are present yet in the PredicateExpression,
            the operator is ignored. 
            </summary>
            <param name="predicateToAdd">The IPredicate implementing object to add</param>
            <exception cref="T:System.ArgumentNullException">When prPredicateToAdd is null</exception>
            <returns>the PredicateExpression on which this method is called, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression.AddWithAnd(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds an IPredicate implementing object to the PredicateExpression with an 'And'-operator. 
            The object added can be a Predicate derived class or a PredicateExpression. If no objects are present yet in the PredicateExpression,
            the operator is ignored. 
            </summary>
            <param name="predicateToAdd">The IPredicate implementing object to add</param>
            <exception cref="T:System.ArgumentNullException">When prPredicateToAdd is null</exception>
            <returns>the PredicateExpression on which this method is called, for command chaining</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression.Item(System.Int32)">
            <summary>
            Gets the predicate expression element at the index specified
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression.Count">
            <summary>
            Gets the amount of predicate expression elements in this predicate expression. This is including all operators.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ISequenceRetrievalQuery">
            <summary>
            Interface for sequence retrieval queries. Sequence retrieval queries are scalar queries (returning a value) which
            are used to retrieve the actual / to use sequence value in systems which do not support batched queries. Normally
            every DQE will batch the sequence retrieval query into the INSERT query as a batched query, however some systems
            do not support this and the only solution is the SequenceRetrievalQuery. Used for Access, Firebird and other systems.
            SequenceRetrievalQueries can be added to IActionQuery instances and will use the IActionQuery object's connection object.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ISequenceRetrievalQuery.Execute">
            <summary>
            Executes the scalar query contained in this object. (Executed with ExecuteScalar())
            Expects that the command can be executed without problems.
            </summary>
            <remarks>Will store its value in the sequence parameters after execution</remarks>
            <exception cref="T:System.InvalidOperationException">When there is no command object set</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">when an exception was caught during query execution</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISequenceRetrievalQuery.SequenceRetrievalCommand">
            <summary>
            The Scalar command used to retrieve the used/to use sequence value. This command will be executed as a scalar query and depending on
            ExecuteSequenceCommandFirst it will be executed before or after the actual query.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISequenceRetrievalQuery.ExecuteSequenceCommandFirst">
            <summary>
            Flag to signal if SequenceRetrievalCommand has to be executed before (true) or after (false) the 
            actual query in this ActionQuery object. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISequenceRetrievalQuery.SequenceParameters">
            <summary>
            Array list with the parameter objects in the actual query which need the value returned by the execution of the command
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISequenceRetrievalQuery.SetParametersAsOutputParameters">
            <summary>
            Used to make SequenceParameters 'output' parameters. Required for Access. Default: false;
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpressionElement">
            <summary>
            Interface used for the elements which are physically stored in a PredicateExpression.
            Generic
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpressionElement.Type">
            <summary>
            The type of the Element. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpressionElement.Contents">
            <summary>
            The contents of the Element
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ITypeDefaultValue">
            <summary>
            Interface for the class which supplies a default value for a specified .NET type. Necessary for NULL values read from the database.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ITypeDefaultValue.DefaultValue(System.Type)">
            <summary>
            Returns a default value for the type specified
            </summary>
            <param name="defaultValueType">The type which default value should be returned.</param>
            <returns>The default value for the type specified.</returns>
            <remarks>This is the 'slow' version of the routine. Do not use this routine unless you have to. It's slow because it uses reflection to
            determine the type's name.</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ISortClause">
            <summary>
            Interface definition for a class which forms a single sort clause, thus an order by
            definition defined for a single IEntityField or IEntityField - IFieldPersistenceInfo combination
            PersistenceInfo will return the same object when an IEntityField is added to the object.
            Generic
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISortClause.FieldToSort">
            <summary>
            IEntityField to sort on.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISortClause.FieldToSortCore">
            <summary>
            IEntityFieldCore to sort on.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISortClause.PersistenceInfo">
            <summary>
            Persistence information for FieldToSort. Can be a cast of the same object, when an IEntityField is
            added to this sort clause
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISortClause.SortOperatorToUse">
            <summary>
            The sort operator to use for this sort clause
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISortClause.ObjectAlias">
            <summary>
            Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISortClause.CaseSensitiveCollation">
            <summary>
            Gets / sets the CaseSensitiveCollation flag. If set to true, the UPPER() function (or db specific equivalent) is applied to the field in the ORDER BY clause. Default: false
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression">
            <summary>
            Interface for the class which contains the sort clauses used in IRetrievalQuery instances.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression.Add(SD.LLBLGen.Pro.ORMSupportClasses.ISortClause)">
            <summary>
            Adds the passed in sort clause to the list. 
            </summary>
            <param name="sortClauseToAdd">the sort clause to add</param>
            <returns>The index the sort clause was added to</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression.Insert(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortClause)">
            <summary>
            Inserts the passed in sort clause at the index provided.
            </summary>
            <param name="index">Index to insert the sortclause at</param>
            <param name="sortClauseToAdd">the sort clause to insert</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression.Remove(SD.LLBLGen.Pro.ORMSupportClasses.ISortClause)">
            <summary>
            Removes the given sort clause from the list.
            </summary>
            <param name="sortClauseToRemove">the sort clause to remove.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression.Item(System.Int32)">
            <summary>
            Indexer for this list.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression.Count">
            <summary>
            The amount of items currently stored in the ISortExpression
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IValidator">
            <summary>
            Interface for validation classes used by <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore"/> implementing classes.
            Generic
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IValidator.Validate(System.Int32,System.Object)">
            <summary>
            Validates the EntityFieldCore on the given fieldIndex with the given value. 
            This routine is called by the Entity's property value validator after the value has passed validation for destination column type and
            null values.
            </summary>
            <param name="fieldIndex">Index of IEntityFieldCore to validate</param>
            <param name="value">Value which should be stored in field with index fieldIndex. Will not be null (earlier logic filters out nulls before
            a call will be made to this routine).</param>
            <returns>true if the value is valid for the field, false otherwise</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection">
            <summary>
            Interface for the RelationCollection class which is used to stack relation objects between several entities to build
            a complete join path
            Generic
            NB: ToQueryText() has been removed, query text producing logic is moved to the DQE's, since Oracle 8i doesn't support ANSI
            joins.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Adds the passed in IEntityRelation instance to the list. 
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <returns>the added relation in the list, so you can chain commands on 1 line</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the range of IEntityRelation objects stored in c to this collection.
            </summary>
            <param name="c">Collection with IEntityRelation objects to add</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint)">
            <summary>
            Adds the passed in IEntityRelation instance to the list. 
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <param name="hint">Hint to signal the join type for this relation. Overrules obeyWeakRelations, except when the hint is JoinHint.None.</param>
            <returns>the added relation in the list, so you can chain commands on 1 line</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String)">
            <summary>
            Adds the passed in IEntityRelation instance to the list, under the alias specified for the end entity. The start entity gets no alias. 
            The weakness of the relation is considered based on the ObeyWeakRelations setting.
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <param name="aliasRelationEndEntity">the alias for the end entity in the relation (Customer.Relations.OrderUsingCustomerID: 
            Order is end entity). Alias is case sensitive</param>
            <returns>the added relation in the list, so you can chain commands on 1 line</returns>
            <exception cref="T:System.ArgumentException">when aliasRelationEndEntity is an empty string, null or otherwise unusable alias (contains spaces)</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint)">
            <summary>
            Adds the passed in IEntityRelation instance to the list, under the alias specified for the end entity and will consider the relation's weakness 
            based on the hint value. The start entity gets no alias. 
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <param name="aliasRelationEndEntity">the alias for the end entity in the relation (Customer.Relations.OrderUsingCustomerID: 
            Order is end entity). Alias is case sensitive</param>
            <param name="hint">Hint to signal the join type for this relation. Overrules obeyWeakRelations, except when the hint is JoinHint.None.</param>
            <returns>the added relation in the list, so you can chain commands on 1 line</returns>
            <exception cref="T:System.ArgumentException">when aliasRelationEndEntity is an empty string, null or otherwise unusable alias (contains spaces)</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint)">
            <summary>
            Adds the passed in IEntityRelation instance to the list, under the aliases specified and will consider the relation's weakness 
            based on the hint value. The start entity gets no alias. 
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <param name="aliasRelationStartEntity">the alias for the start entity in the relation (Customer.Relations.OrderUsingCustomerID: 
            Customer is start entity). Alias is case sensitive</param>
            <param name="aliasRelationEndEntity">the alias for the end entity in the relation (Customer.Relations.OrderUsingCustomerID: 
            Order is end entity). Alias is case sensitive</param>
            <param name="hint">Hint to signal the join type for this relation. Overrules obeyWeakRelations, except when the hint is JoinHint.None.</param>
            <returns>the added relation in the list, so you can chain commands on 1 line</returns>
            <exception cref="T:System.ArgumentException">when aliasRelationEndEntity or aliasRelationStartEntity are an empty string, null or otherwise unusable 
            alias (contains spaces)</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.Insert(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.Int32)">
            <summary>
            Adds the passed in IEntityRelation instance to the list at position index. 
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <param name="index">Index to add the relation to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.Remove(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Removes the passed in IEntityRelation instance. Only the first instance will be removed.
            </summary>
            <param name="relationToRemove">IEntityRelation instance to remove</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.ToQueryText(System.Int32@)">
            <summary>
            Converts the set of relations to a set of nested JOIN query elements using ANSI join syntaxis. Oracle 8i doesn't support ANSI join syntaxis
            and therefore the OracleDQE has its own join code.
            It uses a database specific creator object for database specific syntaxis, like the format of the tables / views and fields. 
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the custom filter predicates</param>
            <returns>The string representation of the INNER JOIN expressions of the contained relations, when ObeyWeakRelations is set to false (default)
            or the string representation of the LEFT/RIGHT JOIN expressions of the contained relations, when ObeyWeakRelations is set to true</returns>
            <exception cref="T:System.ApplicationException">When the DatabaseSpecificCreator is not set.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.GetUsedEntityTypeNamesAndAliases(SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable@)">
            <summary>
            Gets per alias specified in a relation all entity names covered by that alias. This means that if an entity in a relation is based on multiple entities
            (through inheritance) it will return all entity names the entity is based on, from the actual entity to the root of the hierarchy path and every
            entity name in between.
            </summary>
            <param name="entityNamesPerAlias">Entity names per alias multivaluehashtable: per alias (key) all entity names are stored in a uniquevaluelist.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters, 
            and conversion routines, and field names, including prefix/postfix characters. 
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.Item(System.Int32)">
            <summary>
            Indexer in the collection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.ObeyWeakRelations">
            <summary>
            Gets / sets ObeyWeakRelations, which is the flag to signal the collection what kind of join statements to generate in the
            ToQueryText statement, which is called by the DQE. Weak relationships are relationships which are optional, for example a
            customer with no orders is possible, because the relationship between customer and order is based on a field in order.
            When this property is set to true (default: false), weak relationships will result in LEFT JOIN statements. When
            set to false (which is the default), INNER JOIN statements are used.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection.Count">
            <summary>
            Returns the amount of relations in this object
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificHintCreator">
            <summary>
            Interface for creating hints based on the input specified. Hints are used to tell the RDBMS to produce different SQL. 
            This interface is implemented on those IDatabaseSpecificGenerator implementing classes for which the RDBMS supports hints.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.IDbSpecificHintCreator.CreateHintStatement(SD.LLBLGen.Pro.ORMSupportClasses.RdbmsHint,System.Object[])">
            <summary>
            Creates the hint statement for the hint passed in.
            </summary>
            <param name="hint">Hint specification to create the statement for.</param>
            <param name="values">Additional parameters for the hint statement producer. The values can be very provider specific.</param>
            <returns>the hint statement, ready to use.</returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ParameterFieldRelation">
            <summary>
            Class to define the relation between a parameter of a query and a field. This relation is 
            used to find back a related EntityFieldCore instance when an Output Parameter is found in a query so the value 
            of the Output Parameter can be assigned to the related EntityField
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ParameterFieldRelation.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,System.Data.IDataParameter,System.ComponentModel.TypeConverter)">
            <summary>
            CTor
            </summary>
            <param name="field">The <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore"/> in the relationship.</param>
            <param name="parameter">The Parameter in the relationship.</param>
            <param name="typeConverterToUse">The type converter to use, if applicable (can be null)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ParameterFieldRelation.Sync">
            <summary>
            Sets the field's value using ForceCurrentValueWrite with the value of the parameter.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ParameterFieldRelation.Field">
            <summary>
            The <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore"/> in the relationship. Only settable via a constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ParameterFieldRelation.Parameter">
            <summary>
            The Parameter in the relationship. Only settable via a constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ParameterFieldRelation.TypeConverterToUse">
            <summary>
            The Typeconverter to use, if applicable.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ParameterParameterRelation">
            <summary>
            Class to define a relation between two parameters, one is the source and one is the destination. 
            These relation objects are used in multi-command queries for inserting multi-target entities.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ParameterParameterRelation.#ctor(System.Data.IDataParameter,System.Data.IDataParameter)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ParameterParameterRelation"/> instance.
            </summary>
            <param name="sourceParameter">Source parameter.</param>
            <param name="destionationParameter">Destionation parameter.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ParameterParameterRelation.Sync">
            <summary>
            Syncs the destination parameter's value with the source parameter's value.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ParameterParameterRelation.SourceParameter">
            <summary>
            Gets / sets sourceParameter
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ParameterParameterRelation.DestinationParameter">
            <summary>
            Gets / sets destinationParameter
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression">
            <summary>
            Implementation of the IPredicateExpression interface.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.#ctor">
            <summary>
            CTor. This empty constructor is not recommended when adding this instance directly
            to another PredicateExpression.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            CTor.
            </summary>
            <param name="predicateToAdd">Initial IPredicate implementing object for this PredicateExpression</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionOperator,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            CTor
            </summary>
            <param name="operand1">operand one of the expression</param>
            <param name="predicateExpressionOperator">operator of the expression</param>
            <param name="operand2">operand two of the expression</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds an IPredicate implementing object to the PredicateExpression. This can be a Predicate derived class or a PredicateExpression. 
            If no object is present yet in the PredicateExpression, no operator is added, otherwise the object is added with an 'And'-operator. 
            </summary>
            <param name="predicateToAdd">The IPredicate implementing object to add</param>
            <exception cref="T:System.ArgumentNullException">When prPredicateToAdd is null</exception>
            <returns>the PredicateExpression on which this method is called, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.AddWithOr(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds an IPredicate implementing object to the PredicateExpression with an 'Or'-operator. 
            The object added can be a Predicate derived class or a PredicateExpression. If no objects are present yet in the PredicateExpression,
            the operator is ignored. 
            </summary>
            <param name="predicateToAdd">The IPredicate implementing object to add</param>
            <exception cref="T:System.ArgumentNullException">When predicateToAdd is null</exception>
            <returns>the PredicateExpression on which this method is called, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.AddWithAnd(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds an IPredicate implementing object to the PredicateExpression with an 'And'-operator. 
            The object added can be a Predicate derived class or a PredicateExpression. If no objects are present yet in the PredicateExpression,
            the operator is ignored. 
            </summary>
            <param name="predicateToAdd">The IPredicate implementing object to add</param>
            <exception cref="T:System.ArgumentNullException">When predicateToAdd is null</exception>
            <returns>the PredicateExpression on which this method is called, for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.ToQueryText(System.Int32@)">
            <summary>
            Implements the IPredicate ToQueryText method. Retrieves a ready to use text representation of the contained PredicateExpression.
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <returns>The contained Predicate in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.ToQueryText(System.Int32@,System.Boolean)">
            <summary>
            Retrieves a ready to use text representation of the contained Predicate. 
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the predicate and also in the predicate expression(s) containing the predicate.</param>
            <param name="inHavingClause">if set to true, it will allow aggregate functions to be applied to fields.</param>
            <returns>The contained Predicate in textual format.</returns>
            <exception cref="T:System.ApplicationException">When IPredicate.DatabaseSpecificCreator is not set to a valid value.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/>
            that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.GetEnumerator(System.Int32,System.Int32)">
            <summary>
            Gets the enumerator.
            </summary>
            <param name="index">Index.</param>
            <param name="count">Count.</param>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.Import(SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Imports the specified expression's elements into this expression, by appending the elements to the current contents. 
            </summary>
            <param name="expression">Expression.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.Item(System.Int32)">
            <summary>
            Gets the predicate expression element at the index specified
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpression.Count">
            <summary>
            Gets the amount of predicate expression elements in this predicate expression. This is including all operators.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionElement">
            <summary>
            Implementation of the IPredicateExpressionElement interface
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionElement.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionElementType,System.Object)">
            <summary>
            CTor
            </summary>
            <param name="elementType">The type of the Element. </param>
            <param name="contents">The contents of the Element</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionElement.Type">
            <summary>
            The type of the Element. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PredicateExpressionElement.Contents">
            <summary>
            The contents of the Element
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath">
            <summary>
            PrefetchPath class, which specifies a prefetch path to fetch related entities during a fetch.
            SelfServicing specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.#ctor(System.Int32)">
            <summary>
            CTor
            </summary>
            <param name="rootEntityType">the entity type enum value for the entity this path is for.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,System.Int32)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <param name="additionalSorter">Additional sort clauses to be added added to the sortexpression already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When the elementToAdd is a node definition which is already added to this path.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.Item(System.Int32)">
            <summary>
            Indexer in the prefetch path
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath.RootEntityType">
            <summary>
            The EntityType enum value for the entity which is the root type of this path.
            </summary>
            <remarks>Set in the constructor</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2">
            <summary>
            PrefetchPath class, which specifies a prefetch path to fetch related entities during a fetch.
            Adapter specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.#ctor(System.Int32)">
            <summary>
            CTor
            </summary>
            <param name="rootEntityType">the entity type enum value for the entity this path is for.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="entityFactoryToUse">The entity factory to use to produce the related entities.</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="entityFactoryToUse">The entity factory to use to produce the related entities.</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <param name="entityFactoryToUse">The entity factory to use to produce the related entities.</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <param name="additionalSorter">Additional sort clauses to be added added to the sortexpression already in the PrefetchPathElement</param>
            <returns>the element added, so chaining of commands is possible</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Add(SD.LLBLGen.Pro.ORMSupportClasses.IPrefetchPathElement2,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2)">
            <summary>
            Adds the specified element to the path.
            </summary>
            <param name="elementToAdd">The PrefetchPathElement to add</param>
            <param name="maxAmountOfItemsToReturn">Maximum amount of items to fetch of the set of entities specified by the element.</param>
            <param name="additionalFilter">Additional predicate expression to be added to the filter already in the PrefetchPathElement</param>
            <param name="additionalFilterRelations">Additional relations to be added to the relationcollection already in the PrefetchPathElement</param>
            <param name="additionalSorter">Additional sort clauses to be added added to the sortexpression already in the PrefetchPathElement</param>
            <param name="entityFactoryToUse">The entity factory to use to produce the related entities.</param>
            <returns>the element added, so chaining of commands is possible</returns>
            <exception cref="T:System.ArgumentException">When the elementToAdd is a node definition which is already added to this path.</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.Item(System.Int32)">
            <summary>
            Indexer in the prefetch path
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPath2.RootEntityType">
            <summary>
            The EntityType enum value for the entity which is the root type of this path.
            </summary>
            <remarks>Set in the constructor</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement">
            <summary>
            PrefetchPathElement class. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.Int32,System.Int32,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,System.String,SD.LLBLGen.Pro.ORMSupportClasses.RelationType)">
            <summary>
            CTor. Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement"/> instance.
            </summary>
            <param name="retrievalCollection">Retrieval collection.</param>
            <param name="relation">Relation.</param>
            <param name="destinationEntityType">Destination entity type.</param>
            <param name="toFetchEntityType">To fetch entity type.</param>
            <param name="maxAmountOfItemsToReturn">Max amount of items to return.</param>
            <param name="sorter">Sorter.</param>
            <param name="filter">Filter.</param>
            <param name="filterRelations">Filter relations.</param>
            <param name="propertyName">Name of the property the entities fetched by the definition of this path element are stored.</param>
            <param name="typeOfRelation">The type of relation between the entity to fetch and the entity which will hold the entity to fetch</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.Equals(System.Object)">
            <summary>
            Compares the object passed in. Performs a compare on Property name, destination entity type and tofetch entity type
            </summary>
            <param name="obj">Obj.</param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.SubPath">
            <summary>
            The subpath containing path elements to retrieve in the ToFetch entity of this PrefetchPathElement. Can be empty.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.RetrievalCollection">
            <summary>
            The entity collection to fill (and to use to retrieve the entities to fetch). After the fetch, this collection contains
            the entities to merge with the instances of the parent entity. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.Relation">
            <summary>
            The relation between the destination (parent) entity and the entity to fetch with this path element
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.DestinationEntityType">
            <summary>
            The EntityType enum value for the entity the entities to fetch are to be stored in. 
            </summary>
            <remarks>Set in the constructor</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.ToFetchEntityType">
            <summary>
            The EntityType enum value for the entity to fetch defined by this path element.
            </summary>
            <remarks>Set in the constructor</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.MaxAmountOfItemsToReturn">
            <summary>
            The maximum amount of entities to set per destination instance.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.Sorter">
            <summary>
            The sort expression to sort the entities per destination instance. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.Filter">
            <summary>
            The filter predicate expression to fetch the ToFetch entities. Initially this is set in the constructor.
            Add additional predicates to this predicate expression.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.FilterRelations">
            <summary>
            The relations to use in the filters. Initially this is an empty collection, as the fetches use subqueries. 
            Add additional relations to this relation collection to have multi-entity filters.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.PropertyName">
            <summary>
            The name of the property which is the destination for the entities fetched by the definition of this path element.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement.TypeOfRelation">
            <summary>
            The type of relation between the entity to fetch and the entity which will hold the entity to fetch
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2">
            <summary>
            PrefetchPathElement2 class. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.Int32,System.Int32,System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortExpression,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityFactory2,System.String,SD.LLBLGen.Pro.ORMSupportClasses.RelationType)">
            <summary>
            CTor. Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement"/> instance.
            </summary>
            <param name="retrievalCollection">Retrieval collection.</param>
            <param name="relation">Relation.</param>
            <param name="destinationEntityType">Destination entity type.</param>
            <param name="toFetchEntityType">To fetch entity type.</param>
            <param name="maxAmountOfItemsToReturn">Max amount of items to return.</param>
            <param name="sorter">Sorter.</param>
            <param name="filter">Filter.</param>
            <param name="filterRelations">Filter relations.</param>
            <param name="entityFactoryToUse"></param>
            <param name="propertyName">Name of the property the entities fetched by the definition of this path element are stored.</param>
            <param name="typeOfRelation">The type of relation between the entity to fetch and the entity which will hold the entity to fetch</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.Equals(System.Object)">
            <summary>
            Compares the object passed in. Performs a compare on Property name, destination entity type and tofetch entity type
            </summary>
            <param name="obj">Obj.</param>
            <returns></returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.SubPath">
            <summary>
            The subpath containing path elements to retrieve in the ToFetch entity of this PrefetchPathElement. Can be empty.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.RetrievalCollection">
            <summary>
            The entity collection to fill (and to use to retrieve the entities to fetch). After the fetch, this collection contains
            the entities to merge with the instances of the parent entity. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.Relation">
            <summary>
            The relation between the destination (parent) entity and the entity to fetch with this path element
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.DestinationEntityType">
            <summary>
            The EntityType enum value for the entity the entities to fetch are to be stored in. 
            </summary>
            <remarks>Set in the constructor</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.ToFetchEntityType">
            <summary>
            The EntityType enum value for the entity to fetch defined by this path element.
            </summary>
            <remarks>Set in the constructor</remarks>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.MaxAmountOfItemsToReturn">
            <summary>
            The maximum amount of entities to set per destination instance.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.Sorter">
            <summary>
            The sort expression to sort the entities per destination instance. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.Filter">
            <summary>
            The filter predicate expression to fetch the ToFetch entities. Initially this is set in the constructor.
            Add additional predicates to this predicate expression.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.FilterRelations">
            <summary>
            The relations to use in the filters. Initially this is an empty collection, as the fetches use subqueries. 
            Add additional relations to this relation collection to have multi-entity filters.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.EntityFactoryToUse">
            <summary>
            The factory to use during the fetch of the entities defined by this path element. If this property is not set, the entity factory
            in the RetrievalCollection is used. Use this property to override the default factory, 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.PropertyName">
            <summary>
            The name of the property which is the destination for the entities fetched by the definition of this path element.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.PrefetchPathElement2.TypeOfRelation">
            <summary>
            The type of relation between the entity to fetch and the entity which will hold the entity to fetch
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection">
            <summary>
            Class which is used to stack relation objects between several entities to build a complete join path
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Adds the passed in IEntityRelation instance to the list. 
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <returns>the added relation in the list, so you can chain commands on 1 line</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint)">
            <summary>
            Adds the passed in IEntityRelation instance to the list. 
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <param name="hint">Hint to signal the join type for this relation. Overrules obeyWeakRelations, except when the hint is JoinHint.None.</param>
            <returns>the added relation in the list, so you can chain commands on 1 line</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String)">
            <summary>
            Adds the passed in IEntityRelation instance to the list, under the alias specified for the end entity. The start entity gets no alias. 
            The weakness of the relation is considered based on the ObeyWeakRelations setting.
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <param name="aliasRelationEndEntity">the alias for the end entity in the relation (Customer.Relations.OrderUsingCustomerID: 
            Order is end entity). Alias is case sensitive</param>
            <returns>the added relation in the list, so you can chain commands on 1 line</returns>
            <exception cref="T:System.ArgumentException">when aliasRelationEndEntity is an empty string, null or otherwise unusable alias (contains spaces)</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint)">
            <summary>
            Adds the passed in IEntityRelation instance to the list, under the alias specified for the end entity and will consider the relation's weakness 
            based on the hint value. The start entity gets no alias. 
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <param name="aliasRelationEndEntity">the alias for the end entity in the relation (Customer.Relations.OrderUsingCustomerID: 
            Order is end entity). Alias is case sensitive</param>
            <param name="hint">Hint to signal the join type for this relation. Overrules obeyWeakRelations, except when the hint is JoinHint.None.</param>
            <returns>the added relation in the list, so you can chain commands on 1 line</returns>
            <exception cref="T:System.ArgumentException">when aliasRelationEndEntity is an empty string, null or otherwise unusable alias (contains spaces)</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.Add(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.String,System.String,SD.LLBLGen.Pro.ORMSupportClasses.JoinHint)">
            <summary>
            Adds the passed in IEntityRelation instance to the list, under the aliases specified and will consider the relation's weakness 
            based on the hint value. The start entity gets no alias. 
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <param name="aliasRelationStartEntity">the alias for the start entity in the relation (Customer.Relations.OrderUsingCustomerID: 
            Customer is start entity). Alias is case sensitive</param>
            <param name="aliasRelationEndEntity">the alias for the end entity in the relation (Customer.Relations.OrderUsingCustomerID: 
            Order is end entity). Alias is case sensitive</param>
            <param name="hint">Hint to signal the join type for this relation. Overrules obeyWeakRelations, except when the hint is JoinHint.None.</param>
            <returns>the added relation in the list, so you can chain commands on 1 line</returns>
            <exception cref="T:System.ArgumentException">when aliasRelationEndEntity or aliasRelationStartEntity are an empty string, null or otherwise unusable 
            alias (contains spaces)</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the range of IEntityRelation objects stored in c to this collection.
            </summary>
            <param name="c">Collection with IEntityRelation objects to add</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.Insert(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation,System.Int32)">
            <summary>
            Adds the passed in IEntityRelation instance to the list at position index. 
            </summary>
            <param name="relationToAdd">IEntityRelation instance to add</param>
            <param name="index">Index to add the relation to.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.Remove(SD.LLBLGen.Pro.ORMSupportClasses.IEntityRelation)">
            <summary>
            Removes the passed in IEntityRelation instance. Only the first instance will be removed.
            </summary>
            <param name="relationToRemove">IEntityRelation instance to remove</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.GetUsedEntityTypeNamesAndAliases(SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable@)">
            <summary>
            Gets per alias specified in a relation all entity names covered by that alias. This means that if an entity in a relation is based on multiple entities
            (through inheritance) it will return all entity names the entity is based on, from the actual entity to the root of the hierarchy path and every
            entity name in between.
            </summary>
            <param name="entityNamesPerAlias">Entity names per alias multivaluehashtable: per alias (key) all entity names are stored in a uniquevaluelist.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.ToQueryText(System.Int32@)">
            <summary>
            Converts the set of relations to a set of nested JOIN query elements using ANSI join syntaxis. Oracle 8i doesn't support ANSI join syntaxis
            and therefore the OracleDQE has its own join code.
            It uses a database specific creator object for database specific syntaxis, like the format of the tables / views and fields. 
            </summary>
            <param name="uniqueMarker">int counter which is appended to every parameter. The refcounter is increased by every parameter creation,
            making sure the parameter is unique in the custom filter predicates</param>
            <returns>The string representation of the INNER JOIN expressions of the contained relations, when ObeyWeakRelations is set to false (default)
            or the string representation of the LEFT/RIGHT JOIN expressions of the contained relations, when ObeyWeakRelations is set to true</returns>
            <exception cref="T:System.ApplicationException">When the DatabaseSpecificCreator is not set</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMRelationException">when the relation set contains an error and is badly formed. For example when the relation collection
            contains relations which do not have an entity in common, which can happen when a bad alias is specified</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.PreprocessRelations">
            <summary>
            Preprocesses the relations in this relationcollection
            The start/end entity can have an inheritance info object with them, causing these relations to
            be inserted at that spot, where the additional relations for the start entity are added BEFORE the actual relation and the relations for the
            end entity AFTER the actual relation.
            </summary>
            <returns>the full set of relations to process</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.DatabaseSpecificCreator">
            <summary>
            Object which will be used to create valid parameter objects, field names, including prefix/postfix characters, 
            and conversion routines, and field names, including prefix/postfix characters. 
            Uses the strategy pattern so the generic code can work with more than one target database.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.Item(System.Int32)">
            <summary>
            Indexer in the collection.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.ObeyWeakRelations">
            <summary>
            Gets / sets ObeyWeakRelations, which is the flag to signal the collection what kind of join statements to generate in the
            ToQueryText statement, which is called by the DQE. Weak relationships are relationships which are optional, for example a
            customer with no orders is possible, because the relationship between customer and order is based on a field in order.
            When this property is set to true (default: false), weak relationships will result in LEFT JOIN statements. When
            set to false (which is the default), INNER JOIN statements are used.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RelationCollection.CustomFilterParameters">
            <summary>
            Gets Custom Filter Parameters, created in ToQueryText and which are used in custom filters.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.RelationPredicateBucket">
            <summary>
            IRelationPredicateBucket implementation which can be used as a single unit to pass to a data-access adapter for 
            filtering over multi-entities.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationPredicateBucket.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RelationPredicateBucket.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.RelationPredicateBucket"/> class.
            </summary>
            <param name="filterToUse">Filter to use. Will be set as the initial PredicateExpression contents</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RelationPredicateBucket.Relations">
            <summary>
            The relation collection with EntityRelation objects which is used in combination with the PredicateExpression in this bucket
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RelationPredicateBucket.PredicateExpression">
            <summary>
            The predicate expression to use in combination with the Relations in this bucket.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery">
            <summary>
            Implementation of the RetrievalQuery class. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.#ctor(System.Data.IDbCommand)">
            <summary>
            CTor
            </summary>
            <param name="commandToUse">Command to use</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.#ctor(System.Data.IDbConnection,System.Data.IDbCommand)">
            <summary>
            CTor
            </summary>
            <param name="connectionToUse">Connection object to use</param>
            <param name="commandToUse">Command to use</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.Execute(System.Data.CommandBehavior)">
            <summary>
            Executes the query contained by the IQuery instance. The connection has to be opened before calling Execute().
            </summary>
            <param name="behavior">The behavior setting to pass to the ExecuteReader method.</param>
            <returns>An open, ready to use IDataReader instance</returns>
            <exception cref="T:System.InvalidOperationException">When there is no command object inside the query object, 
            or no connection object inside the query object or the connection is closed.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.ExecuteScalar">
            <summary>
            Executes the query contained by the IQuery instance as a scalar query. 
            </summary>
            <returns>the value returned by the scalar execution of the query</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.RequiresClientSideLimitation">
            <summary>
            Gets / sets the flag which signals fetch code to use client side (i.e. in code) limitation logic and it should not rely on the amount of rows
            returned for row limitations. This flag is set by DQEs if DISTINCT can't be used but row limitations are required and TOP is thus not reliable.
            Default: false.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.MaxNumberOfItemsToReturnClientSide">
            <summary>
            Used to set the amount of items to return for client side limitations. Only used if <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.RequiresClientSideLimitation"/> is true.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.RequiresClientSidePaging">
            <summary>
            Flag to tell the object fetcher to use manual paging. This is required when DISTINCT is required however due to DISTINCT violating types
            it can't be applied to the query. This then causes duplicates in the resultset, which shouldn't be there and thus causing pages with much
            lesser data. Only set by a DQE, normally false.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.ManualPageNumber">
            <summary>
            Only valid when RequiresClientSidePaging is set to true. Required to calculate the actual page start.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.ManualPageSize">
            <summary>
            Only valid when RequiresClientSidePaging is set to true. Required to calculate the actual page start.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.RetrievalQuery.RequiresClientSideDistinctFiltering">
            <summary>
            Flag to tell the object fetcher to use manual distinct filtering, as the DISTINCT command couldn't be applied. Used to tell paging wrappers
            to set RequiresClientSidePaging.  
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery">
            <summary>
            Class for sequence retrieval queries. Sequence retrieval queries are scalar queries (returning a value) which
            are used to retrieve the actual / to use sequence value in systems which do not support batched queries. Normally
            every DQE will batch the sequence retrieval query into the INSERT query as a batched query, however some systems
            do not support this and the only solution is the SequenceRetrievalQuery. Used for Access, Firebird and other systems.
            SequenceRetrievalQueries can be added to IActionQuery instances and will use the IActionQuery object's connection object.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery.ToString">
            <summary>
            ToString representation of Sequence query, used in Trace logs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery.Execute">
            <summary>
            Executes the scalar query contained in this object. (Executed with ExecuteScalar())
            Expects that the command can be executed without problems.
            </summary>
            <remarks>Will store its value in the sequence parameters after execution</remarks>
            <exception cref="T:System.InvalidOperationException">When there is no command object set</exception>
            <exception cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ORMQueryExecutionException">when an exception was caught during query execution</exception>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery.SequenceRetrievalCommand">
            <summary>
            The Scalar command used to retrieve the used/to use sequence value. This command will be executed as a scalar query and depending on
            ExecuteSequenceCommandFirst it will be executed before or after the actual query.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery.ExecuteSequenceCommandFirst">
            <summary>
            Flag to signal if SequenceRetrievalCommand has to be executed before (true) or after (false) the 
            actual query in this ActionQuery object. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery.SequenceParameters">
            <summary>
            Array list with the parameter objects in the actual query which need the value returned by the execution of the command
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SequenceRetrievalQuery.SetParametersAsOutputParameters">
            <summary>
            Used to make SequenceParameters 'output' parameters. Required for Access. Default: false;
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SortClause">
            <summary>
            Class which implements ISortClause, a class which forms a single sort clause, thus an order by
            definition defined for a single IEntityField.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SortOperator)">
            <summary>
            CTor
            </summary>
            <param name="fieldToSort">IEntityField to sort on</param>
            <param name="sortOperatorToUse">the sort operator to use for this sort clause</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityField,SD.LLBLGen.Pro.ORMSupportClasses.SortOperator,System.String)">
            <summary>
            CTor
            </summary>
            <param name="fieldToSort">IEntityField to sort on</param>
            <param name="sortOperatorToUse">the sort operator to use for this sort clause</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SortOperator)">
            <summary>
            CTor
            </summary>
            <param name="fieldToSort">IEntityFieldCore to sort on</param>
            <param name="persistenceInfo">Persistence info of fieldToSort</param>
            <param name="sortOperatorToUse">the sort operator to use for this sort clause</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo,SD.LLBLGen.Pro.ORMSupportClasses.SortOperator,System.String)">
            <summary>
            CTor
            </summary>
            <param name="fieldToSort">IEntityFieldCore to sort on</param>
            <param name="persistenceInfo">Persistence info of fieldToSort</param>
            <param name="sortOperatorToUse">the sort operator to use for this sort clause</param>
            <param name="objectAlias">Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used). In that case, use another overload.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.SetCaseSensitiveCollation(System.Boolean)">
            <summary>
            Sets the case sensitive collation flag and returns the sortclause instance for further command chaining
            </summary>
            <param name="value">new value for teh CaseSensitiveCollation flag.</param>
            <returns>this instance for command chaining</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.op_BitwiseAnd(SD.LLBLGen.Pro.ORMSupportClasses.SortClause,SD.LLBLGen.Pro.ORMSupportClasses.SortClause)">
            <summary>
            Operator overload for the '&amp;' operator to concatenate sortclauses into a sortexpression
            </summary>
            <param name="leftOperand">left operand</param>
            <param name="rightOperand">right operand</param>
            <returns>new sortexpression object with first the leftoperand and then the rightoperand</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.op_BitwiseAnd(SD.LLBLGen.Pro.ORMSupportClasses.SortExpression,SD.LLBLGen.Pro.ORMSupportClasses.SortClause)">
            <summary>
            Operator overload for the '&amp;' operator to concatenate sortclauses into a sortexpression
            </summary>
            <param name="leftOperand">left operand</param>
            <param name="rightOperand">right operand</param>
            <returns>the left operand to which the right operand is added</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.FieldToSort">
            <summary>
            IEntityField to sort on. Will be null if this object is constructed using a non-selfservicing constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.FieldToSortCore">
            <summary>
            IEntityFieldCore to sort on.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.PersistenceInfo">
            <summary>
            Persistence information for FieldToSort. Can be a cast of the same object, when an IEntityField is
            added to this sort clause
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.SortOperatorToUse">
            <summary>
            The sort operator to use for this sort clause
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.ObjectAlias">
            <summary>
            Alias for the object the field belongs to. Used to identify which entity to use when the entity
            is present multiple times in a relation collection. Alias has to match an alias specified in the relation collection or should be
            left empty if no alias is specified (or no relation collection is used).
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SortClause.CaseSensitiveCollation">
            <summary>
            Gets / sets caseSensitiveCollation flag. If set to true, the UPPER() function (or db specific equivalent) is applied to the field. Default: false
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SortExpression">
            <summary>
            Implementation of the ISortExpression interface. This class contains the 
            sort clauses used in IRetrievalQuery instances.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortExpression.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortExpression.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.ISortClause)">
            <summary>
            CTor which initially adds the passed in sort clause. This is an accelerator constructor to 
            make code more compact.
            </summary>
            <param name="sortClauseToAdd">Sort clause to add.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortExpression.Add(SD.LLBLGen.Pro.ORMSupportClasses.ISortClause)">
            <summary>
            Adds the passed in sort clause to the list. 
            </summary>
            <param name="sortClauseToAdd">the sort clause to add</param>
            <returns>The index the sort clause was added to</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortExpression.Insert(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.ISortClause)">
            <summary>
            Inserts the passed in sort clause at the index provided.
            </summary>
            <param name="index">Index to insert the sortclause at</param>
            <param name="sortClauseToAdd">the sort clause to insert</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SortExpression.Remove(SD.LLBLGen.Pro.ORMSupportClasses.ISortClause)">
            <summary>
            Removes the given sort clause from the list.
            </summary>
            <param name="sortClauseToRemove">the sort clause to remove.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SortExpression.Item(System.Int32)">
            <summary>
            Indexer for this list.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper">
            <summary>
            Container class for the static traceswitch objects used by the tracing logic in the ORMSupportclasses.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.GeneralSwitch">
            <summary>
            General switch which is used by general code in the ORM Support classes.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.StateManagementSwitch">
            <summary>
            Switch which is used by state management code in the ORM Support classes.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.PersistenceExecutionSwitch">
            <summary>
            Switch which is used by entity / other data persistence logic execution code in the ORM Support classes
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.#ctor">
            <summary>
            No instances allowed
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.#cctor">
            <summary>
            Static constructor. Is called by the CLR right before the first trace is made. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.WriteLineIf(System.Boolean,System.Object)">
            <summary>
            Writes the value with no category specified to the trace output with a newline, if condition is true.
            </summary>
            <param name="condition">Condition to test if the value has to be written (true) or not (false)</param>
            <param name="value">Value to write to the trace output</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.WriteLineIf(System.Boolean,System.String)">
            <summary>
            Writes the message with no category specified to the trace output with a newline, if condition is true.
            </summary>
            <param name="condition">Condition to test if the message has to be written (true) or not (false)</param>
            <param name="message">Message to write to the trace output</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.WriteLineIf(System.Boolean,System.Object,System.String)">
            <summary>
            Writes the value with the remark of the category specified to the trace output with a newline, if condition is true.
            </summary>
            <param name="condition">Condition to test if the value has to be written (true) or not (false)</param>
            <param name="value">Value to write to the trace output</param>
            <param name="category">Category to specify with the value</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.WriteLineIf(System.Boolean,System.String,System.String)">
            <summary>
            Writes the message with the remark of the category specified to the trace output with a newline, if condition is true.
            </summary>
            <param name="condition">Condition to test if the message has to be written (true) or not (false)</param>
            <param name="message">Message to write to the trace output</param>
            <param name="category">Category to specify with the message</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.WriteIf(System.Boolean,System.Object)">
            <summary>
            Writes the value with no category specified to the trace output, if condition is true.
            </summary>
            <param name="condition">Condition to test if the value has to be written (true) or not (false)</param>
            <param name="value">Value to write to the trace output</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.WriteIf(System.Boolean,System.String)">
            <summary>
            Writes the message with no category specified to the trace output, if condition is true.
            </summary>
            <param name="condition">Condition to test if the message has to be written (true) or not (false)</param>
            <param name="message">Message to write to the trace output</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.WriteIf(System.Boolean,System.Object,System.String)">
            <summary>
            Writes the value with the remark of the category specified to the trace output, if condition is true.
            </summary>
            <param name="condition">Condition to test if the value has to be written (true) or not (false)</param>
            <param name="value">Value to write to the trace output</param>
            <param name="category">Category to specify with the value</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TraceHelper.WriteIf(System.Boolean,System.String,System.String)">
            <summary>
            Writes the message with the remark of the category specified to the trace output, if condition is true.
            </summary>
            <param name="condition">Condition to test if the message has to be written (true) or not (false)</param>
            <param name="message">Message to write to the trace output</param>
            <param name="category">Category to specify with the message</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase">
            <summary>
            Abstract transaction class which is used to control a serie of actions on multiple entities or entity collection classes.
            The database connection is opened in the constructor, so the transaction instance is ready to use.
            This class is the non-COM+ version, it will always start a new ADO.NET transaction and will not be using a COM+ 
            transaction when callers are participating in such a transaction.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.#ctor(System.Data.IsolationLevel,System.String)">
            <summary>
            CTor. Will read the connection string from an external source.
            </summary>
            <param name="transactionIsolationLevel">IsolationLevel to use in the transaction</param>
            <param name="name">The name of the transaction to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.#ctor(System.Data.IsolationLevel,System.String,System.String)">
            <summary>
            CTor. 
            </summary>
            <param name="transactionIsolationLevel">IsolationLevel to use in the transaction</param>
            <param name="name">The name of the transaction to use.</param>
            <param name="connectionString">Connection string to use in this transaction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Commit">
            <summary>
            Commits the transaction in action. It will end all database activity, since commiting a transaction is finalizing it. After
            calling Commit or Rollback, the ITransaction implementing class will reset itself. When used in combination of COM+, it will
            call ContextUtil.SetCommit() to commit the current COM+ transaction.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Add(SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement)">
            <summary>
            Adds the passed in object as a participant of this transaction. 
            </summary>
            <param name="participant">The ITransactionalElement implementing object which actions have to be included in this transaction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Remove(SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement)">
            <summary>
            Removes the passed in object from the transaction.
            </summary>
            <param name="participant">The ITransactionalElement implementing object which should be removed from this transaction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Rollback">
            <summary>
            Rolls back the transaction in action. It will end all database activity, since commiting a transaction is finalizing it. After
            calling Commit or Rollback, the ITransaction implementing class will reset itself. When used in combination of COM+, it will
            call ContextUtil.SetAbort() to abort (rollback) the current COM+ transaction.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Dispose">
            <summary>
            Implements the IDispose' method Dispose.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.SaveInRecursionStarted">
            <summary>
            Increases the recursion counter with 1. If the counter reaches 0, the objectID's in the _entitiesInTransaction collection are removed.
            For internal use only.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.SaveInRecursionEnded">
            <summary>
            Decreases the recursion counter with 1. If the counter reaches 0, the objectID's in the _entitiesInTransaction collection are removed.
            For internal use only.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Save(System.String)">
            <summary>
            Creates a savepoint with the name savePointName in the current transaction. You can roll back to this savepoint using
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Rollback(System.String)"/>.
            </summary>
            <param name="savePointName">name of savepoint. Must be unique in an active transaction</param>
            <exception cref="T:System.InvalidOperationException">If no transaction is in progress.</exception>
            <exception cref="T:System.ArgumentException">if savePointName is empty or null or there is already a savepoint defined with the name specified</exception>
            <exception cref="T:System.NotSupportedException">if the .NET database provider doesn't support transaction saving or when COM+ is used.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Rollback(System.String)">
            <summary>
            Rolls back the transaction in action to the savepoint with the name savepointName. No internal objects are being reset when this method is called,
            so call this Rollback overload only to roll back to a savepoint. To roll back a complete transaction, call Rollback() without specifying a savepoint
            name. Create a savepoint by calling Save(savePointName)
            </summary>
            <param name="savePointName">name of the savepoint to roll back to.</param>
            <exception cref="T:System.InvalidOperationException">If no transaction is in progress.</exception>
            <exception cref="T:System.ArgumentException">if savePointName is empty or null or there is no savepoint defined with the name specified</exception>
            <exception cref="T:System.NotSupportedException">if the .NET database provider doesn't support transaction rolling back a transaction to a named
            point or when COM+ is used.</exception>
            <remarks>Not supported when using COM+</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Dispose(System.Boolean)">
            <summary>
            Implements the Dispose functionality.
            </summary>
            <param name="isDisposing">Flag which signals this routine if a dispose action should take place (true) or not (false)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.RemoveElementsFromTransaction(SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.ActionToPerformDuringRemove)">
            <summary>
            Removes all participating elements from this transaction and sends them a commit or rollback signal, based on the passed in boolean Commit.
            This action will make the participating objects to take care of their own connections again.
            </summary>
            <param name="action">Action to perform on each removed element.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Reset">
            <summary>
            Resets the transaction object. All participants will be notified.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.CreateConnection">
            <summary>
            Creates a new IDbConnection instance which will be used by all elements using this ITransaction instance. 
            Reads connectionstring from .config file.
            </summary>
            <returns>new IDbConnection instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.CreateConnection(System.String)">
            <summary>
            Creates a new IDbConnection instance which will be used by all elements using this ITransaction instance
            </summary>
            <param name="connectionString">Connection string to use</param>
            <returns>new IDbConnection instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.CreatePhysicalTransaction">
            <summary>
            Creates a new physical transaction object over the created connection. The connection is assumed to be open.
            </summary>
            <returns>a physical transaction object, like an instance of SqlTransaction.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.TransactionIsolationLevel">
            <summary>
            Gets the isolation level the transaction should use. Only settable with the constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.Name">
            <summary>
            Gets the name of the transaction. Only settable with the constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.ConnectionString">
            <summary>
            Gets the connection string used for the connection with the database. Only settable with the constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.ConnectionToUse">
            <summary>
            The connection object to use with this transaction. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.PhysicalTransaction">
            <summary>
            The physical transaction object used over <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.ConnectionToUse"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.EntitiesInTransaction">
            <summary>
            ArrayList of GUID's of the entities currently participating in this transaction. This collection is
            used to keep track of which entities already have been added during a recursive save.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.ParticipantsInProgress">
            <summary>
            ArrayList of GUID's of the entities currently participating in this transaction which are in progress, i.e. their
            Save() routine has been called but execution is transfered to a dependent object first.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.PostponedParticipantObjectIds">
            <summary>
            Tracking hashtable for postponed participants.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.ActionToPerformDuringRemove">
            <summary>
            Enum which is used to signal the element removal routine what to do while removing hte elements.
            This is a performance issue, now the loop has to be run just once
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.ActionToPerformDuringRemove.None">
            <summary>
            No action
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.ActionToPerformDuringRemove.SendCommit">
            <summary>
            Call ITransactionalElement.TransactionCommit()
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TransactionBase.ActionToPerformDuringRemove.SendRollback">
            <summary>
            Call ITransactionalElement.TransactionRollback()
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase">
            <summary>
            Abstract transaction class which is used to control a serie of actions on multiple entities or entity collection classes.
            The database connection is opened in the constructor so the COM+ transaction is flowing into the creation of the database connection.
            No ADO.NET transaction is started, everything runs in the containing COM+ transaction.
            This class is the COM+ version, it will never start a new ADO.NET transaction and will always be using a COM+ 
            transaction. All actions MUST be explicitly be commited or rolled back (aborted), there is no autocomplete implemented in this
            class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.#ctor">
            <summary>
            CTor. Will read the connection string from an external source.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.#ctor(System.String)">
            <summary>
            CTor. 
            </summary>
            <param name="connectionString">Connection string to use in this transaction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.Commit">
            <summary>
            Commits the transaction in action. It will end all database activity, since commiting a transaction is finalizing it. After
            calling Commit or Rollback, the ITransaction implementing class will reset itself. When used in combination of COM+, it will
            call ContextUtil.SetComplete() to commit the current COM+ transaction.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.Add(SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement)">
            <summary>
            Adds the passed in object as a participant of this transaction. 
            </summary>
            <param name="participant">The ITransactionalElement implementing object which actions have to be included in this transaction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.Remove(SD.LLBLGen.Pro.ORMSupportClasses.ITransactionalElement)">
            <summary>
            Removes the passed in object from the transaction.
            </summary>
            <param name="participant">The ITransactionalElement implementing object which should be removed from this transaction</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.Rollback">
            <summary>
            Rolls back the transaction in action. It will end all database activity, since commiting a transaction is finalizing it. After
            calling Commit or Rollback, the ITransaction implementing class will reset itself. When used in combination of COM+, it will
            call ContextUtil.SetAbort() to abort (rollback) the current COM+ transaction.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.SaveInRecursionStarted">
            <summary>
            Increases the recursion counter with 1. If the counter reaches 0, the objectID's in the _entitiesInTransaction collection are removed.
            For internal use only.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.SaveInRecursionEnded">
            <summary>
            Decreases the recursion counter with 1. If the counter reaches 0, the objectID's in the _entitiesInTransaction collection are removed.
            For internal use only.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.Save(System.String)">
            <summary>
            Creates a savepoint with the name savePointName in the current transaction. You can roll back to this savepoint using
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.Rollback(System.String)"/>.
            </summary>
            <param name="savePointName">name of savepoint. Must be unique in an active transaction</param>
            <exception cref="T:System.InvalidOperationException">If no transaction is in progress.</exception>
            <exception cref="T:System.ArgumentException">if savePointName is empty or null</exception>
            <remarks>Not supported in COM+. Throws NotSupportedException.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.Rollback(System.String)">
            <summary>
            Rolls back the transaction in action to the savepoint with the name savepointName. No internal objects are being reset when this method is called,
            so call this Rollback overload only to roll back to a savepoint. To roll back a complete transaction, call Rollback() without specifying a savepoint
            name. Create a savepoint by calling Save(savePointName)
            </summary>
            <param name="savePointName">name of the savepoint to roll back to.</param>
            <remarks>Not supported in COM+. Throws NotSupportedException.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.Dispose(System.Boolean)">
            <summary>
            Implements the Dispose functionality.
            </summary>
            <param name="isDisposing">Flag which signals this routine if a dispose action should take place (true) or not (false)</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.RemoveElementsFromTransaction(SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.ActionToPerformDuringRemove)">
            <summary>
            Removes all participating elements from this transaction and sends them a commit or rollback signal, based on the passed in boolean Commit.
            This action will make the participating objects to take care of their own connections again.
            </summary>
            <param name="action">Action to perform on each removed element.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.Reset">
            <summary>
            Resets the transaction object. All participants will be notified.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.CreateConnection">
            <summary>
            Creates a new IDbConnection instance which will be used by all elements using this ITransaction instance. 
            Reads connectionstring from .config file.
            </summary>
            <returns>new IDbConnection instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.CreateConnection(System.String)">
            <summary>
            Creates a new IDbConnection instance which will be used by all elements using this ITransaction instance
            </summary>
            <param name="connectionString">Connection string to use</param>
            <returns>new IDbConnection instance</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.CreatePhysicalTransaction">
            <summary>
            Creates a new physical transaction object over the created connection. The connection is assumed to be open.
            </summary>
            <returns>a physical transaction object, like an instance of SqlTransaction.</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.TransactionIsolationLevel">
            <summary>
            Gets the isolation level the transaction should use. Only settable with the constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.Name">
            <summary>
            Gets the name of the transaction. Only settable with the constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.ConnectionString">
            <summary>
            Gets the connection string used for the connection with the database. Only settable with the constructor.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.ConnectionToUse">
            <summary>
            The connection object to use with this transaction. 
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.PhysicalTransaction">
            <summary>
            The physical transaction object used over <see cref="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.ConnectionToUse"/>.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.EntitiesInTransaction">
            <summary>
            ArrayList of GUID's of the entities currently participating in this transaction. This collection is
            used to keep track of which entities already have been added during a recursive save.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.ParticipantsInProgress">
            <summary>
            ArrayList of GUID's of the entities currently participating in this transaction which are in progress, i.e. their
            Save() routine has been called but execution is transfered to a dependent object first.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.ActionToPerformDuringRemove">
            <summary>
            Enum which is used to signal the element removal routine what to do while removing the elements.
            This is a performance issue, now the loop has to be run just once
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.ActionToPerformDuringRemove.None">
            <summary>
            No action
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.ActionToPerformDuringRemove.SendCommit">
            <summary>
            Call ITransactionalElement.TransactionCommit()
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TransactionComPlusBase.ActionToPerformDuringRemove.SendRollback">
            <summary>
            Call ITransactionalElement.TransactionRollback()
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase">
            <summary>
            Abstract base class for Typed Lists. This class is a thin wrapper around the DataTable to make sure
            the member variable obeyWeakRelations is serialized: in VB.NET it's not possible to program
            this construct, because in VB.NET you can't re-implement an interface. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase.#ctor">
            <summary>
            Empty CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase.#ctor(System.String)">
            <summary>
            CTor
            </summary>
            <param name="tableName">name for the datatable</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for deserialization.
            Idea borrowed from Dino Esposito's article: http://msdn.microsoft.com/msdnmag/issues/02/12/CuttingEdge/default.aspx
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable member. Does custom serialization so members also get serialized (obeyWeakRelationships).
            Serializes members of this entity class and uses the base class' implementation to serialize the rest.
            Idea borrowed from Dino Esposito's article: http://msdn.microsoft.com/msdnmag/issues/02/12/CuttingEdge/default.aspx
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase.Count">
            <summary>
            Returns the amount of rows in this typed list.
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.TypedListBase.ObeyWeakRelations">
            <summary>
            Gets / sets ObeyWeakRelations, which is the flag to signal the collection what kind of join statements to generate in the
            query statement. Weak relationships are relationships which are optional, for example a
            customer with no orders is possible, because the relationship between customer and order is based on a field in order.
            When this property is set to true (default: false), weak relationships will result in LEFT JOIN statements. When
            set to false (which is the default), INNER JOIN statements are used.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork">
            <summary>
            UnitOfWork class. Can collect actions to perform on the entities/entity collections specified. 
            Will not perform these actions until Commit(transaction) is called. A UnitOfWork is meant to make development easier.
            It will not prohibit the developer to persist the actions also using other methods. 
            Selfservicing Specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            CTor for deserialization
            </summary>
            <param name="info">Info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.GetEntityElementsToInsert">
            <summary>
            Gets the UnitOfWorkElements with the entities which are added with <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)"/> and which are new UnitOfWorkElementCollection. 
            To remove an entity, call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.RemoveFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)"/>
            </summary>
            <returns>new UnitOfWorkElementCollection with all UnitOfWorkElements with the entities which are added using AddForSave and which are new</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.GetEntityElementsToUpdate">
            <summary>
            Gets the UnitOfWorkElements with the entities which are added with <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)"/> and which are not new UnitOfWorkElementCollection. 
            To remove an entity, call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.RemoveFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)"/>
            </summary>
            <returns>new UnitOfWorkElementCollection with all UnitOfWorkElements with the entities which are added using AddForSave and which are not new</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.GetInsertQueue">
            <summary>
            Gets the insert queue, which is a readonly arraylist of entity objects which have been placed in the insert queue. 
            This queue is empty unless <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.ConstructSaveProcessQueues"/> has been called, or <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.Commit(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)"/> has been called, which calls
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.ConstructSaveProcessQueues"/> under the hood. If this method is called after <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.Commit(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)"/>, and Commit succeeded, the
            entities in the queue returned are saved succesfully. Calling <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.Reset"/> will not clear the queues, only <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.ConstructSaveProcessQueues"/>
            or <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.Commit(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)"/> will.
            </summary>
            <returns>Readonly arraylist with the entities in the insert queue.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.GetUpdateQueue">
            <summary>
            Gets the update queue, which is a readonly arraylist of entity objects which have been placed in the update queue. 
            This queue is empty unless <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.ConstructSaveProcessQueues"/> has been called, or <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.Commit(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)"/> has been called, which calls
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.ConstructSaveProcessQueues"/> under the hood. If this method is called after <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.Commit(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)"/>, and Commit succeeded, the
            entities in the queue returned are saved succesfully. Calling <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.Reset"/> will not clear the queues, only <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.ConstructSaveProcessQueues"/>
            or <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.Commit(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)"/> will.
            </summary>
            <returns>Readonly arraylist with the entities in the insert queue.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.GetEntityElementsToDelete">
            <summary>
            Gets the UnitOfWorkElements with the entities which are added with <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddForDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)"/>, in a new UnitOfWorkElementCollection. 
            To remove an entity, call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.RemoveFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)"/>
            </summary>
            <returns>new UnitOfWorkElementCollection with all UnitOfWorkElements with the entities which are added using AddForDelete</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.GetCollectionElementsToSave">
            <summary>
            Gets the UnitOfWorkCollectionElements with the collections which are added with <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddCollectionForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)"/>, in a new UnitOfWorkCollectionElementCollection. 
            To remove a collection, call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.RemoveCollectionFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)"/>
            </summary>
            <returns>new UnitOfWorkCollectionElementCollection with all UnitOfWorkCollectionElements with the entities which are added using AddCollectionForSave</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.GetCollectionElementsToDelete">
            <summary>
            Gets the UnitOfWorkCollectionElements with the collections which are added with <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddCollectionForDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)"/>, in a new UnitOfWorkCollectionElementCollection. 
            To remove a collection, call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.RemoveCollectionFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)"/>
            </summary>
            <returns>new UnitOfWorkCollectionElementCollection with all UnitOfWorkCollectionElements with the entities which are added using AddCollectionForDelete</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Adds the passed in entity for saving. No recursion will be applied during the save of this entity when the unit of work is committed.
            </summary>
            <param name="entityToSave">The entity to save via this unit of work</param>
            <returns>true if the entity is accepted, false if the entity is rejected (already added for a similar action)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds the passed in entity for saving. No recursion will be applied during the save of this entity when the unit of work is committed.
            </summary>
            <param name="entityToSave">The entity to save via this unit of work</param>
            <param name="restriction">Filter to apply during save (ignored when the entity is new). This restriction will be AND-ed
            with the restriction constructed by a ConcurrencyPredicateFactory instance in entityToSave (if applicable).</param>
            <returns>true if the entity is accepted, false if the entity is rejected (already added for a similar action)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.Boolean)">
            <summary>
            Adds the passed in entity for saving. 
            </summary>
            <param name="entityToSave">The entity to save via this unit of work</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by this entity also.</param>
            <returns>true if the entity is accepted, false if the entity is rejected (already added for a similar action)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            Adds the passed in entity for saving. 
            </summary>
            <param name="entityToSave">The entity to save via this unit of work</param>
            <param name="restriction">Filter to apply during save (ignored when the entity is new). This restriction will be AND-ed
            with the restriction constructed by a ConcurrencyPredicateFactory instance in entityToSave (if applicable).</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by this entity also.</param>
            <returns>true if the entity is accepted, false if the entity is rejected (already added for a similar action)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.RemoveFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Removes the specified entity from this UnitOfWork. If the entity is in an added collection, the entity will later on still be added. 
            </summary>
            <param name="entityToRemove">Entity to remove.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.RemoveCollectionFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Removes the specified entity collection from this UnitOfWork. 
            </summary>
            <param name="collectionToRemove">Entity collection to remove.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddCollectionForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Adds the collection with entities for saving. When the UnitOfWork is committed, the entities in the collection are added to the
            correct process bins to make sure the order is correct.
            </summary>
            <param name="collectionToSave">collection with entities to be added for saving</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddCollectionForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Boolean)">
            <summary>
            Adds the collection with entities for saving. When the UnitOfWork is committed, the entities in the collection are added to the
            correct process bins to make sure the order is correct.
            </summary>
            <param name="collectionToSave">collection with entities to be added for saving</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by this entity also.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddForDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Adds the passed in entity for deletion. 
            </summary>
            <param name="entityToDelete">The entity to delete via this unit of work</param>
            <returns>true if the entity is accepted, false if the entity is rejected (entity is new)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddForDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds the passed in entity for deletion.
            </summary>
            <param name="entityToDelete">The entity to delete via this unit of work</param>
            <param name="restriction">Filter to apply during delete. This restriction will be AND-ed
            with the restriction constructed by a ConcurrencyPredicateFactory instance in entityToDelete (if applicable).</param>
            <returns>true if the entity is accepted, false if the entity is rejected (entity is new)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddForDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            Adds the passed in object for delete. This is the actual routine performing the work.
            </summary>
            <param name="entityToDelete">Entity to delete.</param>
            <param name="restriction">Restriction.</param>
            <param name="append">If true (default), append the entity at the end of the list, otherwise insert it at the front. False in the case
            of inserting objects from collections marked for deletion.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddCollectionForDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Adds the collection with entities for deletion. When the UnitOfWork is committed, the entities in the collection are added to the
            correct process bins to make sure the order is correct.
            </summary>
            <param name="collectionToDelete">collection with entities to be added for deletion</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddCallBack(System.Delegate,SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackScheduleSlot,System.Object[])">
            <summary>
            Adds the call back passed in, to the slot specified with the parameters specified. 
            </summary>
            <param name="delegateToCall">Delegate to call.</param>
            <param name="schedulingSlot">Scheduling slot to call the delegate in.</param>
            <param name="parameters">Parameters to pass to the delegate.</param>
            <remarks>will pass in the used Transaction as the last parameter to the delegate.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddCallBack(System.Delegate,SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackScheduleSlot,System.Boolean,System.Object[])">
            <summary>
            Adds the call back passed in, to the slot specified with the parameters specified. 
            </summary>
            <param name="delegateToCall">Delegate to call.</param>
            <param name="schedulingSlot">Scheduling slot to call the delegate in.</param>
            <param name="passInTransaction">Flag to tell the Commit routine to pass the used Transaction object as the last parameter to the delegate (true, default)
            or not (false).</param>
            <param name="parameters">Parameters to pass to the delegate. If you've specified true for passInTransaction,
            the Transaction object used during commit will be passed in as the last parameter.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.Reset">
            <summary>
            Resets the inner contents of this unit of work. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddDeleteMultiCall(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds a call to collection.DeleteMulti(filter) to delete entities directly from the database using the passed in
            criteria. The call will be executed inside the transaction used in Commit and will be executed after the last entity has been
            deleted but before the PostEntityDelete callbacks.
            </summary>
            <param name="collection">Collection object to call DeleteMulti on.</param>
            <param name="filter">Filter to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddDeleteMultiCall(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds a call to collection.DeleteMulti(filter, relations) to delete entities directly from the database using the passed in
            criteria. The call will be executed inside the transaction used in Commit and will be executed after the last entity has been
            deleted but before the PostEntityDelete callbacks.
            </summary>
            <param name="collection">Collection object to call DeleteMulti on.</param>
            <param name="filter">Filter to use.</param>
            <param name="relations">RelationCollection to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddUpdateMultiCall(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Adds a call to collection.UpdateMulti(Entity, filter) to update entities directly in the database using the passed in
            criteria. The call will be executed inside the transaction used in Commit and will be executed after the last entity has been
            updated but before the PreEntityUpdate callbacks.
            </summary>
            <param name="collection">Collection object to call UpdateMulti on.</param>
            <param name="entityWithNewValues">instance which holds the new values for the matching entities to update. Only changed fields are taken into account </param>
            <param name="filter">Filter to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.AddUpdateMultiCall(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection)">
            <summary>
            Adds a call to collection.UpdateMulti(Entity, filter, relations) to update entities directly in the database using the passed in
            criteria. The call will be executed inside the transaction used in Commit and will be executed after the last entity has been
            updated but before the PreEntityUpdate callbacks.
            </summary>
            <param name="collection">Collection object to call UpdateMulti on.</param>
            <param name="entityWithNewValues">instance which holds the new values for the matching entities to update. Only changed fields are taken into account </param>
            <param name="filter">Filter to use.</param>
            <param name="relations">RelationCollection to use.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.Commit(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Commits this unit of work. It will first add all entities in the added collections to the correct bins, then it will start
            by first inserting all new entities, then saving all updates and then performing the deletes. 
            </summary>
            <param name="transactionToUse">Transaction to use. All entities to process will be added to this transaction, unless they're already part
            of another transaction.</param>
            <remarks>It will not commit nor rollback the transaction.</remarks>
            <exception cref="T:System.ArgumentNullException">when transactionToUse is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.Commit(SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,System.Boolean)">
            <summary>
            Commits this unit of work. It will first add all entities in the added collections to the correct bins, then it will start
            by first inserting all new entities, then saving all updates and then performing the deletes. 
            </summary>
            <param name="transactionToUse">Transaction to use. All entities to process will be added to this transaction, unless they're already part
            of another transaction.</param>
            <param name="autoCommit">if true, it will commit/rollback the transaction passed in using the following rules:
            - if no exception is thrown: commit
            - if an exception is thrown: rollback</param>
            <exception cref="T:System.ArgumentNullException">when transactionToUse is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.ConstructSaveProcessQueues">
            <summary>
            Constructs the save process queues for insert and update actions. These queues are constructed from the entities added to this UoW 
            for save either individually or in a collection. Call this method to determine what the sequence will be for the insert and update
            actions executed during Commit(). Commit() uses this method as well as well as the serialization/deserialization logic, to avoid
            sending large object graphs with few changes.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.ConstructParameters(System.Object[],SD.LLBLGen.Pro.ORMSupportClasses.ITransaction,System.Boolean)">
            <summary>
            Constructs the parameters to pass
            </summary>
            <param name="parameters">Parameters.</param>
            <param name="transactionToUse">Transaction to use.</param>
            <param name="passInTransaction">Pass in transaction.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork.ConstructRestrictionFilter(SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement,SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType)">
            <summary>
            Constructs the restriction filter for the element passed in
            </summary>
            <param name="element">Element.</param>
            <param name="concurrencyType"></param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateMultiElement">
            <summary>
            unit of work element to store in the update multi calls to execute
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateMultiElement.#ctor">
            <summary>
            CTor. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateMultiElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateMultiElement"/> instance.
            </summary>
            <param name="filter">Filter.</param>
            <param name="relations">Relations.</param>
            <param name="collection">Collection.</param>
            <param name="entity">Entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateMultiElement.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Inits the class.
            </summary>
            <param name="filter">Filter.</param>
            <param name="relations">Relations.</param>
            <param name="collection">Collection.</param>
            <param name="entity">Entity.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateMultiElement.Entity">
            <summary>
            Gets / sets entity
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateMultiElement.Filter">
            <summary>
            Gets / sets filter
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateMultiElement.Relations">
            <summary>
            Gets / sets relations
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateMultiElement.Collection">
            <summary>
            Gets / sets collection
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteMultiElement">
            <summary>
            unit of work element to store in the delete multi calls to execute
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteMultiElement.#ctor">
            <summary>
            CTor. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteMultiElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteMultiElement"/> instance.
            </summary>
            <param name="filter">Filter.</param>
            <param name="relations">Relations.</param>
            <param name="collection">Collection.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteMultiElement.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,SD.LLBLGen.Pro.ORMSupportClasses.IRelationCollection,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Inits the class.
            </summary>
            <param name="filter">Filter.</param>
            <param name="relations">Relations.</param>
            <param name="collection">Collection.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteMultiElement.Filter">
            <summary>
            Gets / sets filter
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteMultiElement.Relations">
            <summary>
            Gets / sets relations
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteMultiElement.Collection">
            <summary>
            Gets / sets collection
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement">
            <summary>
            unit of work element to store in the unit of work collections for insert/update/delete. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement.#ctor">
            <summary>
            CTor. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntity)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement"/> instance.
            </summary>
            <param name="entity">entity involved</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement"/> instance.
            </summary>
            <param name="entity">entity involved</param>
            <param name="restriction">Restriction.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement"/> instance.
            </summary>
            <param name="entity">entity involved</param>
            <param name="restriction">Restriction.</param>
            <param name="recurse">recurse query. Ignored in Delete queries</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Boolean)">
            <summary>
            Inits the class.
            </summary>
            <param name="entity">entity involved</param>
            <param name="restriction">Restriction.</param>
            <param name="recurse">Recurse.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement.Recurse">
            <summary>
            Gets / sets recurse
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement.Restriction">
            <summary>
            Gets / sets restriction
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement.Entity">
            <summary>
            Gets / sets entity
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement">
            <summary>
            unit of work callback element to store in the unit of work collections for callbacks. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement.#ctor">
            <summary>
            CTor. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement.#ctor(System.Delegate,System.Boolean,System.Object[])">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement"/> instance.
            </summary>
            <param name="delegateToCall">Delegate to call.</param>
            <param name="passInTransaction">When true, the routine assumes that the last parameter specified is the placeholder for the transaction to use (default). 
            When false, it won't pass in a transaction and will assume the callback has to run outside the current transaction scope</param>
            <param name="parameters">Parameters.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement.InitClass(System.Delegate,System.Object[],System.Boolean)">
            <summary>
            Inits the class.
            </summary>
            <param name="delegateToCall">Delegate to call.</param>
            <param name="parameters">Parameters.</param>
            <param name="passInTransaction"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement.PassInTransaction">
            <summary>
            Gets / sets passInTransaction
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement.DelegateToCall">
            <summary>
            Gets / sets delegateToCall
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement.Parameters">
            <summary>
            Gets / sets parameters
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement">
            <summary>
            unit of work element to store in the unit of work collections for insert/update/delete. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement.#ctor">
            <summary>
            CTor. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement"/> instance.
            </summary>
            <param name="collection">entity collection involved</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement"/> instance.
            </summary>
            <param name="collection">entity collection involved</param>
            <param name="recurse">recurse query. Ignored in Delete queries</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Boolean)">
            <summary>
            Inits the class.
            </summary>
            <param name="collection">entity collection involved</param>
            <param name="recurse">Recurse.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement.Recurse">
            <summary>
            Gets / sets recurse
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement.Collection">
            <summary>
            Gets collection
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElementCollection">
            <summary>
            Typed collection which is used to return the UnitOfWorkCollectionElement elements in a UnitOfWork2 object
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElementCollection.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElementCollection"/> instance.
            </summary>
            <param name="c">C.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElementCollection">
            <summary>
            Typed collection which is used to return the UnitOfWorkElement elements in a UnitOfWork2 object
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElementCollection.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElementCollection"/> instance.
            </summary>
            <param name="c">C.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElementCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2">
            <summary>
            UnitOfWork2 class. Can collect actions to perform on the entities/entity collections specified. 
            Will not perform these actions until Commit(transaction) is called. A UnitOfWork is meant to make development easier.
            It will not prohibit the developer to persist the actions also using other methods. 
            Adapter Specific.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            CTor for deserialization
            </summary>
            <param name="info">Info.</param>
            <param name="context">Context.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.GetEntityElementsToInsert">
            <summary>
            Gets the UnitOfWorkElement2s with the entities which are added with <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)"/> and which are new, in a new UnitOfWorkElement2Collection. 
            To remove an entity, call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.RemoveFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)"/>
            </summary>
            <returns>new UnitOfWorkElement2Collection with all UnitOfWorkElement2s with the entities which are added using AddForSave and which are new</returns>
            <remarks>Use this method to peek into the list of elements added to the UnitOfWork. Don't use this method to retrieve the exact list of
            entities which have been inserted/will be inserted by the UnitOfWork, use <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.GetUpdateQueue"/> instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.GetEntityElementsToUpdate">
            <summary>
            Gets the UnitOfWorkElement2s with the entities which are added with <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)"/> and which are not new, in a new UnitOfWorkElement2Collection. 
            To remove an entity, call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.RemoveFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)"/>
            </summary>
            <returns>new UnitOfWorkElement2Collection with all UnitOfWorkElement2s with the entities which are added using AddForSave and which are not new</returns>
            <remarks>Use this method to peek into the list of elements added to the UnitOfWork. Don't use this method to retrieve the exact list of
            entities which have been updated/will be updated by the UnitOfWork, use <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.GetUpdateQueue"/> instead</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.GetInsertQueue">
            <summary>
            Gets the insert queue, which is a readonly arraylist of entity objects which have been placed in the insert queue. 
            This queue is empty unless <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.ConstructSaveProcessQueues"/> has been called, or <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.Commit(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter)"/> has been called, which calls
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.ConstructSaveProcessQueues"/> under the hood. If this method is called after <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.Commit(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter)"/>, and Commit succeeded, the
            entities in the queue returned are saved succesfully. Calling <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.Reset"/> will not clear the queues, only <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.ConstructSaveProcessQueues"/>
            or <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.Commit(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter)"/> will.
            </summary>
            <returns>Readonly arraylist with the entities in the insert queue.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.GetUpdateQueue">
            <summary>
            Gets the update queue, which is a readonly arraylist of entity objects which have been placed in the update queue. 
            This queue is empty unless <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.ConstructSaveProcessQueues"/> has been called, or <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.Commit(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter)"/> has been called, which calls
            <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.ConstructSaveProcessQueues"/> under the hood. If this method is called after <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.Commit(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter)"/>, and Commit succeeded, the
            entities in the queue returned are saved succesfully. Calling <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.Reset"/> will not clear the queues, only <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.ConstructSaveProcessQueues"/>
            or <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.Commit(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter)"/> will.
            </summary>
            <returns>Readonly arraylist with the entities in the insert queue.</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.GetEntityElementsToDelete">
            <summary>
            Gets the UnitOfWorkElement2s with the entities which are added with <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddForDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)"/>, in a new UnitOfWorkElement2Collection. 
            To remove an entity, call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.RemoveFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)"/>
            </summary>
            <returns>new UnitOfWorkElement2Collection with all UnitOfWorkElement2s with the entities which are added using AddForDelete</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.GetCollectionElementsToSave">
            <summary>
            Gets the UnitOfWorkCollectionElement2s with the collections which are added with <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddCollectionForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)"/>, in a new UnitOfWorkCollectionElement2Collection. 
            To remove a collection, call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.RemoveCollectionFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)"/>
            </summary>
            <returns>new UnitOfWorkCollectionElement2Collection with all UnitOfWorkCollectionElement2s with the entities which are added using AddCollectionForSave</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.GetCollectionElementsToDelete">
            <summary>
            Gets the UnitOfWorkCollectionElement2s with the collections which are added with <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddCollectionForDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)"/>, in a new UnitOfWorkCollectionElement2Collection. 
            To remove a collection, call <see cref="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.RemoveCollectionFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)"/>
            </summary>
            <returns>new UnitOfWorkCollectionElement2Collection with all UnitOfWorkCollectionElement2s with the entities which are added using AddCollectionForDelete</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Adds the passed in entity for saving. No refetching will be applied.
            </summary>
            <param name="entityToSave">The entity2 to save via this unit of work</param>
            <returns>true if the entity is accepted, false if the entity is rejected (already added for a similar action)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Adds the passed in entity for saving. No refetching will be applied.
            </summary>
            <param name="entityToSave">The entity to save via this unit of work</param>
            <param name="restriction">Filter to apply during save (ignored when the entity is new). This restriction will be AND-ed
            with the restriction constructed by a ConcurrencyPredicateFactory instance in entityToSave (if applicable).</param>
            <returns>true if the entity is accepted, false if the entity is rejected (already added for a similar action)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Boolean)">
            <summary>
            Adds the passed in entity for saving. 
            </summary>
            <param name="entityToSave">The entity to save via this unit of work</param>
            <param name="refetch">When true, it will refetch the entity saved after the save action.</param>
            <returns>true if the entity is accepted, false if the entity is rejected (already added for a similar action)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Boolean)">
            <summary>
            Adds the passed in entity for saving. 
            </summary>
            <param name="entityToSave">The entity to save via this unit of work</param>
            <param name="restriction">Filter to apply during save (ignored when the entity is new). This restriction will be AND-ed
            with the restriction constructed by a ConcurrencyPredicateFactory instance in entityToSave (if applicable).</param>
            <param name="refetch">When true, it will refetch the entity saved after the save action. </param>
            <returns>true if the entity is accepted, false if the entity is rejected (already added for a similar action)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Boolean,System.Boolean)">
            <summary>
            Adds the passed in entity for saving. 
            </summary>
            <param name="entityToSave">The entity to save via this unit of work</param>
            <param name="restriction">Filter to apply during save (ignored when the entity is new). This restriction will be AND-ed
            with the restriction constructed by a ConcurrencyPredicateFactory instance in entityToSave (if applicable).</param>
            <param name="refetch">When true, it will refetch the entity saved after the save action.</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by this entity also.</param>
            <returns>true if the entity is accepted, false if the entity is rejected (already added for a similar action)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.RemoveFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Removes the specified entity from this UnitOfWork. If the entity is in an added collection, the entity will later on still be added. 
            </summary>
            <param name="entityToRemove">Entity to remove.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.RemoveCollectionFromUoW(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Removes the specified entity collection from this UnitOfWork. 
            </summary>
            <param name="collectionToRemove">Entity collection to remove.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddCollectionForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Adds the collection with entities for saving. When the UnitOfWork is committed, the entities in the collection are added to the
            correct process bins to make sure the order is correct. No recursion and no refetch are done for these entities.
            </summary>
            <param name="collectionToSave">collection with entities to be added for saving</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddCollectionForSave(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,System.Boolean,System.Boolean)">
            <summary>
            Adds the collection with entities for saving. When the UnitOfWork is committed, the entities in the collection are added to the
            correct process bins to make sure the order is correct.
            </summary>
            <param name="collectionToSave">collection with entities to be added for saving</param>
            <param name="refetch">When true, it will refetch all entities saved after the save action.</param>
            <param name="recurse">When true, the entities in the collection will be saved recursively.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddForDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Adds the passed in entity for deletion. 
            </summary>
            <param name="entityToDelete">The entity to delete via this unit of work</param>
            <returns>true if the entity is accepted, false if the entity is rejected (entity is new)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddForDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Adds the passed in entity for deletion.
            </summary>
            <param name="entityToDelete">The entity to delete via this unit of work</param>
            <param name="restriction">Filter to apply during delete. This restriction will be AND-ed
            with the restriction constructed by a ConcurrencyPredicateFactory instance in entityToDelete (if applicable).</param>
            <returns>true if the entity is accepted, false if the entity is rejected (entity is new)</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddForDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Boolean)">
            <summary>
            Adds the passed in object for delete. This is the actual routine performing the work.
            </summary>
            <param name="entityToDelete">Entity to delete.</param>
            <param name="restriction">Restriction.</param>
            <param name="append">If true (default), append the entity at the end of the list, otherwise insert it at the front. False in the case
            of inserting objects from collections marked for deletion.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddCollectionForDelete(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Adds the collection with entities for deletion. When the UnitOfWork is committed, the entities in the collection are added to the
            correct process bins to make sure the order is correct.
            </summary>
            <param name="collectionToDelete">collection with entities to be added for deletion</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddCallBack(System.Delegate,SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackScheduleSlot,System.Object[])">
            <summary>
            Adds the call back passed in, to the slot specified with the parameters specified. 
            </summary>
            <param name="delegateToCall">Delegate to call.</param>
            <param name="schedulingSlot">Scheduling slot to call the delegate in.</param>
            <param name="parameters">Parameters to pass to the delegate.</param>
            <remarks>will pass in the used adapter as the last parameter to the delegate.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddCallBack(System.Delegate,SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackScheduleSlot,System.Boolean,System.Object[])">
            <summary>
            Adds the call back passed in, to the slot specified with the parameters specified. 
            </summary>
            <param name="delegateToCall">Delegate to call.</param>
            <param name="schedulingSlot">Scheduling slot to call the delegate in.</param>
            <param name="passInAdapter">Flag to tell the Commit routine to pass the used adapter object as the last parameter to the delegate (true, default)
            or not (false).</param>
            <param name="parameters">Parameters to pass to the delegate. If you've specified true for passInAdapter,
            the adapter object used during commit will be passed in as the last parameter.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.Reset">
            <summary>
            Resets the inner contents of this unit of work. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddDeleteEntitiesDirectlyCall(System.String,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Adds a DeleteEntitiesDirectly call to be scheduled during Commit. It is called right after the last entity has been deleted but before the post delete
            callbacks are called.
            </summary>
            <param name="entityName">The name of the entity to retrieve persistence information. For example "CustomerEntity". This name can be retrieved from an existing entity's LLBLGenProEntityName property.</param>
            <param name="filterBucket">filter information to filter out the entities to delete</param>
            <remarks>the method is called on the adapter passed in to Commit.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.AddUpdateEntitiesDirectlyCall(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket)">
            <summary>
            Adds an UpdateEntitiesDirectly call to be scheduled during Commit. It is called right after the last entity has been updated but before the pre delete
            callbacks are called.
            </summary>
            <param name="entityWithNewValues">Entity object which contains the new values for the entities of the same type and which match the filter in filterBucket. Only fields which are changed are updated.</param>
            <param name="filterBucket">filter information to filter out the entities to update. </param>
            <remarks>the method is called on the adapter passed in to Commit.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.Commit(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter)">
            <summary>
            Commits this unit of work. It will first add all entities in the added collections to the correct bins, then it will start
            by first inserting all new entities, then saving all updates and then performing the deletes. 
            </summary>
            <param name="adapterToUse">Adapter to use. It will start a new transaction is no transaction is in progress.</param>
            <remarks>It will not commit nor rollback the transaction.</remarks>
            <exception cref="T:System.ArgumentNullException">when adapterToUse is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.Commit(SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter,System.Boolean)">
            <summary>
            Commits this unit of work. It will first add all entities in the added collections to the correct bins, then it will start
            by first inserting all new entities, then saving all updates and then performing the deletes. 
            </summary>
            <param name="adapterToUse">Adapter to use. It will start a new transaction is no transaction is in progress.</param>
            <param name="autoCommit">if true, it will commit/rollback the transaction passed in using the following rules:
            - if no exception is thrown: commit
            - if an exception is thrown: rollback</param>
            <exception cref="T:System.ArgumentNullException">when adapterToUse is null</exception>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.ConstructSaveProcessQueues">
            <summary>
            Constructs the save process queues for insert and update actions. These queues are constructed from the entities added to this UoW 
            for save either individually or in a collection. Call this method to determine what the sequence will be for the insert and update
            actions executed during Commit(). Commit() uses this method as well as well as the serialization/deserialization logic, to avoid
            sending large object graphs with few changes.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.ConstructParameters(System.Object[],SD.LLBLGen.Pro.ORMSupportClasses.IDataAccessAdapter,System.Boolean)">
            <summary>
            Constructs the parameters to pass
            </summary>
            <param name="parameters">Parameters.</param>
            <param name="adapterToUse"></param>
            <param name="passInAdapter">Pass in adapter.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWork2.ConstructRestrictionFilter(SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2,SD.LLBLGen.Pro.ORMSupportClasses.ConcurrencyPredicateType)">
            <summary>
            Constructs the restriction filter for the element passed in
            </summary>
            <param name="element">Element.</param>
            <param name="concurrencyType"></param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateEntitiesDirectlyElement">
            <summary>
            unit of work element to store in the UpdateEntitiesDirectly calls to execute
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateEntitiesDirectlyElement.#ctor">
            <summary>
            CTor. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateEntitiesDirectlyElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateMultiElement"/> instance.
            </summary>
            <param name="filter">Filter.</param>
            <param name="entity">Entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateEntitiesDirectlyElement.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Inits the class.
            </summary>
            <param name="filter">Filter.</param>
            <param name="entity">Entity.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateEntitiesDirectlyElement.Entity">
            <summary>
            Gets / sets entity
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkUpdateEntitiesDirectlyElement.Filter">
            <summary>
            Gets / sets filter
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteEntitiesDirectlyElement">
            <summary>
            unit of work element to store in the DeleteEntitiesDirectly calls to execute
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteEntitiesDirectlyElement.#ctor">
            <summary>
            CTor. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteEntitiesDirectlyElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.String)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteEntitiesDirectlyElement"/> instance.
            </summary>
            <param name="filter">Filter.</param>
            <param name="entityName">Name of the entity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteEntitiesDirectlyElement.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IRelationPredicateBucket,System.String)">
            <summary>
            Inits the class.
            </summary>
            <param name="filter">Filter.</param>
            <param name="entityName">Name of the entity.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteEntitiesDirectlyElement.EntityName">
            <summary>
            Gets / sets entityName
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkDeleteEntitiesDirectlyElement.Filter">
            <summary>
            Gets / sets filter
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2">
            <summary>
            unit of work element to store in the unit of work collections for insert/update/delete. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2.#ctor">
            <summary>
            CTor. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement"/> instance.
            </summary>
            <param name="entity">entity involved</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement"/> instance.
            </summary>
            <param name="entity">entity involved</param>
            <param name="restriction">Restriction.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement"/> instance.
            </summary>
            <param name="entity">entity involved</param>
            <param name="restriction">Restriction.</param>
            <param name="refetch">When true, it will refetch the entity saved after the save action.</param>
            <param name="recurse">When true, it will save all dirty objects referenced (directly or indirectly) by this entity also.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Boolean,System.Boolean)">
            <summary>
            Inits the class.
            </summary>
            <param name="entity">entity involved</param>
            <param name="restriction">Restriction.</param>
            <param name="refetch"></param>
            <param name="recurse">Recurse.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2.Refetch">
            <summary>
            Gets / sets refetch
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2.Recurse">
            <summary>
            Gets / sets recurse
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2.Restriction">
            <summary>
            Gets / sets restriction
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2.Entity">
            <summary>
            Gets / sets entity
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement2">
            <summary>
            unit of work callback element to store in the unit of work collections for callbacks. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement2.#ctor">
            <summary>
            CTor. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement2.#ctor(System.Delegate,System.Boolean,System.Object[])">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement"/> instance.
            </summary>
            <param name="delegateToCall">Delegate to call.</param>
            <param name="passInAdapter">When true, the routine will pass in the current adapter used in commit to the delegate as the last parameter 
            When false, it won't pass in an adapter and will assume the callback has to run outside the current adapter's transaction scope</param>
            <param name="parameters">Parameters.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement2.InitClass(System.Delegate,System.Object[],System.Boolean)">
            <summary>
            Inits the class.
            </summary>
            <param name="delegateToCall">Delegate to call.</param>
            <param name="parameters">Parameters.</param>
            <param name="passInAdapter"></param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement2.PassInAdapter">
            <summary>
            Gets / sets passInAdapter
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement2.DelegateToCall">
            <summary>
            Gets / sets delegateToCall
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCallBackElement2.Parameters">
            <summary>
            Gets / sets parameters
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2">
            <summary>
            unit of work element to store in the unit of work collections for insert/update/delete. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2.#ctor">
            <summary>
            CTor. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement"/> instance.
            </summary>
            <param name="collection">entity collection involved</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement"/> instance.
            </summary>
            <param name="collection">entity collection involved</param>
            <param name="refetch">When true, it will refetch all entities saved after the save action.</param>
            <param name="recurse">When true, the entities in the collection will be saved recursively.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2.InitClass(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,System.Boolean,System.Boolean)">
            <summary>
            Inits the class.
            </summary>
            <param name="collection">entity collection involved</param>
            <param name="refetch"></param>
            <param name="recurse">Recurse.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2.Recurse">
            <summary>
            Gets / sets recurse
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2.Collection">
            <summary>
            Gets collection
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2.Refetch">
            <summary>
            Gets / sets refetch
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2Collection">
            <summary>
            Typed collection which is used to return the UnitOfWorkCollectionElement2 elements in a UnitOfWork2 object
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2Collection.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2Collection"/> instance.
            </summary>
            <param name="c">C.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2Collection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkCollectionElement2"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2Collection">
            <summary>
            Typed collection which is used to return the UnitOfWorkElement2 elements in a UnitOfWork2 object
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2Collection.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2Collection"/> instance.
            </summary>
            <param name="c">C.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2Collection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UnitOfWorkElement2"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.LinkedListNode">
            <summary>
            Simple linked list node class to hold entity objects in a linked list.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.LinkedListNode.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.LinkedListNode,SD.LLBLGen.Pro.ORMSupportClasses.LinkedListNode,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.LinkedListNode"/> class.
            </summary>
            <param name="next">Next.</param>
            <param name="previous">Previous.</param>
            <param name="data">Data.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LinkedListNode.Data">
            <summary>
            Gets / sets data
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LinkedListNode.Previous">
            <summary>
            Gets / sets previous
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.LinkedListNode.Next">
            <summary>
            Gets / sets next
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils">
            <summary>
            Some utility functions to process graphs
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.ProduceTopologyOrderedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Collections.Hashtable,System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            Produces the topology ordered list for the graph rooted by the entity passed in.
            </summary>
            <param name="entityToExamine">Entity to examine.</param>
            <param name="inProgress">entities already in progress.</param>
            <param name="recursed">Recursed. The entities already processed</param>
            <param name="postponed">Postponed. The entities which are postponed because they depend on an entity which is already in progress</param>
            <returns>
            List of the complete ordered graph from the passed in entity.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.DetermineActionQueues(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,System.Collections.ArrayList@,System.Collections.ArrayList@,System.Boolean)">
            <summary>
            Determines the action queues for the entity passed in. The action queues contain the entities to process in the right order.
            </summary>
            <param name="entityToSave">Entity to save.</param>
            <param name="insertQueue">Insert queue.</param>
            <param name="updateQueue">Update queue.</param>
            <param name="refetchAfterAction">flag to set in the new actionobjects if the entity to save has to be refetched after the action</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.DetermineActionQueues(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Collections.ArrayList@,System.Collections.ArrayList@,System.Boolean)">
            <summary>
            Determines the action queues for the entity passed in. The action queues contain the entities to process in the right order.
            </summary>
            <param name="entityToSave">Entity to save.</param>
            <param name="updateRestriction">Update restriction to use for entityToSave</param>
            <param name="insertQueue">Insert queue.</param>
            <param name="updateQueue">Update queue.</param>
            <param name="refetchAfterAction">flag to set in the new actionobjects if the entity to save has to be refetched after the action</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.DetermineActionQueues(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection2,System.Collections.ArrayList@,System.Collections.ArrayList@,System.Boolean)">
            <summary>
            Determines the action queues for the entity collection passed in. The action queues contain the entities to process in the right order.
            </summary>
            <param name="entityCollectionToSave">Entity collection to save.</param>
            <param name="insertQueue">Insert queue.</param>
            <param name="updateQueue">Update queue.</param>
            <param name="refetchAfterAction">flag to set in the new actionobjects if the entity to save has to be refetched after the action</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.DetermineActionQueues(SD.LLBLGen.Pro.ORMSupportClasses.IEntity2,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Collections.ArrayList@,System.Collections.ArrayList@,System.Collections.Hashtable@,System.Collections.Hashtable@,System.Collections.Hashtable@,System.Collections.Hashtable@,System.Boolean)">
            <summary>
            Determines the action queues for the entity passed in. The action queues contain the entities to process in the right order.
            </summary>
            <param name="entityToSave">Entity to save.</param>
            <param name="updateRestriction">Update restriction to use with entityToSave</param>
            <param name="insertQueue">Insert queue.</param>
            <param name="updateQueue">Update queue.</param>
            <param name="inProcess">In process.</param>
            <param name="recursed">Recursed.</param>
            <param name="inQueue">In queue.</param>
            <param name="postponed">Postponed.</param>
            <param name="refetchAfterAction">flag to set in the new actionobjects if the entity to save has to be refetched after the action</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.ProduceTopologyOrderedList(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.Collections.Hashtable,System.Collections.Hashtable,System.Collections.Hashtable)">
            <summary>
            Produces the topology ordered list for the graph rooted by the entity passed in.
            </summary>
            <param name="entityToExamine">Entity to examine.</param>
            <param name="inProgress">entities already in progress.</param>
            <param name="recursed">Recursed. The entities already processed</param>
            <param name="postponed">Postponed. The entities which are postponed because they depend on an entity which is already in progress</param>
            <returns>
            List of the complete ordered graph from the passed in entity.
            </returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.DetermineActionQueues(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Determines the action queues for the entity passed in. The action queues contain the entities to process in the right order.
            </summary>
            <param name="entityToSave">Entity to save.</param>
            <param name="insertQueue">Insert queue.</param>
            <param name="updateQueue">Update queue.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.DetermineActionQueues(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Determines the action queues for the entity passed in. The action queues contain the entities to process in the right order.
            </summary>
            <param name="entityToSave">Entity to save.</param>
            <param name="updateRestriction">Update restriction to use with entityToSave.</param>
            <param name="insertQueue">Insert queue.</param>
            <param name="updateQueue">Update queue.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.DetermineActionQueues(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCollection,System.Collections.ArrayList@,System.Collections.ArrayList@)">
            <summary>
            Determines the action queues for the entity collection passed in. The action queues contain the entities to process in the right order.
            </summary>
            <param name="entityCollectionToSave">Entity collection to save.</param>
            <param name="insertQueue">Insert queue.</param>
            <param name="updateQueue">Update queue.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.DetermineActionQueues(SD.LLBLGen.Pro.ORMSupportClasses.IEntity,SD.LLBLGen.Pro.ORMSupportClasses.IPredicate,System.Collections.ArrayList@,System.Collections.ArrayList@,System.Collections.Hashtable@,System.Collections.Hashtable@,System.Collections.Hashtable@,System.Collections.Hashtable@)">
            <summary>
            Determines the action queues for the entity passed in. The action queues contain the entities to process in the right order.
            </summary>
            <param name="entityToSave">Entity to save.</param>
            <param name="updateRestriction">Update restriction.</param>
            <param name="insertQueue">Insert queue.</param>
            <param name="updateQueue">Update queue.</param>
            <param name="inProcess">In process.</param>
            <param name="recursed">Recursed.</param>
            <param name="inQueue">In queue.</param>
            <param name="postponed">Postponed.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.PersistQueue(System.Collections.ArrayList,System.Boolean,SD.LLBLGen.Pro.ORMSupportClasses.ITransaction)">
            <summary>
            Persists the queue passed in. The queue contains ActionQueueElements and is in the right order, just save it from front to back
            </summary>
            <param name="queueToPersist">Queue to persist.</param>
            <param name="insertActions">if true, the actions to perform are save actions, otherwise update actions</param>
            <param name="transactionToUse">Transaction to use.</param>
            <returns>bool if the actions all went ok.</returns>
            <remarks>It assumes a transaction, if needed, is already created and opened and passed in. All exceptions are bubbled upwards</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ObjectGraphUtils.AddNodeToLinkedList(SD.LLBLGen.Pro.ORMSupportClasses.LinkedListNode@,SD.LLBLGen.Pro.ORMSupportClasses.LinkedListNode@,SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore)">
            <summary>
            Adds the node to linked list.
            </summary>
            <param name="head">Head.</param>
            <param name="tail">Tail.</param>
            <param name="data">Data.</param>
            <returns></returns>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement">
            <summary>
            Internal class to store entities in an action queue (insertqueue or update queue)
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityCore,SD.LLBLGen.Pro.ORMSupportClasses.IPredicateExpression,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement"/> class.
            </summary>
            <param name="entity">Entity.</param>
            <param name="additionalUpdateFilter">Additional update filter.</param>
            <param name="refetchAfterAction"><see langword="true"/> if [refetch after action]; otherwise, <see langword="false"/>.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement.RefetchAfterAction">
            <summary>
            Gets / sets refetchAfterAction
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement.Entity">
            <summary>
            Gets / sets entity
            </summary>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.ActionQueueElement.AdditionalUpdateFilter">
            <summary>
            Gets / sets additionalUpdateFilter
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.DataTableFiller">
            <summary>
            Utility class which fills the passed in datatable using the passed in open reader and the persistence info. 
            It performs conversion along the way. It creates new columns if no columns are defined in the datatable, otherwise
            re-uses the columns. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.DataTableFiller.Fill(System.Data.IDataReader,System.Data.DataTable,SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[],SD.LLBLGen.Pro.ORMSupportClasses.IRetrievalQuery)">
            <summary>
            Fills the specified datatable with the data from the datareader.
            </summary>
            <param name="dataSource">Data source. Is assumed the reader is at the first record, so Read() has been called.</param>
            <param name="toFill">To fill.</param>
            <param name="fieldsPersistenceInfo">Fields persistence info.</param>
            <param name="queryExecuted">Query executed.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.UniqueValueList">
            <summary>
            ArrayList which contains solely unique values. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueValueList.#ctor">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UniqueValueList"/> instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueValueList.#ctor(System.Collections.ICollection)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.UniqueValueList"/> instance.
            </summary>
            <param name="c">Collection of objects to add to this collection. It will use the </param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueValueList.AddRange(System.Collections.ICollection)">
            <summary>
            Adds the range specified
            </summary>
            <param name="c">Collection with new objects to add</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueValueList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts the value at the specified index if it's not already present in the list, otherwise it's a no-op
            </summary>
            <param name="index">Index.</param>
            <param name="value">Value.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueValueList.Add(System.Object)">
            <summary>
            Adds the specified value if it's not already in the list.
            </summary>
            <param name="value">Value.</param>
            <returns>index of the value if it's added or the first index it appears on</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.UniqueValueList.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Inserts the range.
            </summary>
            <param name="index">Index.</param>
            <param name="c">C.</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.UniqueValueList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            If the value is already in the list, this operation is a no-op
            </summary>
            <value></value>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable">
            <summary>
            Specialized hashtable which can store multiple values for a given key. All values are stored in an UniqueValueList as value. When the
            value is requested, the UniqueValueList is returned, not the actual value. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable"/> class.
            </summary>
            <param name="capacity">Capacity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable"/> class.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable.#ctor(System.Collections.IDictionary)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable"/> instance.
            </summary>
            <param name="d">D.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the specified key and value into the <see cref="T:System.Collections.Hashtable"/>.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. If the key is already existing, the value is added to the existing list of values
            for that key, unless the value also already exists.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable.Add(System.Object,System.Collections.ICollection)">
            <summary>
            Adds the objects as values for the specified key.
            </summary>
            <param name="key">Key.</param>
            <param name="values">Values.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable.Contains(System.Object,System.Object)">
            <summary>
            Determines whether the multivaluehashtable contains the key, and if so, if the list of values stored under the key contains the value specified.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
            <returns>true if the key exists and the list of values contains the specified value</returns>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.MultiValueHashtable.Item(System.Object)">
            <summary>
            Gets / sets a value for the given key. Hides original indexer
            </summary>
            <remarks>returns null if not found</remarks>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.MergeableHashtable">
            <summary>
            Specialized Hashtable which allows merging with a passed-in hashtable. 
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MergeableHashtable.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.MergeableHashtable"/> instance.
            </summary>
            <param name="capacity">Capacity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MergeableHashtable.#ctor">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.MergeableHashtable"/> instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MergeableHashtable.#ctor(System.Collections.IDictionary)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.MergeableHashtable"/> instance.
            </summary>
            <param name="d">D.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MergeableHashtable.MergeHashtable(System.Collections.Hashtable)">
            <summary>
            Merges the hashtable passed in with this MergeableHashtable. All keys in toMerge which are already in this MergeableHashtable are skipped.
            </summary>
            <param name="toMerge">To merge.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.MergeableHashtable.Add(System.Object,System.Object)">
            <summary>
            Adds the specified value with the specified key. If key is already present, it will overwrite the value already stored with key.
            </summary>
            <param name="key">Key.</param>
            <param name="value">Value.</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldPersistenceInfoList">
            <summary>
            Special ArrayList which gets at construction time an entityfields array and an fieldpersistenceinfo array and splits it
            per target into a separate entry: a TargetFieldPersistenceInfoBucket, which contains 2 arrays with
            the information for that target. 
            It normally contains the same information as it gets at construction time, though in scenarios where inheritance is used and a target-per-
            entity hierarchy, this class is useful in update/insert/delete query building.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldPersistenceInfoList.#ctor">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldPersistenceInfoList"/> instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldPersistenceInfoList.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.IEntityFieldCore[],SD.LLBLGen.Pro.ORMSupportClasses.IFieldPersistenceInfo[])">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldPersistenceInfoList"/> instance. and splits the passed in fields/fieldpersistence info per target.
            The order in which the targets appear in fieldsPersistenceInfo is the order in which the TargetEntityFieldPersistenceInfoBucket objects
            are stored in this list.
            </summary>
            <param name="fields">Fields object to process. Can be null (in actions on db directly)</param>
            <param name="fieldsPersistenceInfo">persistence info objects to process</param>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.TargetEntityFieldPersistenceInfoBucket">
            <summary>
            Helperclass for the value instances of <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.EntityFieldPersistenceInfoList"/>
            Used in conjunction with EntityFieldPersistenceInfoHashtable by DQE's in Insert/Delete/Update query building
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TargetEntityFieldPersistenceInfoBucket.Fields">
            <summary>
            Array of references to entityfield objects
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TargetEntityFieldPersistenceInfoBucket.FieldsPersistenceInfo">
            <summary>
            Array of references to fieldpersistenceinfo objects
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.TargetEntityFieldPersistenceInfoBucket.ForEntityName">
            <summary>
            For this entity name.
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable">
            <summary>
            Specialized Hashtable which contains name-value pairs for name overwriting for catalog names names in adapter 
            on some databases (db2, sqlserver)
            </summary>
            <remarks>Stores the overwrites in a from-to way, so the key is the from name and the name it should be come is in the value.
            You can use a wildcard in the form (key) part: * to define a name for all catalog names in the persistence info.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable"/> instance.
            </summary>
            <param name="capacity">Capacity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable.#ctor">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable"/> instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable.#ctor(System.Collections.IDictionary)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable"/> instance.
            </summary>
            <param name="d">Dictionary</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable.#ctor(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameUsage)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable"/> instance.
            </summary>
            <param name="capacity">Capacity.</param>
            <param name="catalogNameUsageSetting">the setting to use for name overwriting</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameUsage)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable"/> instance.
            </summary>
            <param name="catalogNameUsageSetting">the setting to use for name overwriting</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable.#ctor(System.Collections.IDictionary,SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameUsage)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable"/> instance.
            </summary>
            <param name="d">Dictionary</param>
            <param name="catalogNameUsageSetting">the setting to use for name overwriting</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.CatalogNameOverwriteHashtable.CatalogNameUsageSetting">
            <summary>
            Gets / sets catalogNameUsageSetting
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable">
            <summary>
            Specialized Hashtable which contains name-value pairs for name overwriting for schema names names in adapter 
            on some databases (db2, sqlserver and oracle)
            </summary>
            <remarks>Stores the overwrites in a from-to way, so the key is the from name and the name it should be come is in the value.
            You can use a wildcard in the form (key) part: * to define a name for all schema names in the persistence info.</remarks>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable"/> instance.
            </summary>
            <param name="capacity">Capacity.</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable.#ctor">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable"/> instance.
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable.#ctor(System.Collections.IDictionary)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable"/> instance.
            </summary>
            <param name="d">Dictionary</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable.#ctor(System.Int32,SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameUsage)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable"/> instance.
            </summary>
            <param name="capacity">Capacity.</param>
            <param name="schemaNameUsageSetting">the setting to use for name overwriting</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable.#ctor(SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameUsage)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable"/> instance.
            </summary>
            <param name="schemaNameUsageSetting">the setting to use for name overwriting</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable.#ctor(System.Collections.IDictionary,SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameUsage)">
            <summary>
            Creates a new <see cref="T:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable"/> instance.
            </summary>
            <param name="d">Dictionary</param>
            <param name="schemaNameUsageSetting">the setting to use for name overwriting</param>
        </member>
        <member name="P:SD.LLBLGen.Pro.ORMSupportClasses.SchemaNameOverwriteHashtable.SchemaNameUsageSetting">
            <summary>
            Gets / sets schemaNameUsageSetting
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference">
            <summary>
            Class which contains the data to set an entity reference found in an XmlNode to an entity instance.
            Instances of this class are used to store entity references found in an Xml tree in ReadXml() so these
            references can be set once the complete object tree is created and objects are known.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference.PropertyHoldingInstance">
            <summary>
            The instance holding the ReferenceingProperty.
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference.ObjectID">
            <summary>
            The ObjectID of the entity object to set as value of the ReferencingProperty
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference.ReferencingProperty">
            <summary>
            The property descriptor of the property to set to the instance with the ObjectID stored in ObjectID
            </summary>
        </member>
        <member name="F:SD.LLBLGen.Pro.ORMSupportClasses.NodeEntityReference.IsCollectionAdd">
            <summary>
            If set to true, this reference is not a property set but a collection add. Collection to add to is referenced
            by PropertyHoldingInstance
            </summary>
        </member>
        <member name="T:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper">
            <summary>
            Generic XML helper class to work more efficient with an XmlDocument and XmlNodes. This class
            contains various utility methods to ease the (de)serialization process of the data to /from Xml
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.#ctor">
            <summary>
            CTor
            </summary>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.SetReadReferences(System.Collections.ArrayList,System.Collections.Hashtable)">
            <summary>
            Sets the references found during deserialization to the objects instantiated
            </summary>
            <param name="nodeEntityReferences">list of references</param>
            <param name="processedObjectIDs">list of processed objects to set references to</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.SetReadReferencesSS(System.Collections.ArrayList,System.Collections.Hashtable)">
            <summary>
            Sets the references found during deserialization to the objects instantiated
            SelfServicing version
            </summary>
            <param name="nodeEntityReferences">list of references</param>
            <param name="processedObjectIDs">list of processed objects to set references to</param>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.CreateNewNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Adds a new XmlNode with the name nodeName to the document specified. Does not add the node to any
            parent node.
            </summary>
            <param name="parentDocument">document the new node will be added to</param>
            <param name="nodeName">name of node</param>
            <returns>New node created</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.AddNode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Adds a new XmlNode with the name nodeName and the value nodeValue to the node parentNode specified
            </summary>
            <param name="parentNode">the parent node the node will be added to as a childnode</param>
            <param name="nodeName">name of node</param>
            <param name="nodeValue">value of node</param>
            <returns>New node created</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.AddNode(System.Xml.XmlNode,System.String)">
            <summary>
            Adds a new XmlNode with the name nodeName to the node parentNode specified
            </summary>
            <param name="parentNode">the parent node the node will be added to as a childnode</param>
            <param name="nodeName">name of node</param>
            <returns>New node created</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.AddAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Creates a new attribute with the name attributeName and the value attributeValue in the attributeCollection of the node parentNode, using
            the parentNode's owner document
            </summary>
            <param name="parentNode">the attribute's parent node</param>
            <param name="attributeName">the name for the new attribute</param>
            <param name="attributeValue">the value for the new attribute</param>
            <returns>the new attribute</returns>
        </member>
        <member name="M:SD.LLBLGen.Pro.ORMSupportClasses.XmlHelper.XmlValueToObject(System.String,System.String)">
            <summary>
            Converts the passed in value to the type with the name typeName. The typeName has to be a known type in .NET, and
            currently can only be a simple type. The value is returned as 'object'. 
            </summary>
            <param name="typeName">name of the type the value should be converted in.</param>
            <param name="xmlValue">value of the xml node which should be converted into an object.</param>
            <returns>the value converted into its native type.</returns>
        </member>
    </members>
</doc>
